<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>QWERTY • Posts by &#34;gdb&#34; tag</title>
        <link>http://gitqwerty777.github.io</link>
        <description>Programming | Computer Science | Thought</description>
        <language>zh-TW</language>
        <pubDate>Fri, 19 Sep 2014 09:35:58 +0800</pubDate>
        <lastBuildDate>Fri, 19 Sep 2014 09:35:58 +0800</lastBuildDate>
        <category>C#</category>
        <category>CodingStyle</category>
        <category>Emacs</category>
        <category>編輯器</category>
        <category>CFR</category>
        <category>電腦對局理論</category>
        <category>指令</category>
        <category>機器學習</category>
        <category>perceptron</category>
        <category>readme</category>
        <category>文件</category>
        <category>github</category>
        <category>artificial intelligence</category>
        <category>search</category>
        <category>First-Order Logic</category>
        <category>大數</category>
        <category>程式</category>
        <category>C++</category>
        <category>Hexo</category>
        <category>網誌</category>
        <category>Markdown</category>
        <category>CleanCode</category>
        <category>重構</category>
        <category>TDD</category>
        <category>設計模式</category>
        <category>CMake</category>
        <category>Makefile</category>
        <category>Linux</category>
        <category>Todo</category>
        <category>註解</category>
        <category>經濟學</category>
        <category>策略</category>
        <category>競爭</category>
        <category>博弈論</category>
        <category>計算機結構</category>
        <category>人工智慧</category>
        <category>圍棋</category>
        <category>象棋</category>
        <category>蒙地卡羅</category>
        <category>Alpha-Beta搜尋</category>
        <category>強化學習</category>
        <category>計算機網路</category>
        <category>boost</category>
        <category>函式庫</category>
        <category>編譯</category>
        <category>gcc</category>
        <category>g++</category>
        <category>clang</category>
        <category>最佳化</category>
        <category>推薦系統</category>
        <category>FM</category>
        <category>FFM</category>
        <category>SVM</category>
        <category>Embedding</category>
        <category>自然語言處理</category>
        <category>外國用語</category>
        <category>萌典</category>
        <category>opencc</category>
        <category>PTT</category>
        <category>vuejs</category>
        <category>linux</category>
        <category>c</category>
        <category>compile</category>
        <category>gdb</category>
        <category>c語言</category>
        <category>cpp</category>
        <category>除錯</category>
        <category>git</category>
        <category>VMWare</category>
        <category>虛擬機</category>
        <category>IFTTT</category>
        <category>自動化</category>
        <category>備份</category>
        <category>webhook</category>
        <category>簡報</category>
        <category>軟體</category>
        <category>PowerPoint</category>
        <category>Latex</category>
        <category>JavaScript</category>
        <category>CSS</category>
        <category>Unity</category>
        <category>fcitx</category>
        <category>嘸蝦米</category>
        <category>輸入法</category>
        <category>硬碟</category>
        <category>記憶體</category>
        <category>效能</category>
        <category>錯誤</category>
        <category>makefile</category>
        <category>備忘錄</category>
        <category>存檔</category>
        <category>統計</category>
        <category>byobu</category>
        <category>screen</category>
        <category>tmux</category>
        <category>reactjs</category>
        <category>javascript</category>
        <category>WideAndDeep</category>
        <category>Google</category>
        <category>觀察者</category>
        <category>訂閱</category>
        <category>委託</category>
        <category>正規表示式(RegExp)</category>
        <category>上下文無關文法(CFG)</category>
        <category>hexo</category>
        <category>blog</category>
        <category>theme</category>
        <category>feature</category>
        <category>revealJS</category>
        <category>markdown</category>
        <category>rss</category>
        <category>facebook</category>
        <category>youtube</category>
        <category>ptt</category>
        <category>bilibili</category>
        <category>pixiv</category>
        <category>crawler</category>
        <category>SEO</category>
        <category>google</category>
        <category>html</category>
        <category>amazon</category>
        <category>webhost</category>
        <category>ssl</category>
        <category>漢字</category>
        <category>中文</category>
        <category>異體字</category>
        <category>unicode</category>
        <category>unity</category>
        <category>演算法</category>
        <category>隨機排序</category>
        <category>洗牌</category>
        <category>Fisher-Yates</category>
        <category>證明</category>
        <category>python</category>
        <item>
            <guid isPermalink="true">http://gitqwerty777.github.io/gdb-introduction/</guid>
            <title>gdb簡介</title>
            <link>http://gitqwerty777.github.io/gdb-introduction/</link>
            <category>gdb</category>
            <category>c語言</category>
            <category>cpp</category>
            <category>除錯</category>
            <pubDate>Fri, 19 Sep 2014 09:35:58 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;簡介&#34;&gt;&lt;a href=&#34;#簡介&#34; class=&#34;headerlink&#34; title=&#34;簡介&#34;&gt;&lt;/a&gt;簡介&lt;/h2&gt;&lt;p&gt;只要使用GNU計畫出產的編譯器(如gcc)，就可以用gdb來進行除錯，包含 C/C++/Objective-C/Fortran/Java 等語言。&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h2 id=&#34;基本知識&#34;&gt;&lt;a href=&#34;#基本知識&#34; class=&#34;headerlink&#34; title=&#34;基本知識&#34;&gt;&lt;/a&gt;基本知識&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;function stack → frame&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C語言在進入一個函式前，會將原本所在的函式的資訊(變數值、函式名、指標)儲存至堆疊(stack)裡，等到回傳(return)後再從這些堆疊裡復原函式資訊&lt;/li&gt;
&lt;li&gt;目前正在執行的函式就是 frame 0，而呼叫frame 0的函式就是frame 1，以此類推&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;除錯程序&#34;&gt;&lt;a href=&#34;#除錯程序&#34; class=&#34;headerlink&#34; title=&#34;除錯程序&#34;&gt;&lt;/a&gt;除錯程序&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;載入程式&lt;/li&gt;
&lt;li&gt;設中斷點&lt;/li&gt;
&lt;li&gt;執行程式，程式跑到中斷點會停下來&lt;/li&gt;
&lt;li&gt;在堆疊間跳躍，並檢查變數值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;載入程式&#34;&gt;&lt;a href=&#34;#載入程式&#34; class=&#34;headerlink&#34; title=&#34;載入程式&#34;&gt;&lt;/a&gt;載入程式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;編譯時加入 &lt;code&gt;-g&lt;/code&gt; 可加入除錯資訊。這些除錯訊息會影響程式大小和執行速度，所以一般在發佈應用程式時是不會以&lt;code&gt;-g&lt;/code&gt;參數編譯的。&lt;ul&gt;
&lt;li&gt;可以在事後利用 strip 指令清掉應用程式裡的除錯資訊。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;編譯時最好不要開optimization(&lt;code&gt;-O&lt;/code&gt;)，不然優化後的程式的執行順序會改變，較難debug。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;執行&lt;code&gt;gdb [program]&lt;/code&gt;即可開始除錯&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;gdb程式參數&lt;/th&gt;
&lt;th&gt;簡寫&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;-symbols [file_name]&lt;/td&gt;
&lt;td&gt;-s&lt;/td&gt;
&lt;td&gt;讀取檔案中的除錯表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-exec [file_name]&lt;/td&gt;
&lt;td&gt;-e&lt;/td&gt;
&lt;td&gt;除錯一個執行檔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-core [file_name]&lt;/td&gt;
&lt;td&gt;-c&lt;/td&gt;
&lt;td&gt;讀入一個core dump檔案&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-pid [process_id]&lt;/td&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;啟動attach模式，除錯一個執行中的程式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-directory [directory_name]&lt;/td&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;將資料夾加入原始碼的搜尋路徑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-readnow&lt;/td&gt;
&lt;td&gt;-r&lt;/td&gt;
&lt;td&gt;一次讀取完所有的符號表，這會讓啟動gdb的時間變長，但在執行往後的除錯動作會較快速。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-quiet/-silent&lt;/td&gt;
&lt;td&gt;-q&lt;/td&gt;
&lt;td&gt;安靜模式，啟動時gdb將不會顯示版權頁。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-cd directory_name&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;改變程式執行的目錄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–args&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;這個參數要當作命令列的最後一個參數，其後跟隨的參數都會被視為「傳給要除錯的程式的參數」&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;設中斷點&#34;&gt;&lt;a href=&#34;#設中斷點&#34; class=&#34;headerlink&#34; title=&#34;設中斷點&#34;&gt;&lt;/a&gt;設中斷點&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[breakpoint]&lt;/code&gt; 可以是 file+line number, function name, memory address&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;停止時機&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;break&lt;/td&gt;
&lt;td&gt;gdb執行下一個指令後停止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break [breakpoint]&lt;/td&gt;
&lt;td&gt;在指定行數、函式開始前、或指定位址停止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break [breakpoint] if [condition]&lt;/td&gt;
&lt;td&gt;只有在符合條件時停止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break [offset]&lt;/td&gt;
&lt;td&gt;在目前程式停止位置的offset行&lt;br&gt;停止offset負數時，為前offset行，反之&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break [filename]:[linenum]&lt;/td&gt;
&lt;td&gt;指定檔案的指定行停止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rbreak [RE]&lt;/td&gt;
&lt;td&gt;符合正規表示式的函式停止&lt;br&gt;如 &lt;code&gt;rbreak .&lt;/code&gt;, 這樣每個函式開頭都有中斷點了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tbreak&lt;/td&gt;
&lt;td&gt;只會生效一次，能放的參數與break相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;disable [breakpoint number]&lt;/td&gt;
&lt;td&gt;暫時關閉指定中斷點，若無指定則全部關閉&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enable [breakpoint number]&lt;/td&gt;
&lt;td&gt;取消暫時關閉狀態&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;info break&lt;/td&gt;
&lt;td&gt;列出目前所有的中斷點&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;condition [breakpoint number] [condition]&lt;/td&gt;
&lt;td&gt;設中斷點的條件，如果條件為true才中斷&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commands [breakpoint number] [command]&lt;/td&gt;
&lt;td&gt;設定遇到指定中斷點時要自動執行的指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clear [breakpoint]&lt;/td&gt;
&lt;td&gt;刪除指定中斷點&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete [breakpoint number]&lt;/td&gt;
&lt;td&gt;刪除指定中斷點&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;執行程式&#34;&gt;&lt;a href=&#34;#執行程式&#34; class=&#34;headerlink&#34; title=&#34;執行程式&#34;&gt;&lt;/a&gt;執行程式&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;file [filename]&lt;/td&gt;
&lt;td&gt;開啟檔案 (等同於 gdb filename)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;run&lt;/td&gt;
&lt;td&gt;執行程式 (可加參數)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kill&lt;/td&gt;
&lt;td&gt;終止程式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;設定特定參數(或變數)&lt;br&gt;如：&lt;code&gt;set environment CFLAGS=-g&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unset&lt;/td&gt;
&lt;td&gt;取消特定參數&lt;br&gt;如：&lt;code&gt;unset environment&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;show&lt;/td&gt;
&lt;td&gt;顯示特定參數&lt;br&gt;如：&lt;code&gt;show environment&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set/show args&lt;/td&gt;
&lt;td&gt;設定/顯示 命令列的參數&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attach [PID]&lt;/td&gt;
&lt;td&gt;載入正在執行的程式以進行除錯。PID 可由 ps 指令取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;detach [PID]&lt;/td&gt;
&lt;td&gt;釋放已 attach 的程式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;在堆疊間跳躍&#34;&gt;&lt;a href=&#34;#在堆疊間跳躍&#34; class=&#34;headerlink&#34; title=&#34;在堆疊間跳躍&#34;&gt;&lt;/a&gt;在堆疊間跳躍&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主要指令&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;next&lt;/td&gt;
&lt;td&gt;執行&lt;strong&gt;當前函式&lt;/strong&gt;的一個指令&lt;br&gt;若指令為呼叫函式，則直接跑完，不會進入frame中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step&lt;/td&gt;
&lt;td&gt;執行函式中的一個指令&lt;br&gt;若指令為呼叫函式，會進入新的frame中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;until&lt;/td&gt;
&lt;td&gt;直接跑完迴圈(for, while…)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;continue&lt;/td&gt;
&lt;td&gt;繼續執行，直到下一個中斷點或是程式停止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;視同該 frame 已執行完畢&lt;br&gt;等同插入C語言指令&lt;code&gt;return;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;※註：若該函式的除錯資訊沒有編進執行檔裡的話，那&lt;code&gt;step&lt;/code&gt;也不會跳進這個函式裡，而是單純的將它看作一行程式碼(如同next的作用)，如標準函式庫(如&lt;code&gt;stdio.h&lt;/code&gt;)提供的函式。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;backtrace&lt;/td&gt;
&lt;td&gt;堆疊追蹤。會顯示出所有的 frame 的資訊&lt;br&gt; = &lt;code&gt;info frame&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame&lt;/td&gt;
&lt;td&gt;顯示現在的行數、函式、及其所傳送的參數&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame [frame number]&lt;/td&gt;
&lt;td&gt;切換到指定的frame(以印出區域變數)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;up&lt;/td&gt;
&lt;td&gt;回到上一層frame，也就是原本的frame被呼叫的地方，並顯示其 stack 資訊&lt;br&gt;&lt;code&gt;up 3&lt;/code&gt;: 回到上三層frame(0 → 3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;down&lt;/td&gt;
&lt;td&gt;到下一層frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;finish&lt;/td&gt;
&lt;td&gt;執行完目前的frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jump [location]&lt;/td&gt;
&lt;td&gt;直接跳到指定位置(行數，函式…)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;列出原始碼&#34;&gt;&lt;a href=&#34;#列出原始碼&#34; class=&#34;headerlink&#34; title=&#34;列出原始碼&#34;&gt;&lt;/a&gt;列出原始碼&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;list(第一次)&lt;/td&gt;
&lt;td&gt;列出現在執行的位置上下5行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list(第二次以後)&lt;/td&gt;
&lt;td&gt;繼續印出之後的程式碼(類似page down)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list -&lt;/td&gt;
&lt;td&gt;印出上一次list的程式碼的前一段程式碼(類似page up)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list a,b&lt;/td&gt;
&lt;td&gt;印出第 a ~ b 行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list [filename]:[number]&lt;/td&gt;
&lt;td&gt;列出某檔案的第幾行，檔案名可省略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list [function]&lt;/td&gt;
&lt;td&gt;列出某函數的程式碼&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;show listsize&lt;/td&gt;
&lt;td&gt;顯示現在一次印出幾行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set listsize [num]&lt;/td&gt;
&lt;td&gt;設定一次印出幾行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;檢查變數值&#34;&gt;&lt;a href=&#34;#檢查變數值&#34; class=&#34;headerlink&#34; title=&#34;檢查變數值&#34;&gt;&lt;/a&gt;檢查變數值&lt;/h3&gt;&lt;p&gt;可以顯示某些資訊以利於debug&lt;/p&gt;
&lt;h4 id=&#34;print-display&#34;&gt;&lt;a href=&#34;#print-display&#34; class=&#34;headerlink&#34; title=&#34;print, display&#34;&gt;&lt;/a&gt;print, display&lt;/h4&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(gdb) &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt; = 6078&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;輸入 &lt;code&gt;print/格式字元 [variable]&lt;/code&gt; 可以指定型態，與printf不同的以粗體表示  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;格式字元&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;整數&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;td&gt;無號整數(unsigned)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;td&gt;八進位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;t&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;二進位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;位址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;字元&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;浮點數&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;whatis [variable]&lt;/td&gt;
&lt;td&gt;顯示指定變數的型態&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print arr[1]@5&lt;/td&gt;
&lt;td&gt;印出變數arr[1]和之後的變數，共印出5個(arr[1]~arr[5])&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print *arr@3&lt;/td&gt;
&lt;td&gt;印出陣列arr的前3個變數(arr[0]~arr[2])&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;display [variable]&lt;/td&gt;
&lt;td&gt;每次中斷時會顯示指定變數值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;變數&#34;&gt;&lt;a href=&#34;#變數&#34; class=&#34;headerlink&#34; title=&#34;變數&#34;&gt;&lt;/a&gt;變數&lt;/h4&gt;&lt;p&gt;執行 print 指令後，gdb 產生臨時變數(如&lt;code&gt;$1&lt;/code&gt;)來記錄&lt;br&gt;可以直接利用 &lt;code&gt;$1&lt;/code&gt; 來取用這個變數&lt;/p&gt;
&lt;p&gt;用於 print 及 display 的參數名稱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$7&lt;/code&gt;: 第七個運算式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;: 前一個的運算式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$$&lt;/code&gt;: 前二個的運算式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$$7&lt;/code&gt;: 前七個的運算式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$pc&lt;/code&gt; program counter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$sp&lt;/code&gt; stack pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;設定新變數&#34;&gt;&lt;a href=&#34;#設定新變數&#34; class=&#34;headerlink&#34; title=&#34;設定新變數&#34;&gt;&lt;/a&gt;設定新變數&lt;/h4&gt;&lt;p&gt;取代冗長路徑的變數，如在深層資料結構中的變數&lt;br&gt;(註: 此變數為 pass by reference, 修改新變數的值也會修改原本的變數)&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;set $newv &amp;#x3D; model-&amp;gt;dataset-&amp;gt;vector-&amp;gt;data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p *($newv++)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;info-檢視詳細資訊&#34;&gt;&lt;a href=&#34;#info-檢視詳細資訊&#34; class=&#34;headerlink&#34; title=&#34;info: 檢視詳細資訊&#34;&gt;&lt;/a&gt;info: 檢視詳細資訊&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;info break&lt;/td&gt;
&lt;td&gt;列出目前所有的中斷點&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info line&lt;/td&gt;
&lt;td&gt;查看程式目前運行的行數&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info frame&lt;/td&gt;
&lt;td&gt;詳細的frame資訊&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info args&lt;/td&gt;
&lt;td&gt;顯示傳給目前執行函式的參數值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info locals&lt;/td&gt;
&lt;td&gt;顯示目前執行函式內所有區域變數的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info reg&lt;/td&gt;
&lt;td&gt;顯示暫存器(register)的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info all-reg&lt;/td&gt;
&lt;td&gt;顯示暫存器的值，包括數學運算暫存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info handle&lt;/td&gt;
&lt;td&gt;列出目前處理 signal 的設定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info share&lt;/td&gt;
&lt;td&gt;顯示共享函式庫資訊&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;其他指令&#34;&gt;&lt;a href=&#34;#其他指令&#34; class=&#34;headerlink&#34; title=&#34;其他指令&#34;&gt;&lt;/a&gt;其他指令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;quit&lt;/code&gt; 結束 = &lt;code&gt;q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shell [command]&lt;/code&gt; 在shell上執行指令&lt;/li&gt;
&lt;li&gt;Enter鍵: 重複上一個命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;信號-signal-處理&#34;&gt;&lt;a href=&#34;#信號-signal-處理&#34; class=&#34;headerlink&#34; title=&#34;信號(signal)處理&#34;&gt;&lt;/a&gt;信號(signal)處理&lt;/h3&gt;&lt;p&gt;&lt;code&gt;handle [signal] [operation]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;預設operation為 &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;noignore&lt;/code&gt;，也就是遇到 signal 時，GDB 會先攔截，並暫停程式&lt;/li&gt;
&lt;li&gt;必要時可以改為 &lt;code&gt;nostop&lt;/code&gt;, &lt;code&gt;noprint&lt;/code&gt;，讓程式本身去處理 signal&lt;/li&gt;
&lt;li&gt;若下達 &lt;code&gt;ignore&lt;/code&gt; 則是讓程式忽略此 signal&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;thread處理&#34;&gt;&lt;a href=&#34;#thread處理&#34; class=&#34;headerlink&#34; title=&#34;thread處理&#34;&gt;&lt;/a&gt;thread處理&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;查看目前在哪個 thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread [num]&lt;/td&gt;
&lt;td&gt;切換至 第num個 thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread apply all [command]&lt;/td&gt;
&lt;td&gt;對所有 thread 執行指令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;Python-整合&#34;&gt;&lt;a href=&#34;#Python-整合&#34; class=&#34;headerlink&#34; title=&#34;Python 整合&#34;&gt;&lt;/a&gt;Python 整合&lt;/h3&gt;&lt;p&gt;可於gdb中執行python，並執行操作，如存取breakpoint&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python print(gdb.breakpoints())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python gdb.execute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python gdb.parse_and_eval()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;反向執行&#34;&gt;&lt;a href=&#34;#反向執行&#34; class=&#34;headerlink&#34; title=&#34;反向執行&#34;&gt;&lt;/a&gt;反向執行&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlcnlsTmF0c3UvYXJ0aWNsZS9kZXRhaWxzLzY0MzY1NzA=&#34;&gt;GDB 反向調試（Reverse Debugging）&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reverse-continue&lt;/code&gt; 反向執行程式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse-step&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse-stepi&lt;/code&gt; 反向執行程式到上一條機器指令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse-next&lt;/code&gt; 反向執行到上一次被執行的源代碼行，但是不進入函式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse-nexti&lt;/code&gt; 反向執行到上一條機器指令，除非這條指令用來返回一個函式調用、整個函式將會被反向執行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse-finish&lt;/code&gt; 反向執行程式回到調用目前函式的地方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set exec-direction [forward | reverse]&lt;/code&gt; 設置程序執行方向，即可用一般的step和continue來反向執行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指令簡寫&#34;&gt;&lt;a href=&#34;#指令簡寫&#34; class=&#34;headerlink&#34; title=&#34;指令簡寫&#34;&gt;&lt;/a&gt;指令簡寫&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;: b&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: d&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disable&lt;/code&gt;: dis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt;: n&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step&lt;/code&gt;: s&lt;/li&gt;
&lt;li&gt;&lt;code&gt;until&lt;/code&gt;: u&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;: c&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jump&lt;/code&gt;: j&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt;: ret&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;: l&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backtrace&lt;/code&gt;: bt&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt;: i&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt;: p&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display&lt;/code&gt;: disp&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt;: env&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可多次使用簡寫&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;info break&lt;/code&gt; = &lt;code&gt;i b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;CppCon-2015-Greg-Law-“Give-me-15-minutes-amp-I’ll-change-your-view-of-GDB”&#34;&gt;&lt;a href=&#34;#CppCon-2015-Greg-Law-“Give-me-15-minutes-amp-I’ll-change-your-view-of-GDB”&#34; class=&#34;headerlink&#34; title=&#34;CppCon 2015: Greg Law “Give me 15 minutes &amp;amp; I’ll change your view of GDB”&#34;&gt;&lt;/a&gt;CppCon 2015: Greg Law “Give me 15 minutes &amp;amp; I’ll change your view of GDB”&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Qb3JmTFNyM0RESQ==&#34;&gt;Youtube連結&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0NwcENvbi9DcHBDb24yMDE1L2Jsb2IvbWFzdGVyL0xpZ2h0bmluZyUyMFRhbGtzJTIwYW5kJTIwTHVuY2glMjBTZXNzaW9ucy9HaXZlJTIwTWUlMjAxNSUyME1pbnV0ZXMlMjBhbmQlMjBJJyB0YXJnZXQ9&#34;&gt;Github連結&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl-x a&lt;/code&gt;： text ui mode(tui)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl-p&lt;/code&gt;： 得到前一個指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-x 2&lt;/code&gt;： switch to assembly mode/register group mode &lt;/li&gt;
&lt;li&gt;&lt;code&gt;tui reg float&lt;/code&gt;： show float registers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b _exit.c:32&lt;/code&gt;： 在程式結束之前停止&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command [breakpoint number] [command]&lt;/code&gt;： 遇到breakpoint時，所自動執行的指令 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;x [memory address]&lt;/code&gt;： jump to memory location&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用感想&#34;&gt;&lt;a href=&#34;#使用感想&#34; class=&#34;headerlink&#34; title=&#34;使用感想&#34;&gt;&lt;/a&gt;使用感想&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;遇到segmentation fault的時候，一定會使用&lt;ul&gt;
&lt;li&gt;可知道出問題的位置&lt;/li&gt;
&lt;li&gt;通常再print看看就知道原因了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平常還是用&lt;code&gt;printf&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;殺雞焉用牛刀？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果程式有完整的錯誤處理和記錄檔(log)，可減少用到gdb的頻率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;&lt;a href=&#34;#參考資料&#34; class=&#34;headerlink&#34; title=&#34;參考資料&#34;&gt;&lt;/a&gt;參考資料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3VzZXIuZnJkbS5pbmZvL2NraHVuZy9iL2MvZ2RiLnBocA==&#34;&gt;除錯程式:gdb&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RldHJhbGV0Lmx1bmEuY29tLnR3Lz9vcD1WaWV3QXJ0aWNsZSZhcnRpY2xlSWQ9MTg3JmJsb2dJZD0x&#34;&gt;Linux 除錯利器-GDB簡介&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;  &lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cueXNsaW4udHcvMjAxMi8wOC9nZGIuaHRtbA==&#34;&gt;工欲善其事，必先利其器:GDB基本教學&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;  &lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5zdHVkeS1hcmVhLm9yZy9jeXJpbC9vcGVudG9vbHMvb3BlbnRvb2xzL2RlYnVnLmh0bWw=&#34;&gt;用Open Source工具開發軟體: 新軟體開發關念&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;  &lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2dkYi9kb2N1bWVudGF0aW9uLw==&#34;&gt;GDB官方文件&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
