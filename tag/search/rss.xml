<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>QWERTY • Posts by &#34;search&#34; tag</title>
        <link>http://gitqwerty777.github.io</link>
        <description>Programming | Computer Science | Thought</description>
        <language>zh-TW</language>
        <pubDate>Wed, 25 Feb 2015 11:47:47 +0800</pubDate>
        <lastBuildDate>Wed, 25 Feb 2015 11:47:47 +0800</lastBuildDate>
        <category>C#</category>
        <category>CodingStyle</category>
        <category>Emacs</category>
        <category>編輯器</category>
        <category>CFR</category>
        <category>電腦對局理論</category>
        <category>指令</category>
        <category>機器學習</category>
        <category>perceptron</category>
        <category>readme</category>
        <category>文件</category>
        <category>github</category>
        <category>artificial intelligence</category>
        <category>search</category>
        <category>First-Order Logic</category>
        <category>大數</category>
        <category>程式</category>
        <category>C++</category>
        <category>Hexo</category>
        <category>網誌</category>
        <category>Markdown</category>
        <category>CleanCode</category>
        <category>重構</category>
        <category>TDD</category>
        <category>設計模式</category>
        <category>CMake</category>
        <category>Makefile</category>
        <category>Linux</category>
        <category>Todo</category>
        <category>註解</category>
        <category>經濟學</category>
        <category>策略</category>
        <category>競爭</category>
        <category>博弈論</category>
        <category>計算機結構</category>
        <category>人工智慧</category>
        <category>圍棋</category>
        <category>象棋</category>
        <category>蒙地卡羅</category>
        <category>Alpha-Beta搜尋</category>
        <category>強化學習</category>
        <category>計算機網路</category>
        <category>boost</category>
        <category>函式庫</category>
        <category>編譯</category>
        <category>gcc</category>
        <category>g++</category>
        <category>clang</category>
        <category>最佳化</category>
        <category>推薦系統</category>
        <category>FM</category>
        <category>FFM</category>
        <category>SVM</category>
        <category>Embedding</category>
        <category>自然語言處理</category>
        <category>外國用語</category>
        <category>萌典</category>
        <category>opencc</category>
        <category>PTT</category>
        <category>vuejs</category>
        <category>linux</category>
        <category>c</category>
        <category>compile</category>
        <category>gdb</category>
        <category>c語言</category>
        <category>cpp</category>
        <category>除錯</category>
        <category>git</category>
        <category>VMWare</category>
        <category>虛擬機</category>
        <category>IFTTT</category>
        <category>自動化</category>
        <category>備份</category>
        <category>webhook</category>
        <category>簡報</category>
        <category>軟體</category>
        <category>PowerPoint</category>
        <category>Latex</category>
        <category>JavaScript</category>
        <category>CSS</category>
        <category>Unity</category>
        <category>fcitx</category>
        <category>嘸蝦米</category>
        <category>輸入法</category>
        <category>硬碟</category>
        <category>記憶體</category>
        <category>效能</category>
        <category>錯誤</category>
        <category>makefile</category>
        <category>備忘錄</category>
        <category>存檔</category>
        <category>統計</category>
        <category>byobu</category>
        <category>screen</category>
        <category>tmux</category>
        <category>reactjs</category>
        <category>javascript</category>
        <category>WideAndDeep</category>
        <category>Google</category>
        <category>觀察者</category>
        <category>訂閱</category>
        <category>委託</category>
        <category>正規表示式(RegExp)</category>
        <category>上下文無關文法(CFG)</category>
        <category>hexo</category>
        <category>blog</category>
        <category>theme</category>
        <category>feature</category>
        <category>revealJS</category>
        <category>markdown</category>
        <category>rss</category>
        <category>facebook</category>
        <category>youtube</category>
        <category>ptt</category>
        <category>bilibili</category>
        <category>pixiv</category>
        <category>crawler</category>
        <category>SEO</category>
        <category>google</category>
        <category>html</category>
        <category>amazon</category>
        <category>webhost</category>
        <category>ssl</category>
        <category>漢字</category>
        <category>中文</category>
        <category>異體字</category>
        <category>unicode</category>
        <category>unity</category>
        <category>演算法</category>
        <category>隨機排序</category>
        <category>洗牌</category>
        <category>Fisher-Yates</category>
        <category>證明</category>
        <category>python</category>
        <item>
            <guid isPermalink="true">http://gitqwerty777.github.io/artificial-intelligence/</guid>
            <title>人工智慧</title>
            <link>http://gitqwerty777.github.io/artificial-intelligence/</link>
            <category>artificial intelligence</category>
            <category>search</category>
            <category>First-Order Logic</category>
            <pubDate>Wed, 25 Feb 2015 11:47:47 +0800</pubDate>
            <description><![CDATA[ &lt;!--Renew:--&gt;

&lt;h2 id=&#34;Introduction&#34;&gt;&lt;a href=&#34;#Introduction&#34; class=&#34;headerlink&#34; title=&#34;Introduction&#34;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;What is AI? → What is definition of Intelligence?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Artificial Intelligence(A.I.) or WALL.E&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;human-like or robot with intelligence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;there are various defintion of AI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;goal of AI : To create intelligent machines&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multiple Dimensions of Intelligence(多元智能)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linguistic(語言), Logico-mathematical, Spatial, Musical, Kinesthetic(動作), Intrapersonal, Interpersonal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intelligent Behavior  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ability to solve complex problems&lt;/li&gt;
&lt;li&gt;Learning from experience&lt;/li&gt;
&lt;li&gt;Adaptability(適應性)&lt;/li&gt;
&lt;li&gt;Self-awareness(自我意識)&lt;/li&gt;
&lt;li&gt;Dealing with incomplete information&lt;/li&gt;
&lt;li&gt;Action under time pressure&lt;/li&gt;
&lt;li&gt;Creativity&lt;/li&gt;
&lt;li&gt;Common sense reasoning etc. (really hard to teach computer)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fundamental Elements of Intelligence  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prediction&lt;/strong&gt; – Imagining how things might turn out rather than having to try them explicitly&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response to change&lt;/strong&gt; – Responding with intelligent action instead of inalterable instinct or conditional reflexes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intentional action&lt;/strong&gt; – Having a goal and selecting actions appropriate to achieving the goal&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reasoning&lt;/strong&gt; – starting with some collection of facts and adding to it by any inference method&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Turing-Test&#34;&gt;&lt;a href=&#34;#Turing-Test&#34; class=&#34;headerlink&#34; title=&#34;Turing Test&#34;&gt;&lt;/a&gt;Turing Test&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“Can machines &lt;strong&gt;behave&lt;/strong&gt; intelligently?”&lt;/li&gt;
&lt;li&gt;now it is &lt;strong&gt;not criteria of AI&lt;/strong&gt;(You can use database or some way to “cheat”)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alan Turing (1912-1954)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1936: The Turing machine, computability, universal machine&lt;/li&gt;
&lt;li&gt;1950: The Turing Test for machine intelligence&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Taxonomy-of-AI&#34;&gt;&lt;a href=&#34;#Taxonomy-of-AI&#34; class=&#34;headerlink&#34; title=&#34;Taxonomy of AI&#34;&gt;&lt;/a&gt;Taxonomy of AI&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/img/AI/1-1.png&#34; alt=&#34;AI classess&#34;&gt;&lt;/p&gt;
&lt;p&gt;Acting rationally  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do the right thing  &lt;ul&gt;
&lt;li&gt;be expected to &lt;strong&gt;maximize goal achievement&lt;/strong&gt;, given the &lt;strong&gt;available(limited) information&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doesn’t necessarily involve thinking&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;blinking reflex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;The-History-of-AI&#34;&gt;&lt;a href=&#34;#The-History-of-AI&#34; class=&#34;headerlink&#34; title=&#34;The History of AI&#34;&gt;&lt;/a&gt;The History of AI&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The gestation of AI (1943-1956)&lt;/li&gt;
&lt;li&gt;Dartmouth conference (Summer of 1956)&lt;ul&gt;
&lt;li&gt;Participants: McCarthy, Minsky, Shannon, Rochester, More(Princeton), Newell, Simon (CMU), Solomonoff, Selfridge(MIT), Samuel (IBM)&lt;/li&gt;
&lt;li&gt;“AI” first be named&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Early enthusiasm and expectations (1952-1969)&lt;/li&gt;
&lt;li&gt;A dose of reality (1966-1974)&lt;/li&gt;
&lt;li&gt;Shakey the Robot (1966-1972)&lt;ul&gt;
&lt;li&gt;the first mobile robot to reason about its actions&lt;ul&gt;
&lt;li&gt;can do perception, world-modeling, and acting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;often shakes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Knowledge-based systems (1969-1979)&lt;/li&gt;
&lt;li&gt;AI (expert systems) becomes an industry (1980-1988)&lt;/li&gt;
&lt;li&gt;The return of neural networks (1986-1995)&lt;/li&gt;
&lt;li&gt;Broader technical development: probability, ALife, GA, soft computing (1988-)&lt;/li&gt;
&lt;li&gt;Machine learning and data mining (1990- )&lt;/li&gt;
&lt;li&gt;Intelligent agents (1995- )&lt;/li&gt;
&lt;li&gt;Bayesian probabilistic reasoning&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Historical-Achievements&#34;&gt;&lt;a href=&#34;#Historical-Achievements&#34; class=&#34;headerlink&#34; title=&#34;Historical Achievements&#34;&gt;&lt;/a&gt;Historical Achievements&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Deep Blue defeated the reigning world chess champion Garry Kasparov in 1997&lt;/li&gt;
&lt;li&gt;Proved a mathematical conjecture (Robbins conjecture)unsolved for decades&lt;/li&gt;
&lt;li&gt;No hands across America (driving autonomously 98% of the time from Pittsburgh to San Diego)&lt;ul&gt;
&lt;li&gt;Autonomous Land Vehicle In a Neural Network(ALVINN)&lt;ul&gt;
&lt;li&gt;a perception system which learns to control the NAVLAB vehicles by watching a person drive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;During the 1991 Gulf War, US forces deployed an AI logistics planning and scheduling program that involved up to 50,000 vehicles, cargo, and people&lt;/li&gt;
&lt;li&gt;NASA’s on-board autonomous planning program controlled the scheduling of operations for a spacecraft&lt;ul&gt;
&lt;li&gt;Mars: Spirit, Opportunity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proverb solves crossword puzzles better than most humans&lt;/li&gt;
&lt;li&gt;Stanley drove 132 miles to win the Grand Challenge&lt;ul&gt;
&lt;li&gt;DARPA(美國國防遠景研究規劃局) give 1 million in 2004&lt;/li&gt;
&lt;li&gt;investment in competition is far better than in research of university&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Other-Usage-of-AI&#34;&gt;&lt;a href=&#34;#Other-Usage-of-AI&#34; class=&#34;headerlink&#34; title=&#34;Other Usage of AI&#34;&gt;&lt;/a&gt;Other Usage of AI&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;on market&lt;ul&gt;
&lt;li&gt;floor-cleaning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;for fun&lt;ul&gt;
&lt;li&gt;soccer&lt;/li&gt;
&lt;li&gt;pet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;human-like&lt;ul&gt;
&lt;li&gt;QRIO(sony)&lt;/li&gt;
&lt;li&gt;Asimo(Honda)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;in art: “Aaron”&lt;ul&gt;
&lt;li&gt;Inspired by the scribbling behavior of young children&lt;ul&gt;
&lt;li&gt;construction of simple core-figures&lt;/li&gt;
&lt;li&gt;a simple strategy for tracing a path around them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Online auction for &amp;gt; $2000 a piece&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Chap02-Agents&#34;&gt;&lt;a href=&#34;#Chap02-Agents&#34; class=&#34;headerlink&#34; title=&#34;Chap02 Agents&#34;&gt;&lt;/a&gt;Chap02 Agents&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/img/AI/1-2.png&#34; alt=&#34;agent&#34;&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take information from environment through sensors&lt;/li&gt;
&lt;li&gt;do reaction that would probably change the environment through actuators&lt;/li&gt;
&lt;li&gt;Human agent  &lt;ul&gt;
&lt;li&gt;Sensors: eyes, ears, and other organs&lt;/li&gt;
&lt;li&gt;Actuators: hands, legs, mouth, and other body parts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Agents-and-environments&#34;&gt;&lt;a href=&#34;#Agents-and-environments&#34; class=&#34;headerlink&#34; title=&#34;Agents and environments&#34;&gt;&lt;/a&gt;Agents and environments&lt;/h3&gt;&lt;p&gt;“do the right thing” is the one that will cause the agent to be most successful   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance measure&lt;ul&gt;
&lt;li&gt;An objective criterion for success of an agent’s behavior&lt;/li&gt;
&lt;li&gt;affects what agent behaves  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;agent function&lt;ul&gt;
&lt;li&gt;agent (function) = architecture + program&lt;/li&gt;
&lt;li&gt;in order to maximize the performance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Rationality&#34;&gt;&lt;a href=&#34;#Rationality&#34; class=&#34;headerlink&#34; title=&#34;Rationality&#34;&gt;&lt;/a&gt;Rationality&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Rationality is distinct from omniscience (all knowing with infinite knowledge，全知)&lt;/li&gt;
&lt;li&gt;Rationality is distinct from clairvoyant(know every information)&lt;ul&gt;
&lt;li&gt;Action outcomes may not be as expected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rationality is exploration, learning, autonomy(自治)&lt;ul&gt;
&lt;li&gt;perform actions to obtain useful information&lt;/li&gt;
&lt;li&gt;learn and adapt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;actions are determined by its own experience&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Task-Environment-PEAS&#34;&gt;&lt;a href=&#34;#Task-Environment-PEAS&#34; class=&#34;headerlink&#34; title=&#34;Task Environment: PEAS&#34;&gt;&lt;/a&gt;Task Environment: PEAS&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;High-Level Descriptions of AI Agents   &lt;ul&gt;
&lt;li&gt;Including &lt;strong&gt;Performance measure, Environment, Actuators, Sensors&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;specify the setting for intelligent agent design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ex. &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1GeTRRYU9sTmZjcw==&#34;&gt;CubeStormer3&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;, which is a rubik cube solver:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance measure: Time(= number of steps that agent uses), correctness&lt;/li&gt;
&lt;li&gt;Environment: different patterns of rubik cube&lt;/li&gt;
&lt;li&gt;Actuators: various robotic arms, smart phone screen&lt;/li&gt;
&lt;li&gt;Sensors: camera&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Environment-types&#34;&gt;&lt;a href=&#34;#Environment-types&#34; class=&#34;headerlink&#34; title=&#34;Environment types&#34;&gt;&lt;/a&gt;Environment types&lt;/h3&gt;&lt;p&gt;Fully observable (vs. partially observable): Sensors can access all environment at each point in time&lt;/p&gt;
&lt;p&gt;Deterministic (vs. stochastic): next environment is completely determined by the current state and agent’s action&lt;br&gt;If &lt;strong&gt;next environment is determined by actions of all agents&lt;/strong&gt;, it’s called strategic(戰略的)&lt;/p&gt;
&lt;p&gt;Episodic (vs. sequential): choice of action in each episode depends only on the episode itself&lt;br&gt;&lt;strong&gt;Sequential environments require memory&lt;/strong&gt; of past actions to determine the next best action. Episodic environments are a series of one-shot actions    &lt;/p&gt;
&lt;p&gt;Static (vs. dynamic): The environment is unchanged while agent is thinking&lt;br&gt;The environment is semi-dynamic if the environment itself does not change with the passage of time but the agent’s performance score does&lt;br&gt;Ex. Taxi driver: Dynamic, Image analysis: Semi&lt;/p&gt;
&lt;p&gt;Discrete (vs. continuous): A limited number of distinct, clearly defined perception area&lt;br&gt;Ex. Driving: continuous, chess games: discrete&lt;/p&gt;
&lt;p&gt;Single agent (vs. multi-agent): An agent operating by itself in an environment&lt;/p&gt;
&lt;p&gt;The real world is &lt;strong&gt;partially observable, stochastic, sequential, dynamic, continuous, multi-agent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/AI/2-1.png&#34; alt=&#34;chess and taxi environment&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Agent-types&#34;&gt;&lt;a href=&#34;#Agent-types&#34; class=&#34;headerlink&#34; title=&#34;Agent types&#34;&gt;&lt;/a&gt;Agent types&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Table-Lookup Agent(reflex agent)&lt;ul&gt;
&lt;li&gt;has many drawbacks&lt;/li&gt;
&lt;li&gt;huge table&lt;/li&gt;
&lt;li&gt;time-wasting to build the table&lt;/li&gt;
&lt;li&gt;no autonomy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Condition-Action Agent&lt;ul&gt;
&lt;li&gt;four types(generality from low to high)&lt;/li&gt;
&lt;li&gt;Simple reflex agents &lt;img data-src=&#34;/img/AI/2-2.png&#34; alt=&#34;&#34;&gt;&lt;ul&gt;
&lt;li&gt;Always Infinite Loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model-based reflex agents &lt;img data-src=&#34;/img/AI/2-3.png&#34; alt=&#34;&#34;&gt;&lt;ul&gt;
&lt;li&gt;Know how world evolves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Goal-based agents &lt;img data-src=&#34;/img/AI/2-4.png&#34; alt=&#34;&#34;&gt;&lt;ul&gt;
&lt;li&gt;use knowledge about goal to achieve it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Utility-based agents &lt;img data-src=&#34;/img/AI/2-5.png&#34; alt=&#34;&#34;&gt;&lt;ul&gt;
&lt;li&gt;utility: value of happiness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learning agents &lt;img data-src=&#34;/img/AI/2-6.png&#34; alt=&#34;&#34;&gt;&lt;ul&gt;
&lt;li&gt;learning element modifies performance element base on feedback of critic&lt;ul&gt;
&lt;li&gt;critic: how the agent is doing&lt;/li&gt;
&lt;li&gt;performance element select proper action&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Problem generator&lt;ul&gt;
&lt;li&gt;Tries to solve the problem differently instead of optimizing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example&lt;ul&gt;
&lt;li&gt;Knowledge Navigator (Apple, 1987)&lt;/li&gt;
&lt;li&gt;IBM Watson&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Chap03-Search&#34;&gt;&lt;a href=&#34;#Chap03-Search&#34; class=&#34;headerlink&#34; title=&#34;Chap03 Search&#34;&gt;&lt;/a&gt;Chap03 Search&lt;/h2&gt;&lt;p&gt;Search is a &lt;strong&gt;universal problem solving mechanism&lt;/strong&gt; that     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Systematically explores the alternatives&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finds the sequence of steps toward a solution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Search in a problem space&lt;/strong&gt; is claimed to be a &lt;strong&gt;completely general model of intelligence&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;problem space: area that needs to be examined to solve a problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the number of the leaf nodes in search tree when there is solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;state space: the set of values which a process can take&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the number of the legal positions in a game&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Problem-solving-agents&#34;&gt;&lt;a href=&#34;#Problem-solving-agents&#34; class=&#34;headerlink&#34; title=&#34;Problem-solving agents&#34;&gt;&lt;/a&gt;Problem-solving agents&lt;/h3&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* s is sequence of actions */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repeat &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	percept = observeWorld();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	state = updateState(state, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; s is empty then &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		goal = formulateGoal(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		prob = formulateProblem(state, goal);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		s = search(prob);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	action = first(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	s = remainder(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;until &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;/* i.e., forever */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Formulate goal → Formulate problem(state, action) → Find solution by search&lt;/p&gt;
&lt;h3 id=&#34;Problem-types&#34;&gt;&lt;a href=&#34;#Problem-types&#34; class=&#34;headerlink&#34; title=&#34;Problem types&#34;&gt;&lt;/a&gt;Problem types&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;single-state problem&lt;ul&gt;
&lt;li&gt;Deterministic, fully observable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sensorless problem&lt;ul&gt;
&lt;li&gt;Non-observable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;contingency(可能性) problem&lt;ul&gt;
&lt;li&gt;Nondeterministic and/or partially observable&lt;/li&gt;
&lt;li&gt;percepts provide new information about current state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;exploration problem&lt;ul&gt;
&lt;li&gt;Unknown state space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Problem-formulation&#34;&gt;&lt;a href=&#34;#Problem-formulation&#34; class=&#34;headerlink&#34; title=&#34;Problem formulation&#34;&gt;&lt;/a&gt;Problem formulation&lt;/h3&gt;&lt;p&gt;A problem is defined by four items     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;initial state&lt;/li&gt;
&lt;li&gt;actions or successor function&lt;/li&gt;
&lt;li&gt;goal test function&lt;/li&gt;
&lt;li&gt;path cost (optional)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A solution is a sequence of actions from initial state to  goal state&lt;/p&gt;
&lt;h3 id=&#34;Problem-Domains&#34;&gt;&lt;a href=&#34;#Problem-Domains&#34; class=&#34;headerlink&#34; title=&#34;Problem Domains&#34;&gt;&lt;/a&gt;Problem Domains&lt;/h3&gt;&lt;p&gt;Real-world problems   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Route-finding&lt;/li&gt;
&lt;li&gt;Touring: travelling&lt;ul&gt;
&lt;li&gt;salesperson problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VLSI layout&lt;/li&gt;
&lt;li&gt;Automatic assembly sequencing&lt;/li&gt;
&lt;li&gt;Scheduling &amp;amp; planning&lt;/li&gt;
&lt;li&gt;Protein design&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Implementation-States-vs-Nodes&#34;&gt;&lt;a href=&#34;#Implementation-States-vs-Nodes&#34; class=&#34;headerlink&#34; title=&#34;Implementation: States vs. Nodes&#34;&gt;&lt;/a&gt;Implementation: States vs. Nodes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A state is physical configuration(座標，位置，盤面)&lt;/li&gt;
&lt;li&gt;A node is a data structure constituting part of a search tree&lt;ul&gt;
&lt;li&gt;includes &lt;strong&gt;state&lt;/strong&gt;, parent node, action, path cost g(x), depth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Search-Property&#34;&gt;&lt;a href=&#34;#Search-Property&#34; class=&#34;headerlink&#34; title=&#34;Search Property&#34;&gt;&lt;/a&gt;Search Property&lt;/h3&gt;&lt;p&gt;Strategies are evaluated by  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;completeness: does it always find a solution if one exists?&lt;/li&gt;
&lt;li&gt;time complexity: number of nodes generated&lt;/li&gt;
&lt;li&gt;space complexity: maximum number of nodes in memory&lt;/li&gt;
&lt;li&gt;optimality: does it always find a least-cost solution?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Type-of-Search&#34;&gt;&lt;a href=&#34;#Type-of-Search&#34; class=&#34;headerlink&#34; title=&#34;Type of Search&#34;&gt;&lt;/a&gt;Type of Search&lt;/h3&gt;&lt;p&gt;可參考&lt;a href=&#34;/computer-gaming/&#34;&gt;電腦對局理論&lt;/a&gt;，兩者的complexity算法不同&lt;/p&gt;
&lt;h4 id=&#34;Uninformed-search-blind-search&#34;&gt;&lt;a href=&#34;#Uninformed-search-blind-search&#34; class=&#34;headerlink&#34; title=&#34;Uninformed search (blind search)&#34;&gt;&lt;/a&gt;Uninformed search (blind search)&lt;/h4&gt;&lt;p&gt;use only the information available in the problem definition&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/AI/3-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Breadth-first search&lt;ul&gt;
&lt;li&gt;Expand shallowest unexpanded node&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fringe&lt;/strong&gt; is a queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Uniform-cost search&lt;ul&gt;
&lt;li&gt;used when “cost != depth”&lt;/li&gt;
&lt;li&gt;Expand least cost(g(n), cost from start to this node) unexpanded node&lt;/li&gt;
&lt;li&gt;Time Complexity: # of nodes with g ≤ cost of optimal solution&lt;ul&gt;
&lt;li&gt;$O(b^{ceiling(\frac{C*}{ε})})$&lt;/li&gt;
&lt;li&gt;C* is the cost of the optimal solution&lt;/li&gt;
&lt;li&gt;ε is small constant&lt;/li&gt;
&lt;li&gt;How does it compare with $b^d$?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Depth-first search&lt;ul&gt;
&lt;li&gt;Expand deepest unexpanded node&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;frontier&lt;/strong&gt; is a stack&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;not complete&lt;/strong&gt; when there are loops or there are infinite nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Depth-limited search&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Preferred uninformed search method&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Iterative deepening search&lt;ul&gt;
&lt;li&gt;uses only linear space&lt;/li&gt;
&lt;li&gt;take a little more time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Graph-Search&#34;&gt;&lt;a href=&#34;#Graph-Search&#34; class=&#34;headerlink&#34; title=&#34;Graph Search&#34;&gt;&lt;/a&gt;Graph Search&lt;/h4&gt;&lt;p&gt;Graph Search vs. Tree Search  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graph Search always need to record closed list to prevent loop&lt;/li&gt;
&lt;li&gt;Dijkstra’s Shortest Path Algorithm&lt;ul&gt;
&lt;li&gt;find the shortest path between each pair of nodes&lt;/li&gt;
&lt;li&gt;Order nodes in priority queue to &lt;strong&gt;minimize actual distance from the start&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Generalizes BFS that edges can have different lengths/weights&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Chap03b-Informed-Search&#34;&gt;&lt;a href=&#34;#Chap03b-Informed-Search&#34; class=&#34;headerlink&#34; title=&#34;Chap03b Informed Search&#34;&gt;&lt;/a&gt;Chap03b Informed Search&lt;/h2&gt;&lt;p&gt;Best-First Search  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use evaluation function f(n) for each node&lt;/li&gt;
&lt;li&gt;Expand &lt;strong&gt;most desirable&lt;/strong&gt;(lowest cost in total) unexpanded node&lt;/li&gt;
&lt;li&gt;Order nodes in priority queue to &lt;strong&gt;minimize estimated distance to the goal = h(n)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Special cases&lt;ul&gt;
&lt;li&gt;greedy best-first search&lt;ul&gt;
&lt;li&gt;expands the node that &lt;strong&gt;appears to be closest to goal&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A* search&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Property&lt;ul&gt;
&lt;li&gt;Complete? No – can get stuck in loops&lt;/li&gt;
&lt;li&gt;Time? O(bm), but a &lt;strong&gt;good heuristic can give a lot of improvement&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Space? O(bm) – keeps all nodes in memory&lt;/li&gt;
&lt;li&gt;Optimal? No&lt;/li&gt;
&lt;li&gt;visits far fewer nodes, but may not provide optimal solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A* Search  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;avoid expanding paths that are already expensive&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Evaluation function f(n) = g(n) + h(n)&lt;ul&gt;
&lt;li&gt;f(n) = estimated total cost of path through n to goal&lt;/li&gt;
&lt;li&gt;g(n) = cost so far to reach n&lt;/li&gt;
&lt;li&gt;h(n) = estimated cost from n to goal&lt;/li&gt;
&lt;li&gt;expands nodes &lt;strong&gt;in order of increasing f value&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theorem: If h(n) is admissible, A* using TREESEARCH is optimal&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;proof : &lt;img data-src=&#34;/img/AI/3-3.png&#34; alt=&#34;PROOF1&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/3-4.png&#34; alt=&#34;PROOF2&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theorem: The search space of A* grows exponentially unless the error in the heuristic function(real cost from n to goal - h(n)) grows no faster than the logarithm of the actual path cost&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Property&lt;ul&gt;
&lt;li&gt;Complete? Yes (unless there are infinitely many nodes with f ≤ f(G) )&lt;/li&gt;
&lt;li&gt;Time? Exponential&lt;/li&gt;
&lt;li&gt;Space? Keeps all nodes in memory&lt;/li&gt;
&lt;li&gt;Optimal? Yes&lt;/li&gt;
&lt;li&gt;Efficient? A* is &lt;strong&gt;optimally efficient&lt;/strong&gt; for any heuristic function&lt;ul&gt;
&lt;li&gt;no other optimal algorithm is guaranteed to expand fewer nodes than A*&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Iterative deepening A*(IDAstar)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cutoff by f-cost&lt;ul&gt;
&lt;li&gt;upper bound of f(n)&lt;/li&gt;
&lt;li&gt;If don’t find solution&lt;ul&gt;
&lt;li&gt;Increase the bound to&lt;/li&gt;
&lt;li&gt;the minimum of the f-values that exceeded the previous bound&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;?? Not suitable for real-valued costs&lt;/li&gt;
&lt;li&gt;Advantage: Linear space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recursive best-first search(RBFS)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;only keep track of total cost of the best alternative path&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;if best node exceeds alternative f(n)&lt;ul&gt;
&lt;li&gt;unwinds back to the alternative path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Back up value of dropped node to its parent&lt;ul&gt;
&lt;li&gt;if all other paths are worse than it, we should use it again&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage: Linear space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;disadvantage of IDA* and RBFS  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not good for graphs&lt;ul&gt;
&lt;li&gt;can’t check for repeated states other than those on current path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use too little memory&lt;ul&gt;
&lt;li&gt;can’t use full memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simplified Memory-bounded A*(SMA star)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Expand&lt;/strong&gt; the best &lt;strong&gt;leaf until memory is full&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;When memory full&lt;ul&gt;
&lt;li&gt;Drop the worst(highest f-value) leaf node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Back up value of dropped node to its parent&lt;/li&gt;
&lt;li&gt;Property&lt;ul&gt;
&lt;li&gt;use full of the memory usage&lt;/li&gt;
&lt;li&gt;complete when meory is enough to store the shallowest solution&lt;/li&gt;
&lt;li&gt;optimal when meory is enough to store the shallowest optimal solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A heuristic is &lt;strong&gt;consistent&lt;/strong&gt; if for every node n, f(n) is non-decreasing along all paths&lt;br&gt;&lt;strong&gt;Theorem: If h(n) is consistent, A* using GRAPHSEARCH is optimal&lt;/strong&gt;&lt;br&gt;(every consistent function is admissible)&lt;/p&gt;
&lt;h3 id=&#34;Inventing-Better-Heuristic-Functions&#34;&gt;&lt;a href=&#34;#Inventing-Better-Heuristic-Functions&#34; class=&#34;headerlink&#34; title=&#34;Inventing Better Heuristic Functions&#34;&gt;&lt;/a&gt;Inventing Better Heuristic Functions&lt;/h3&gt;&lt;p&gt;quality of heuristic: effective branching factor b*&lt;br&gt;If h2(n) ≥ h1(n) for all n (both admissible), then &lt;strong&gt;h2 dominates h1(far better than)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Relaxed problems&lt;ul&gt;
&lt;li&gt;problem with fewer restrictions&lt;ul&gt;
&lt;li&gt;admissible and consistent&lt;ul&gt;
&lt;li&gt;exact cost of problem → consistent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Original: move any tile to adjacent empty squares&lt;ul&gt;
&lt;li&gt;Relaxed: Move from A to B, if A is adjacent to B → Manhattan distance&lt;/li&gt;
&lt;li&gt;Relaxed: Move from A to B, if B is empty → Gaschnig’s heuristic (1979)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composite heuristics&lt;ul&gt;
&lt;li&gt;h(n) = max (h1(n),…,hm(n))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weighted evaluation function&lt;ul&gt;
&lt;li&gt;fw(n) = (1-w)g(n) + w h(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linear combination of features&lt;ul&gt;
&lt;li&gt;h(n) = c1x1(n) + … + ckxk(n)&lt;/li&gt;
&lt;li&gt;no assure admissible or consistent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Statistical information&lt;/li&gt;
&lt;li&gt;Search cost&lt;ul&gt;
&lt;li&gt;Good heuristic function should be computed efficiently&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sub-Problems&lt;ul&gt;
&lt;li&gt;solution cost of a sub-problem of a given problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example&lt;ul&gt;
&lt;li&gt;Linear Conflict Heuristic&lt;ul&gt;
&lt;li&gt;Given two tiles in their goal row, but reversed in position, additional vertical moves can be added to Manhattan distance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://gitqwerty777.github.io/%E9%9B%BB%E8%85%A6%E5%B0%8D%E5%B1%80%E7%90%86%E8%AB%96/#disjoint-pattern&#34;&gt;Adding Pattern Database Heuristics&lt;/a&gt;      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pattern database&lt;ul&gt;
&lt;li&gt;store exact solution costs of subproblems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to make sure heuristic function can add with admissible? → do not affect each other &lt;img data-src=&#34;/img/AI/3-add.png&#34; alt=&#34;7,8&#34;&gt;&lt;ul&gt;
&lt;li&gt;disjoint pattern database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The 7-tile database contains 58 million entries&lt;ul&gt;
&lt;li&gt;20 moves needed to solve red tiles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The 8-tile database contains 519 million entries&lt;ul&gt;
&lt;li&gt;25 moves needed to solve blue tiles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Overall heuristic is 20+25=45 moves&lt;/li&gt;
&lt;li&gt;On 15 puzzle, IDA* with pattern database heuristics is about &lt;strong&gt;10 times faster than with Manhattan distance&lt;/strong&gt;(Culberson and Schaeffer, 1996)&lt;/li&gt;
&lt;li&gt;can also be applied to Rubik’s Cube&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Summary-all-informed-algorithms&#34;&gt;&lt;a href=&#34;#Summary-all-informed-algorithms&#34; class=&#34;headerlink&#34; title=&#34;Summary: all informed algorithms&#34;&gt;&lt;/a&gt;Summary: all informed algorithms&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/img/AI/3-ex.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Chap04-Beyond-Classical-Search&#34;&gt;&lt;a href=&#34;#Chap04-Beyond-Classical-Search&#34; class=&#34;headerlink&#34; title=&#34;Chap04 Beyond Classical Search&#34;&gt;&lt;/a&gt;Chap04 Beyond Classical Search&lt;/h2&gt;&lt;h3 id=&#34;Local-Search-Algorithms&#34;&gt;&lt;a href=&#34;#Local-Search-Algorithms&#34; class=&#34;headerlink&#34; title=&#34;Local Search Algorithms&#34;&gt;&lt;/a&gt;Local Search Algorithms&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Used when the path to the goal does not matter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;State space: the set of all &lt;strong&gt;states reachable from initial state&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;local search algorithms    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iterative improvement&lt;ul&gt;
&lt;li&gt;keep a single “current” state and try to improve it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;advantage&lt;ul&gt;
&lt;li&gt;use constant space&lt;/li&gt;
&lt;li&gt;useful to solve optimization problems(最佳化問題)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traveling Salesperson Problem  &lt;ul&gt;
&lt;li&gt;use 1% additional cost than optimal solution&lt;/li&gt;
&lt;li&gt;solved very quickly with thousands of cities  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N-queen problem&lt;ul&gt;
&lt;li&gt;can solve N = 1000000 quickly &lt;img data-src=&#34;/img/AI/4-1.png&#34; alt=&#34;nqueen&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Widely used in VLSI layout, airline scheduling, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Three algorithms  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hill climbing&lt;/li&gt;
&lt;li&gt;simulated annealing&lt;/li&gt;
&lt;li&gt;genetic algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Hill-climbing-爬山&#34;&gt;&lt;a href=&#34;#Hill-climbing-爬山&#34; class=&#34;headerlink&#34; title=&#34;Hill climbing(爬山)&#34;&gt;&lt;/a&gt;Hill climbing(爬山)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;greedy local search&lt;ul&gt;
&lt;li&gt;grab the best neighbor as successor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若所有鄰居的值都比現值小，則認為現值是最大值 &lt;img data-src=&#34;/img/AI/4-hc.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;可能會走到Local maxima &lt;img data-src=&#34;/img/AI/4-2.png&#34; alt=&#34;&#34;&gt;   &lt;/li&gt;
&lt;li&gt;走到平地的時候&lt;ul&gt;
&lt;li&gt;限制走平地的步數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;變形  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stochastic hill-climbing&lt;ul&gt;
&lt;li&gt;choose uphill moves by 斜度 as probability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;First-Choice hill-climbing&lt;ul&gt;
&lt;li&gt;generating successor until it is better than parent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Random-restart hill-climbing&lt;ul&gt;
&lt;li&gt;random generate initial state until goal is found&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Simulated-annealing&#34;&gt;&lt;a href=&#34;#Simulated-annealing&#34; class=&#34;headerlink&#34; title=&#34;Simulated annealing&#34;&gt;&lt;/a&gt;Simulated annealing&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;escape local maxima&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;allowing some “bad” moves&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;gradually decrease their frequency &amp;amp; size &lt;img data-src=&#34;/img/AI/4-sa.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;this probability reach Boltzman distribution&lt;ul&gt;
&lt;li&gt;If T decreases slowly enough, then simulated annealing search will find a &lt;strong&gt;global optimum&lt;/strong&gt; with probability approaching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Local-Beam-Search&#34;&gt;&lt;a href=&#34;#Local-Beam-Search&#34; class=&#34;headerlink&#34; title=&#34;Local Beam Search&#34;&gt;&lt;/a&gt;Local Beam Search&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Keep track of &lt;strong&gt;(top) k states&lt;/strong&gt; rather than just one&lt;/li&gt;
&lt;li&gt;useful information is passed among all parallel search threads&lt;/li&gt;
&lt;li&gt;Problem: all k states possibly end up on same local hill&lt;ul&gt;
&lt;li&gt;Stochastic Local Beam Search&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;choose k successors randomly, biased towards good ones(successor that has better score has more probability to be choosed)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Genetic-algorithms&#34;&gt;&lt;a href=&#34;#Genetic-algorithms&#34; class=&#34;headerlink&#34; title=&#34;Genetic algorithms&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5tZS5zanUuZWR1LnR3L2ppbXJvbmcvRnV6enlDb250cm9sL0IxLyVFNyVBQyVBQzklRTUlOTYlQUUlRTUlODUlODMlMjAlRTUlOUYlQkElRTUlOUIlQTAlRTYlQkMlOTQlRTclQUUlOTclRTYlQjMlOTUlRTclQjAlQTElRTQlQkIlOEIucGRm&#34;&gt;Genetic algorithms&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Stochastic local beam search + generate successors from pairs&lt;/li&gt;
&lt;li&gt;Population&lt;ul&gt;
&lt;li&gt;Start with k randomly individuals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Individual(state)&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;represented as a string&lt;/strong&gt; by finite symbols (often a string of 0s and 1s)&lt;/li&gt;
&lt;li&gt;substring must be meaningful&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fitness function: evaluation of the “goodness” of a given state&lt;ul&gt;
&lt;li&gt;N-queen: number of non-attacking queens pairs (min = 0, max = 8 × 7 / 2 = 28)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Produce successors&lt;ul&gt;
&lt;li&gt;selection, crossover(交配, combine two parents), and mutation(突變)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Schema&lt;ul&gt;
&lt;li&gt;8-Queen: 2468xxxx → 24681357, 24681753 …&lt;/li&gt;
&lt;li&gt;if average fitness value of schema is better than mean, instances of schema will grow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/4-ga.png&#34; alt=&#34;&#34;&gt;   &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Local-search-in-continuous-spaces&#34;&gt;&lt;a href=&#34;#Local-search-in-continuous-spaces&#34; class=&#34;headerlink&#34; title=&#34;Local search in continuous spaces&#34;&gt;&lt;/a&gt;Local search in continuous spaces&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Most of real-world environments are continuous&lt;/li&gt;
&lt;li&gt;Example: Airport Site Planning      &lt;ul&gt;
&lt;li&gt;6-D state space (x1,y1),(x2,y2),(x3,y3)&lt;/li&gt;
&lt;li&gt;Objective function f(x1,y1,x2,y2,x3,y3) = sum of squared distances from each city to its nearest airport&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Successor function would return infinitely many states    &lt;ul&gt;
&lt;li&gt;Solution&lt;ul&gt;
&lt;li&gt;Discretization(離散化)&lt;/li&gt;
&lt;li&gt;Gradient of the objective function &lt;img data-src=&#34;/img/AI/4-gra.png&#34; alt=&#34;gradient&#34;&gt;&lt;ul&gt;
&lt;li&gt;Empirical(經驗主義) gradient&lt;ul&gt;
&lt;li&gt;take a little change in each coordinate to fit discretization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Line search&lt;ul&gt;
&lt;li&gt;repeatly double the size of updating until the value descrease(下坡)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3poLndpa2lwZWRpYS5vcmcvd2lraS8lRTclODklOUIlRTklQTElQkYlRTYlQjMlOTU=&#34;&gt;Newton-Raphson method&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;solve ∇f(x) = 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Searching-with-nondeterministic-actions&#34;&gt;&lt;a href=&#34;#Searching-with-nondeterministic-actions&#34; class=&#34;headerlink&#34; title=&#34;Searching with nondeterministic actions&#34;&gt;&lt;/a&gt;Searching with nondeterministic actions&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;solution is not sequence, but a contingency plan(strategy)&lt;/li&gt;
&lt;li&gt;Unreliable Vacuum World&lt;ul&gt;
&lt;li&gt;sometimes can not action will fail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solutions(nested if-then-else statements)&lt;ul&gt;
&lt;li&gt;AND-OR Search Tree &lt;img data-src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Andortree.png/796px-Andortree.png&#34; alt=&#34;&#34;&gt;&lt;ul&gt;
&lt;li&gt;P if ((Q&amp;amp;R) | S)&lt;/li&gt;
&lt;li&gt;Q if (T | U)&lt;/li&gt;
&lt;li&gt;and → environment’s choice(fail or not)&lt;/li&gt;
&lt;li&gt;or → your own choice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;returns a set of possible outcome states&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ex. Slippery Vacuum World&lt;ul&gt;
&lt;li&gt;Movement actions sometimes fail&lt;/li&gt;
&lt;li&gt;use cyclic plans &lt;img data-src=&#34;/img/AI/4-andor.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Searching-with-partial-observations&#34;&gt;&lt;a href=&#34;#Searching-with-partial-observations&#34; class=&#34;headerlink&#34; title=&#34;Searching with partial observations&#34;&gt;&lt;/a&gt;Searching with partial observations&lt;/h3&gt;&lt;p&gt;Slippery Vacuum World without global sensor   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;don’t know where it is&lt;/li&gt;
&lt;li&gt;use Belief-State Space (possible physical states) &lt;img data-src=&#34;/img/AI/4-bss.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;$O(N)$ → $O(2^N)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Incremental Belief-State Search  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find a solution that works for state 1&lt;/li&gt;
&lt;li&gt;check if it works for another state&lt;ul&gt;
&lt;li&gt;If not, go back and find an alternative solution for state 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;similar to AND-OR search&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Online-Search&#34;&gt;&lt;a href=&#34;#Online-Search&#34; class=&#34;headerlink&#34; title=&#34;Online Search&#34;&gt;&lt;/a&gt;Online Search&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;combine computation and action&lt;/li&gt;
&lt;li&gt;Works good in&lt;ul&gt;
&lt;li&gt;Dynamic or semi-dynamic domains&lt;/li&gt;
&lt;li&gt;Stochastic domains&lt;/li&gt;
&lt;li&gt;Exploration problem in unknown environments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;impossible to take into account all possible contingencies(可能性，意外)&lt;/li&gt;
&lt;li&gt;The agent maintains a map of the environment    &lt;ul&gt;
&lt;li&gt;Updated based on percept input&lt;/li&gt;
&lt;li&gt;use map to decide next action&lt;/li&gt;
&lt;li&gt;difference with e.g. A*&lt;ul&gt;
&lt;li&gt;online search can only expand the node it is in local map&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example: Maze   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reach a goal with minimal cost&lt;/li&gt;
&lt;li&gt;Competitive ratio&lt;ul&gt;
&lt;li&gt;compare the cost of the solution path if search space is known&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can be infinite&lt;ul&gt;
&lt;li&gt;agent accidentally reaches dead ends&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Assume Safely explorable&lt;ul&gt;
&lt;li&gt;some goal state is reachable from every reachable state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No algorithm can avoid dead ends in all state spaces &lt;img data-src=&#34;/img/AI/4-adversary.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Online DFS &lt;img data-src=&#34;/img/AI/4-online-dfs.png&#34; alt=&#34;&#34;&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Untried: action not yet tried&lt;/li&gt;
&lt;li&gt;Unbacktracked: state not yet backtracked(尚未走回去過的state)  &lt;/li&gt;
&lt;li&gt;Worst case each node is visited twice&lt;ul&gt;
&lt;li&gt;online iterative deepening approach solves this problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Online Local Search  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hill-climbing is already online&lt;ul&gt;
&lt;li&gt;only store one state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bad performance due to local maxima&lt;ul&gt;
&lt;li&gt;can not random restart in online version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution&lt;ul&gt;
&lt;li&gt;Random walk introduces exploration&lt;ul&gt;
&lt;li&gt;time complexity is exponential&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learning real-time A* (LRTA*) &lt;img data-src=&#34;/img/AI/4-lrta-star.png&#34; alt=&#34;&#34;&gt;&lt;ul&gt;
&lt;li&gt;Add memory to hill climbing&lt;/li&gt;
&lt;li&gt;Store current best estimate H(s) of cost to reach goal&lt;/li&gt;
&lt;li&gt;H(s) is initially = h(s), the least possible cost&lt;ul&gt;
&lt;li&gt;updated with experience &lt;img data-src=&#34;/img/AI/4-online-heu.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;O(n^2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Chap05-Adversarial-Search-game&#34;&gt;&lt;a href=&#34;#Chap05-Adversarial-Search-game&#34; class=&#34;headerlink&#34; title=&#34;Chap05 Adversarial Search(game)&#34;&gt;&lt;/a&gt;Chap05 Adversarial Search(game)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;In 1948, Turing met Donald Michie and competed with him in writing a simple chess-­playing algorithm&lt;/li&gt;
&lt;li&gt;The Historical Match in 1997&lt;ul&gt;
&lt;li&gt;Kasparov vs. Deep Blue     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Games are idealization of worlds&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;the world state is fully accessible&lt;/li&gt;
&lt;li&gt;the (small number of) actions are well­‐defined&lt;/li&gt;
&lt;li&gt;uncertainty exists due to moves of the opponent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimax &lt;img data-src=&#34;/img/AI/5-minimax.png&#34; alt=&#34;MiniMax&#34;&gt;&lt;/li&gt;
&lt;li&gt;MaxMax(negamax)&lt;ul&gt;
&lt;li&gt;Advantage of over MiniMax   &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistent view&lt;/strong&gt;: maximize scores&lt;/li&gt;
&lt;li&gt;Subroutine &lt;strong&gt;Min is not required&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Implementation of Pruning   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pass the current best score to child nodes&lt;/li&gt;
&lt;li&gt;Stop searching and return when a branch exceeds the score from the parent&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alpha-Beta search &lt;img data-src=&#34;/img/AI/5-ab.png&#34; alt=&#34;&#34;&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only use about $O(b^(d/2))$ time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Improvement of A-B search&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search good move first&lt;ul&gt;
&lt;li&gt;Heuristic move ordering&lt;ul&gt;
&lt;li&gt;Checkmate&lt;/li&gt;
&lt;li&gt;Killer&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The move that results in beta pruning earlier&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iterative deepening&lt;ul&gt;
&lt;li&gt;good moves in the search depth = N are usually good in depth = N+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Principle variation search&lt;ul&gt;
&lt;li&gt;NegaScout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Zero‐window search&lt;ul&gt;
&lt;li&gt;expect returned value = -3 with beta pruning&lt;/li&gt;
&lt;li&gt;if return -4, real value is between [4, ∞], search again&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reuse scores for duplicate nodes&lt;ul&gt;
&lt;li&gt;Transposition table&lt;ul&gt;
&lt;li&gt;save board layout and score in hash table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Risky estimation of best score&lt;ul&gt;
&lt;li&gt;Null-move search&lt;ul&gt;
&lt;li&gt;give up a move once&lt;/li&gt;
&lt;li&gt;returned score serves as an estimate value for pruning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extend the depth for some leaf nodes&lt;ul&gt;
&lt;li&gt;Score may not be acccurate if the board situation is not quiescent(靜止，即交換棋子的過程告一段落)   &lt;ul&gt;
&lt;li&gt;A series of recapture moves&lt;/li&gt;
&lt;li&gt;Checkmates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Horizon Effect&lt;ul&gt;
&lt;li&gt;threat will be happened in the &lt;strong&gt;deep&lt;/strong&gt; depth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Singular Extension&lt;ul&gt;
&lt;li&gt;give more depth to some nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;prune without further consideration&lt;ul&gt;
&lt;li&gt;Forward Pruning&lt;/li&gt;
&lt;li&gt;Probabilistic Cut&lt;ul&gt;
&lt;li&gt;pruning nodes which are merely possible to be good move&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;End Game&lt;ul&gt;
&lt;li&gt;retrograde(倒推)&lt;ul&gt;
&lt;li&gt;reverse the rules to chess to do unmoves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stochastic game  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chance Layer added to search tree&lt;ul&gt;
&lt;li&gt;possible states after stochastic action&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;expect value&lt;ul&gt;
&lt;li&gt;sum all values in chance layer with probability&lt;/li&gt;
&lt;li&gt;$(4 \times 0.5 + 6 \times 0.5) \div 2 = 5$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bridge  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inperfect information&lt;ul&gt;
&lt;li&gt;belief state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIB program&lt;ul&gt;
&lt;li&gt;monte-carlo(handle randomness well)&lt;/li&gt;
&lt;li&gt;explaination-based generalization&lt;ul&gt;
&lt;li&gt;only consider high-card or low-card&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;evaluation function has error  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;error is not independent(probably all children)&lt;/li&gt;
&lt;li&gt;consider mean and variance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Time-limited search  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if utility of node expansion is not higher than their cost(time), do not expand&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Chap06-Constraint-Satisfaction-Problems-CSP&#34;&gt;&lt;a href=&#34;#Chap06-Constraint-Satisfaction-Problems-CSP&#34; class=&#34;headerlink&#34; title=&#34;Chap06 Constraint Satisfaction Problems(CSP)&#34;&gt;&lt;/a&gt;Chap06 Constraint Satisfaction Problems(CSP)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;specialization of general search&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;state is defined by &lt;strong&gt;variables&lt;/strong&gt; with values from &lt;strong&gt;domain&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Example: Map-Coloring&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variables = set of regions&lt;/li&gt;
&lt;li&gt;Domains = {red,green,blue}&lt;/li&gt;
&lt;li&gt;Constraints: adjacent regions must have different colors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solutions are &lt;strong&gt;complete and consistent&lt;/strong&gt; assignments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consistent: assignment that does not violate any constraint&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Binary CSP: each constraint relates only two variables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constraint graph: vertexs are variables, edges are constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSP types    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discrete variables&lt;ul&gt;
&lt;li&gt;finite domains&lt;ul&gt;
&lt;li&gt;n variables, domain size d → $O(d^n)$ complete assignments&lt;/li&gt;
&lt;li&gt;Ex. Boolean CSPs(NP-complete)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;infinite domains(integers, strings, …)&lt;ul&gt;
&lt;li&gt;use constraint language, e.g., x1 + 5 ≤ x3&lt;/li&gt;
&lt;li&gt;Ex. job scheduling, variables are start/end days for each job&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Continuous variables&lt;ul&gt;
&lt;li&gt;linear constraints solvable in polynomial time by &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUJBJUJGJUU2JTgwJUE3JUU4JUE3JTg0JUU1JTg4JTky&#34;&gt;linear programming&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;Ex. quadratic programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ex. start/end times for observations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No algorithm exist for solving general nonliear constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;constraint types  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unary constraints involve a single variable&lt;ul&gt;
&lt;li&gt;SA ≠ red&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binary constraints involve pairs of variables,&lt;ul&gt;
&lt;li&gt;SA ≠ WA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3 or more variables&lt;ul&gt;
&lt;li&gt;cryptarithmetic(覆面算，用英文字母來取代0至9的數字) column constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Preferences (soft constraints)&lt;ul&gt;
&lt;li&gt;green is better than red&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Real-World CSPs  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assignment problems&lt;ul&gt;
&lt;li&gt;who teaches what class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timetabling problems&lt;ul&gt;
&lt;li&gt;which class is offered when and where&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transportation scheduling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Standard Search Formulation (Incrementally)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Every solution will be found in depth n → prefer to use depth-first search&lt;/li&gt;
&lt;li&gt;Path is irrelevant, so can also use complete-state formulation of local search&lt;/li&gt;
&lt;li&gt;b = (n-l)d at depth = l, hence $n! \times dn$ leaves&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Backtracking-Search&#34;&gt;&lt;a href=&#34;#Backtracking-Search&#34; class=&#34;headerlink&#34; title=&#34;Backtracking Search&#34;&gt;&lt;/a&gt;Backtracking Search&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;depth-first search&lt;/strong&gt; for CSPs with &lt;strong&gt;assigning one variable per action&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;basic uninformed algorithm for CSP&lt;/li&gt;
&lt;li&gt;by wiki: 回溯法採用試錯的思想，它嘗試分步的去解決一個問題。在分步解決問題的過程中，當它通過嘗試發現現有的分步答案不能得到有效的正確的解答的時候，它將取消上一步甚至是上幾步的計算，再通過其它的可能的分步解答再次嘗試尋找問題的答案 &lt;img data-src=&#34;/img/AI/4-bt.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;Can solve n-queens for n ≈ 25&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Improve Backtracking  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General-purpose methods can give huge gains in speed&lt;ul&gt;
&lt;li&gt;variable assignment order&lt;ul&gt;
&lt;li&gt;Most constrained variable(minimum remaining values (MRV) heuristic)&lt;ul&gt;
&lt;li&gt;choose the variable with the &lt;strong&gt;fewest legal values&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Most constraining variable(degree heuristic)&lt;ul&gt;
&lt;li&gt;choose the variable with &lt;strong&gt;the most constraints&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;value assignment order&lt;ul&gt;
&lt;li&gt;Least Constraining Value&lt;ul&gt;
&lt;li&gt;choose the value that &lt;strong&gt;make the fewest values be deleted in the remaining variables&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;give the most flexibility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;detect inevitable failure early  &lt;ul&gt;
&lt;li&gt;Forward Checking  &lt;ul&gt;
&lt;li&gt;Keep track of &lt;strong&gt;legal values for unassigned variables&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Terminate search when any variable has no legal value&lt;/li&gt;
&lt;li&gt;Only consider arc-consistency&lt;ul&gt;
&lt;li&gt;the graph already has arc-consistency need not do this&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maintain Arc consistency (MAC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Combining these heuristics can solve n-queens for n ≈ 1000&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Intelligent Backtracking  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chronological Backtracking&lt;ul&gt;
&lt;li&gt;when the search fails, back up to the preceding &lt;strong&gt;decision point(多選題)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;the most recent decision point is revisited&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;equals to DFS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Backjumping&lt;ul&gt;
&lt;li&gt;backtracks to the most recent variable in the &lt;strong&gt;conflict set(variables that caused the failure)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Constraint Propagation(傳播限制)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;early detection for all failures&lt;/li&gt;
&lt;li&gt;local consistency(graph)&lt;ul&gt;
&lt;li&gt;variable: node, binary constraint: arc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;transform all n-ary constraints to binary one&lt;/li&gt;
&lt;li&gt;Node consistency(1-consistency)&lt;ul&gt;
&lt;li&gt;all values in domain satisfy unary constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arc consistency(2-consistency)&lt;ul&gt;
&lt;li&gt;all values in domain satisfy binary constraints&lt;/li&gt;
&lt;li&gt;Algorithm: AC3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Path consistency&lt;ul&gt;
&lt;li&gt;若xi, xj的domain，可以使第三個variable xk的domain滿足{xi, xk}和{xj, xk}的consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If variable X loses a value, &lt;strong&gt;neighbors of X&lt;/strong&gt; need to be rechecked (detect inconsistency)&lt;ul&gt;
&lt;li&gt;Ex. Arc Consistency&lt;/li&gt;
&lt;li&gt;REMOVE-INCONSISTENT-VALUE: 如果Xi的Domain中，有無法達成 Xi↔Xj 這個條件的值，則刪除　&lt;img data-src=&#34;/img/AI/6-arc.png&#34; alt=&#34;arc algo&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;k-Consistency  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for any set of k-1 variables and for any consistent assignment to those variables, a consistent value can always be assigned to the k-th variable&lt;/li&gt;
&lt;li&gt;只要有任何k-1個確定值的變數，必有一確定值可以放在第k個變數&lt;/li&gt;
&lt;li&gt;A graph is &lt;strong&gt;strongly k-consistent&lt;/strong&gt; if it is k-consistent and is also (k-1)-consistent, (k-2)-consistent, … 1-consistent&lt;ul&gt;
&lt;li&gt;guarantee to find solution in O(n^2d)&lt;/li&gt;
&lt;li&gt;but establishing strongly k-consistent graph take exponential time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;commonly use 2 or 3 consistency in pratice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Subproblem  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;suppose each subproblem has c variables, total n variables&lt;/li&gt;
&lt;li&gt;worst-case cost: $\frac{n}{c}\times d^{c}$&lt;/li&gt;
&lt;li&gt;cost is far better&lt;ul&gt;
&lt;li&gt;n = 80, d = 2, c =20 → $2^80$ → $4 \times 2^{20}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Local Search for CSPs   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allow unsatisfied states&lt;/li&gt;
&lt;li&gt;value selection by min-conflicts heuristic&lt;ul&gt;
&lt;li&gt;h(n) = total number of violated constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evaluation function of N-queen  &lt;ul&gt;
&lt;li&gt;h = number of pairs of queens that are attacking each other&lt;/li&gt;
&lt;li&gt;can solve n-queens for n ≈ 10000000 (O(n) = constant) with high probability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;variant&lt;ul&gt;
&lt;li&gt;allow variable move to the same score&lt;/li&gt;
&lt;li&gt;prevent to select recently choosed variables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Critial Ratio of local search for CSP   &lt;ul&gt;
&lt;li&gt;In certain ratio, it’s hard to solve CSP by local search &lt;img data-src=&#34;/img/AI/6-ratio.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;剛剛好的限制條件(答案數過少)→數獨題目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage&lt;ul&gt;
&lt;li&gt;can easily change into online setting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- Waltz Labeling Algorithm    
- used for Edge Labeling ![](/img/AI/6-waltz.png)
- 4 ways to label a line, 16 labelings for two line intersects like 「L」 , 64 labelings for two line intersects like 「fork, arrow, or T」
- there are some rules to make the labels possible

Edge Labeling as CSP  
- variable: vertexs
- domain: label set of the corresponding junction
- constraint: rules of label relationship

Waltz’s Algorithm  
1. Label each vertex with all possible labelings
2. Pick a vertex V, for each neighboring vertex, N:  
    1. If N and V agree on the label for the line between them, do nothing ; Otherwise, remove the inconsistent labelings
    2. Propagate the constraint by repeating the process for all neighboring vertices
3. Termination condition:
    1. Every vertex has been visited at least once
    2. There are no more constraints to propagate
--&gt;

&lt;p&gt;Theorem of Tree-Structed CSP      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if the constraint graph has no loops, CSP can be solve in $O(nd^2)$ time, which is far better than general CSP($O(d^n)$)&lt;ol&gt;
&lt;li&gt;make problem arc-consistent O(n)&lt;/li&gt;
&lt;li&gt;assign value O(d^2)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Algorithm&lt;ol&gt;
&lt;li&gt;transform problem to a tree&lt;/li&gt;
&lt;li&gt;for i = n to 2, do REMOVE-INCONSISTENT-VALUE(Parent(Xi), Xi)&lt;/li&gt;
&lt;li&gt;for i = 1 to n, assign Xi consistently&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Graph reduced to tree  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constraint graph&lt;ul&gt;
&lt;li&gt;given fixed value for some of the nodes to make remaining a tree&lt;/li&gt;
&lt;li&gt;if small cut is found, it is efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tree decomposition&lt;ul&gt;
&lt;li&gt;把一部分的圖形變成一個大的node，把這些大的node合成一顆樹&lt;/li&gt;
&lt;li&gt;規則&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;若兩個variables本來有相連，他們必須出現在同一個subgraph至少一次&lt;/li&gt;
&lt;li&gt;若一個variable出現多次，則那些subgraph要彼此相連&lt;/li&gt;
&lt;li&gt;每個variable至少要出現一次&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;make subgraph as small as possible&lt;ul&gt;
&lt;li&gt;tree width: size of the largest subproblem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$O(nd^{w+1})$, w = tree width&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Breaking symmetry  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reduce search space by n! by breaking symmetry&lt;ul&gt;
&lt;li&gt;A: red, B: blue ↔ A:blue, B:red&lt;/li&gt;
&lt;li&gt;set A &amp;lt; B&lt;ul&gt;
&lt;li&gt;only one solution A:blue, B:red \&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Summary  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSPs are a special kind of problem&lt;ul&gt;
&lt;li&gt;states defined by values of a fixed set of variables&lt;/li&gt;
&lt;li&gt;goal test defined by constraints on variable values&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variable ordering and value selection heuristics help significantly&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterative min-conflicts&lt;/strong&gt; is usually &lt;strong&gt;effective in practice&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Chap07-Logical-Agents&#34;&gt;&lt;a href=&#34;#Chap07-Logical-Agents&#34; class=&#34;headerlink&#34; title=&#34;Chap07 Logical Agents&#34;&gt;&lt;/a&gt;Chap07 Logical Agents&lt;/h2&gt;&lt;p&gt;Can agent prove theorems?&lt;/p&gt;
&lt;p&gt;David Hilbert (1862-1943)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“Hilbert’s Program” [1920]&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mechanize mathematics&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The consistency of more complicated systems, such as real analysis, could be proven by simpler systems&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;consistency of all of mathematics could be reduced to basic arithmetic&lt;/li&gt;
&lt;li&gt;所有數學應用一種統一的嚴格形式化的語言，並且按照一套嚴格的規則來使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gödel showed that this is &lt;strong&gt;impossible&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Automatic theorem proving simply tries to mechanize what can be mechanized&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Godel’s-Incompleteness-Theorem-Kurt-Godel-1931&#34;&gt;&lt;a href=&#34;#Godel’s-Incompleteness-Theorem-Kurt-Godel-1931&#34; class=&#34;headerlink&#34; title=&#34;Gödel’s Incompleteness Theorem (Kurt Gödel, 1931)&#34;&gt;&lt;/a&gt;Gödel’s Incompleteness Theorem (Kurt Gödel, 1931)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;In any consistent formalization of mathematics that is sufficiently strong to define the concept of &lt;strong&gt;natural numbers&lt;/strong&gt;, one can construct a statement that can be &lt;strong&gt;neither proved nor disproved&lt;/strong&gt; within that system(任何相容的形式系統，只要蘊涵皮亞諾算術公理，就可以在其中構造在體系中不能被證明的真命題，因此通過推演不能得到所有真命題（即體系是不完備的）。)&lt;/li&gt;
&lt;li&gt;No consistent system can be used to prove its own consistency (can not simultaneously be true and false) 任何相容的形式系統，只要蘊涵皮亞諾算術公理，它就不能用於證明它本身的相容性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2VwaXN0ZS5tYXRoLm50dS5lZHUudHcvYXJ0aWNsZXMvbW0vbW1fMTVfNF8xMS9pbmRleC5odG1s&#34;&gt;《戈德爾不完備定理》，董世平&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;任一個證明，都必須從某一個公設系統出發。對於自然數我們最常用的公設系統就是皮亞諾公設 (Peano Axioms)， 這些公設中最複雜而且困難的，（不僅對一般的高中，大學生如此，對邏輯學家亦如此），就是大名鼎鼎的「數學歸納法」。藉著數學歸納法及其他的公設， 我們可證明「質數有無窮多個」，問題是「是否所有有關自然數的敘述，只要是對的，就可由皮亞諾公設出發，而得到證明呢？」也就是「皮亞諾公設是否完備?」 若皮亞諾公設具有完備性，那麼所有有關自然數的敘述，若是對的， 就可由皮亞諾公設證明。&lt;br&gt;由戈德爾不完備定理而得的一個結論，就是「皮亞諾公設是不完備的！」有些關於自然數的敘述是對的，但皮亞諾公設無法證明它，戈德爾的證明也的確告訴我們如何找到這個敘述。事實上，由戈德爾的證明，我們可得一個算則，給我們一個公設系統，我們就可按此算則，而得到一個算術句型，再經過適當的編譯 (compile)，即可成為此系統內的一個句型，而此句型在此系統內為真，卻無法在此系統內被證明，所以也許我們會覺得皮亞諾公設不具有完備性，這是它的缺點，我們應當找另一個具有完備性的公設系統來代替它，但不完備定理告訴我們，「任何一個具有一致性的公設化系統皆是不完備的！」這也就是為什麼雖然大家明知皮亞諾公設是不完備的，但這個公設系統仍是被普遍的使用，因為任何其他系統，也都是不完備的。也許我們再退一步，皮亞諾公設固然不具有完備性，我們至少可要求它具有一致性吧！也就是皮亞諾公設所證明的，一定是真的，可惜，這一點也做不到，由不完備定理可得另一個結論就是「在皮亞諾公設系統內將無法證明它的一致性！」從某一方面來說，你須要假設比「皮亞諾公設是一致的」更強或相等的假設，你才能證明皮亞諾公設的一致性，當然我們若須要更強的假設，也就須要更大的信心去相信它是對的。同樣的，皮亞諾公設也沒那麼特殊，就像不完備性的結果一樣，由戈德爾不完備定理，任一個足夠強的公設系統，皆無法證明它本身的一致性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一不完備定理&lt;ul&gt;
&lt;li&gt;任何一個足夠強的一致公設系統，必定是不完備的&lt;/li&gt;
&lt;li&gt;即除非這個系統很簡單，(所以能敘述的不多)，或是包含矛盾的， 否則必有一真的敘述不能被證明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二不完備定理&lt;ul&gt;
&lt;li&gt;任何一個足夠強的一致公設系統，必無法證明本身的一致性&lt;/li&gt;
&lt;li&gt;所以除非這個系統很簡單，否則你若在此系統性，證明了本身的一致性，反而已顯出它是不一致的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哥德爾證明：任何無矛盾的公理體系，只要包含初等算術的陳述，則必定存在一個不可判定命題，用這組公理不能判定其真假。也就是說，「無矛盾」和「完備」是不能同時滿足的！這便是聞名於世的哥德爾不完全性定理。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Byb2dyYW1tZXJtYWdhemluZS5naXRodWIuaW8vMjAxNDAzL2h0bS9mb2N1czQuaHRtbCPlvp7nqIvlvI/kurrnmoTop5LluqborYnmmI7lk6XlvrfniL7kuI3lrozlgpnlrprnkIY=&#34;&gt;從程式人的角度證明「哥德爾不完備定理」&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;knowledge-based-agents&#34;&gt;&lt;a href=&#34;#knowledge-based-agents&#34; class=&#34;headerlink&#34; title=&#34;knowledge-based agents&#34;&gt;&lt;/a&gt;knowledge-based agents&lt;/h3&gt;&lt;p&gt;use logical sentences(邏緝式) to infer conclusions about the world&lt;/p&gt;
&lt;p&gt;KnowledgeBase Agent  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;processes of reasoning that operate on representation of knowledge&lt;/li&gt;
&lt;li&gt;knowledge base&lt;ul&gt;
&lt;li&gt;set of sentences (axioms)&lt;ul&gt;
&lt;li&gt;given without derived from other sentences&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tell agent how to operate in this environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inference&lt;ul&gt;
&lt;li&gt;derive new sentences from old&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- Declarative Description of Knowledge-Based Agent    
- Knowledge level
    - Specify what the agent knows
        - The golden gate bridge connects San Francisco with Marin County
- Logical level
    - Specify **sentences encoding** that the agent knows
        - Links(GGBridge, SF, Marin)
- Implementation level
    - Specify **physical representation** of the sentences at the logical level
        - &#39;&#39;Links(GGBridge, SF, Marin)&#39;&#39;
--&gt;

&lt;h3 id=&#34;Terminology&#34;&gt;&lt;a href=&#34;#Terminology&#34; class=&#34;headerlink&#34; title=&#34;Terminology&#34;&gt;&lt;/a&gt;Terminology&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;α ╞ β: α entails β&lt;ul&gt;
&lt;li&gt;if there is a model that α is true, β is also true&lt;/li&gt;
&lt;li&gt;α is a stronger assertion than β&lt;/li&gt;
&lt;li&gt;x = 0 ╞ xy = 0   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An interpretation is a model for a theory if it assigns true to each formula in the set&lt;/li&gt;
&lt;li&gt;A formula is satisfiable if it is true in at least one model&lt;ul&gt;
&lt;li&gt;m satisfies α → m is a model of α&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A formula is valid if&lt;ul&gt;
&lt;li&gt;it is true under all possible interpretations&lt;/li&gt;
&lt;li&gt;Its negation is not satisfiable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Validity and Satisfiability    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/7-validansatis.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;演繹定理聲稱如果公式 F 演繹自 E，則蘊涵 E → F 是可證明的(就是或它可以自空集推導出來)。用符號表示，如果  $E \vdash F$ ，則  $\vdash E \rightarrow F $&lt;ul&gt;
&lt;li&gt;KB ╞ α if and only if (KB → α) is valid&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relation to Inference&lt;ul&gt;
&lt;li&gt;KB ╞ α if and only if (KB → ~α) is unsatisfiable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inference Rules    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modus ponenes(推論法則) &lt;img data-src=&#34;/img/AI/7-modusponens.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;and-elimination &lt;img data-src=&#34;/img/AI/7-andemi.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;Propositional Rule of Inference &lt;img data-src=&#34;/img/AI/7-propositionalInference.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Propositional-Logic&#34;&gt;&lt;a href=&#34;#Propositional-Logic&#34; class=&#34;headerlink&#34; title=&#34;Propositional Logic&#34;&gt;&lt;/a&gt;Propositional Logic&lt;/h3&gt;&lt;p&gt;Syntax and Semantics  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;symbol&lt;ul&gt;
&lt;li&gt;assigned by true or false&lt;/li&gt;
&lt;li&gt;literal: symbol or ~symbol&lt;/li&gt;
&lt;li&gt;constants: True(always true), False(always false)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;connectives&lt;ul&gt;
&lt;li&gt;or(disjunction), and(conjunction)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Proof-Methods&#34;&gt;&lt;a href=&#34;#Proof-Methods&#34; class=&#34;headerlink&#34; title=&#34;Proof Methods&#34;&gt;&lt;/a&gt;Proof Methods&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Application of inference rules&lt;ul&gt;
&lt;li&gt;generation proof sentence by inference&lt;/li&gt;
&lt;li&gt;Proof = a sequence of inference rule applications&lt;ul&gt;
&lt;li&gt;Can use inference rules as operators in a standard search algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Typically require transformation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model checking&lt;ul&gt;
&lt;li&gt;truth table enumeration&lt;ul&gt;
&lt;li&gt;exponential time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;improved backtracking&lt;ul&gt;
&lt;li&gt;e.g., Davis-Putnam-Logemann-Loveland (DPLL)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;heuristic search in model space (sound but incomplete)&lt;ul&gt;
&lt;li&gt;e.g., min-conflicts-like hill-climbing algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conjunctive Normal Form  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;any propositional formula can be transform to conjunctive normal form&lt;/li&gt;
&lt;li&gt;(or or …) and (or or …) and (or or …) …&lt;/li&gt;
&lt;li&gt;each () is a clause&lt;/li&gt;
&lt;li&gt;Convert normal formula to CNF&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/7-cnf-convert.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSHVudF90aGVfV3VtcHVz&#34;&gt;Wumpus&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using Resolution(歸結) inference rule&lt;ul&gt;
&lt;li&gt;$\frac{\Gamma_1 \cup\left{ \ell\right} ,,,, \Gamma_2 \cup\left{ \overline{\ell}\right} }{\Gamma_1 \cup\Gamma_2}|\ell|$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Testing-Validity&#34;&gt;&lt;a href=&#34;#Testing-Validity&#34; class=&#34;headerlink&#34; title=&#34;Testing Validity&#34;&gt;&lt;/a&gt;Testing Validity&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;truth tables&lt;ul&gt;
&lt;li&gt;exponential time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resolution&lt;/li&gt;
&lt;li&gt;Forward &amp;amp; backward chaining&lt;/li&gt;
&lt;li&gt;DPLL&lt;/li&gt;
&lt;li&gt;Local Search Methods&lt;ul&gt;
&lt;li&gt;Complete backtracking search algorithms&lt;ul&gt;
&lt;li&gt;DPLL algorithm (Davis, Putnam, Logemann, Loveland)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Incomplete local search algorithms&lt;ul&gt;
&lt;li&gt;WalkSAT algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Resolution&#34;&gt;&lt;a href=&#34;#Resolution&#34; class=&#34;headerlink&#34; title=&#34;Resolution&#34;&gt;&lt;/a&gt;Resolution&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sound&lt;ul&gt;
&lt;li&gt;inference that derives only entailed sentences&lt;/li&gt;
&lt;li&gt;if KB is true, then any sentence α derived from KB by sound inference is also true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Completeness&lt;ul&gt;
&lt;li&gt;if it can derive any sentence that is entailed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Resolution refutation is sound(可靠) and refutation complete(完備) for propositional logic  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If we derive a contradiction, then the conclusion follows from the axioms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If we can’t apply any more, then the conclusion cannot be proved from the axioms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A formal system S is refutation-complete if it is able to derive false from every unsatisfiable set of formulas&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;KB ╞ α if and only if (KB → ~α) is unsatisfiable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;proof KB ╞ α by showing (KB ^ ~α) is unsatisfiable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Binary Resolution Step&lt;br&gt;For any two clauses C1 and C2  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a literal L1 in C1 that is complementary to a literal L2 in C2&lt;/li&gt;
&lt;li&gt;Delete L1 and L2 from C1 and C2 respectively&lt;/li&gt;
&lt;li&gt;Construct the disjunction of the remaining clauses&lt;/li&gt;
&lt;li&gt;The constructed clause is a resolvent of C1 and C&lt;/li&gt;
&lt;li&gt;Ex. $\frac{a \vee b, \quad \neg a \vee c}{b \vee c}$&lt;/li&gt;
&lt;li&gt;put P1,2 into clause set to check whether “~P1,2 is in KB” &lt;img data-src=&#34;/img/AI/7-resolution.png&#34; alt=&#34;&#34;&gt;&lt;ul&gt;
&lt;li&gt;Proof by contradiction：The derivation of [] indicates that the database of clauses is inconsistent&lt;ul&gt;
&lt;li&gt;P1,2 &lt;strong&gt;is&lt;/strong&gt; in KB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Resolution algorithm &lt;img data-src=&#34;/img/AI/7-resolution-algo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Propositional-Horn-Clauses&#34;&gt;&lt;a href=&#34;#Propositional-Horn-Clauses&#34; class=&#34;headerlink&#34; title=&#34;Propositional Horn Clauses&#34;&gt;&lt;/a&gt;Propositional Horn Clauses&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;At most one positive literal&lt;/li&gt;
&lt;li&gt;Satisfiability can be tested in linear time&lt;/li&gt;
&lt;li&gt;Resolution is fast for Horn clauses, and very slow in non-Horn clauses&lt;ul&gt;
&lt;li&gt;resolve two horns → one horn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basis of Prolog&lt;ul&gt;
&lt;li&gt;Head:-body&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inference done by forward and backward chaining&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Forward-and-Backward-Chaining&#34;&gt;&lt;a href=&#34;#Forward-and-Backward-Chaining&#34; class=&#34;headerlink&#34; title=&#34;Forward and Backward Chaining&#34;&gt;&lt;/a&gt;Forward and Backward Chaining&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Horn Form (restricted)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KB = conjunction of Horn clauses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Horn clause =&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;proposition symbol, or&lt;/li&gt;
&lt;li&gt;(conjunction of symbols) =&amp;gt; symbol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modus Ponens(肯定前件)(for Horn Form): complete for Horn KBs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;used with forward chaining or backward chaining&lt;/li&gt;
&lt;li&gt;run in linear time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forward Chaining&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fire any rule whose premises are satisfied in the KB, add its conclusion to the KB, until query is found&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/7-forward-chaining.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backward chaining    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;work backwards from the query q to prove q by BC, check if q is known already, or prove all premises of q&lt;/li&gt;
&lt;li&gt;Avoid loops&lt;ul&gt;
&lt;li&gt;check if new subgoal is already on the goal stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Avoid repeated work&lt;ul&gt;
&lt;li&gt;check new subgoal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Forward vs. backward chaining  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;both sound and complete for Horn KB&lt;/li&gt;
&lt;li&gt;FC is data-driven, automatic, unconscious processing&lt;ul&gt;
&lt;li&gt;e.g., object recognition, routine decisions&lt;/li&gt;
&lt;li&gt;May do &lt;strong&gt;lots of work that is irrelevant to the goal&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BC is goal-driven, appropriate for problem-solving,&lt;ul&gt;
&lt;li&gt;e.g., Where are my keys? How do I get into a PhD program?&lt;/li&gt;
&lt;li&gt;Complexity of BC can be much less than linear in size of KB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Davis-Putnam-Procedure-DPLL&#34;&gt;&lt;a href=&#34;#Davis-Putnam-Procedure-DPLL&#34; class=&#34;headerlink&#34; title=&#34;Davis-Putnam Procedure(DPLL)&#34;&gt;&lt;/a&gt;Davis-Putnam Procedure(DPLL)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Introduced by Davis &amp;amp; Putnam in 1960&lt;/li&gt;
&lt;li&gt;Modified by Davis, Logemann &amp;amp; Loveland in 1962 [DPLL]&lt;ul&gt;
&lt;li&gt;Resolution rule replaced by splitting rule&lt;/li&gt;
&lt;li&gt;Trades space for time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DPLL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;recursive, depth-first enumeration of possible models&lt;ul&gt;
&lt;li&gt;determine if an input CNF is satisfiable with the following&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Improvements  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Early termination&lt;ul&gt;
&lt;li&gt;A clause is true if any literal is true(用or相連)&lt;/li&gt;
&lt;li&gt;A sentence is false if any clause is false(因為用and相連)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unit clause heuristic&lt;ul&gt;
&lt;li&gt;only one non-false literal in the clause&lt;ul&gt;
&lt;li&gt;The only literal in a unit clause must be true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a clause with just one literal (i.e. all other literals are assigned false)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pure symbol heuristic&lt;ul&gt;
&lt;li&gt;a symbol that always appears with the same sign in all clauses&lt;/li&gt;
&lt;li&gt;Ex. A and ~A would not both appear in a sentence if A  is pure&lt;/li&gt;
&lt;li&gt;Make a pure symbol literal true&lt;ul&gt;
&lt;li&gt;在全設成true時, KB自然是true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DPLL(continue)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unit propagation&lt;/li&gt;
&lt;li&gt;Example &lt;img data-src=&#34;/img/AI/7-dpll.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/7-dpll-algo.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;backtracking search&lt;/strong&gt; for a model of the formula&lt;/li&gt;
&lt;li&gt;Interpretations are examined in a &lt;strong&gt;sequential&lt;/strong&gt; manner&lt;ul&gt;
&lt;li&gt;DPLL(KB, p←TRUE) is testing interpretations if p is TRUE&lt;/li&gt;
&lt;li&gt;DPLL(KB, p←FALSE) is testing interpretations if p is FALSE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For each interpretation, a reason is found that the formula is false in it&lt;br&gt;•Such a sequential search of interpretations is very fast&lt;br&gt;–DPLL is much faster than propositional resolution for non-Horn clauses&lt;br&gt;•Very fast data structures developed&lt;br&gt;•Popular for hardware verification&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Chap08-First-Order-Logic&#34;&gt;&lt;a href=&#34;#Chap08-First-Order-Logic&#34; class=&#34;headerlink&#34; title=&#34;Chap08 First-Order Logic&#34;&gt;&lt;/a&gt;Chap08 First-Order Logic&lt;/h2&gt;&lt;p&gt;How Do Humans Process Knowledge?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;people process the words to form some kind of nonverbal representation, which we call &lt;strong&gt;memory&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Logic as a representation of the World &lt;img data-src=&#34;/img/AI/8-logic-representation.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sapir-Whorf Hypothesis  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The language we speak profoundly influences the way in which we think and make decisions&lt;ul&gt;
&lt;li&gt;setting up the category structure by which we divide up the world into different sorts of objects&lt;ul&gt;
&lt;li&gt;Eskimos have many words for snow and thus experience snow in a different way&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Two way to think(??)&lt;ul&gt;
&lt;li&gt;aware of the distinctions only by learning the words&lt;/li&gt;
&lt;li&gt;distinctions emerge from individual experience and become matched with the words&lt;br&gt;&lt;img data-src=&#34;/img/AI/8-inference-procedure.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logics  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A logic consists of the following:&lt;ul&gt;
&lt;li&gt;A formal system describing states of affairs&lt;ul&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;li&gt;Semantics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;proof theory – a set of rules for deducing the entailments of a set of sentences&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ontological commitments&lt;ul&gt;
&lt;li&gt;FOL: facts, objects, relations&lt;/li&gt;
&lt;li&gt;Probability theory: facts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Epistemological commitments&lt;ul&gt;
&lt;li&gt;What an agent believes about facts, e.g. FOL: true/false/unknown probability theory: degree of belief [0..1]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logical Truth and Belief&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ontological Commitment: What exists in the world — TRUTH&lt;/li&gt;
&lt;li&gt;Epistemoligical Commitment: What an agent believes about facts — BELIEF&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/8-logic-table.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(重複？)&lt;br&gt;Terminology  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Propositional constants: true, false&lt;/li&gt;
&lt;li&gt;Interpretation&lt;ul&gt;
&lt;li&gt;Truth assignments to propositional symbols&lt;/li&gt;
&lt;li&gt;Truth-functional meaning of logical connectives&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Theory: a set of formulas in logic&lt;/li&gt;
&lt;li&gt;An interpretation is a model for a theory if it assigns true to each formula in the set.&lt;ul&gt;
&lt;li&gt;A formula is satisfiable if it has (at least) a model&lt;/li&gt;
&lt;li&gt;A formula is valid if&lt;/li&gt;
&lt;li&gt;It is true under all possible interpretations&lt;br&gt;– Its negation is not satisfiable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Propositional Logic  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Propositional logic is declarative&lt;/li&gt;
&lt;li&gt;Propositional logic allows partial/disjunctive/negated information&lt;ul&gt;
&lt;li&gt;(unlike most data structures and databases)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Propositional logic is compositional:&lt;ul&gt;
&lt;li&gt;meaning of B1,1 ∧ P1,2 is derived from meaning of B1,1 and of P1,2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Meaning in propositional logic is context-independent&lt;ul&gt;
&lt;li&gt;(unlike natural language, where meaning depends on context)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Propositional logic has very limited expressive power&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;unlike natural language&lt;/li&gt;
&lt;li&gt;E.g., cannot say “pits cause breezes in adjacent squares“&lt;ul&gt;
&lt;li&gt;except by writing one sentence for each square&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wumpus-world agent using propositional logic&lt;br&gt;→ 64 distinct proposition symbols, 155 sentences&lt;br&gt;contains “physics” sentences for every single square&lt;br&gt;a lot of clauses&lt;/p&gt;
&lt;p&gt;First-Order Logic&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;propositional logic assumes the world contains facts&lt;/li&gt;
&lt;li&gt;first-order logic assumes the world contains&lt;ul&gt;
&lt;li&gt;Objects: people, houses, numbers, colors, baseball games, wars, …&lt;/li&gt;
&lt;li&gt;Relations: red, round, prime, brother of, bigger than, part of, comes between, …&lt;/li&gt;
&lt;li&gt;Functions: father of, best friend, one more than, plus, …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Syntax of FOL: Basic elements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constants&lt;ul&gt;
&lt;li&gt;KingJohn, 2, NUS,…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Predicates&lt;ul&gt;
&lt;li&gt;Brother, &amp;gt;,…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functions&lt;ul&gt;
&lt;li&gt;Sqrt, LeftLegOf,…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variables&lt;ul&gt;
&lt;li&gt;x, y, a, b,…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connectives&lt;ul&gt;
&lt;li&gt;¬, ⇒, ∧, ∨, ⇔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Equality&lt;ul&gt;
&lt;li&gt;=&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Quantifiers&lt;ul&gt;
&lt;li&gt;∀, ∃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Atomic sentences  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atomic sentence = predicate (term1,…,termn) or term1 = term2&lt;/li&gt;
&lt;li&gt;Term = function (term1,…,termn) or constant or variable&lt;/li&gt;
&lt;li&gt;Examples&lt;ul&gt;
&lt;li&gt;King John is the brother of Richard the Lion Heart&lt;ul&gt;
&lt;li&gt;Brother(KingJohn,RichardTheLionheart)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Richard’s left leg is longer than King John’s&lt;ul&gt;
&lt;li&gt;Greater-than(Length(LeftLegOf(Richard)),Length(LeftLegOf(KingJohn)))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Complex sentences&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complex sentences are made from atomic sentences using connectives&lt;ul&gt;
&lt;li&gt;¬S,S1 ∧ S2,S1 ∨ S2,S1 ⇒ S2,S1 ⇔ S2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples&lt;ul&gt;
&lt;li&gt;Sibling(KingJohn,Richard) ⇒ Sibling(Richard,KingJohn)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Truth in First-Order Logic(??)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sentences are true with respect to a model and an interpretation&lt;/li&gt;
&lt;li&gt;Model&lt;ul&gt;
&lt;li&gt;objects (domain elements)&lt;/li&gt;
&lt;li&gt;relations among objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interpretation specifies referents for&lt;ul&gt;
&lt;li&gt;constant symbols → objects&lt;/li&gt;
&lt;li&gt;predicate symbols → relations&lt;/li&gt;
&lt;li&gt;function symbols → functional relations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An atomic sentence predicate(term1,…,termn) is true iff the objects referred to by term1,…,termn are in the relation referred to by predicate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Models for FOL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can enumerate the models for a given KB vocabulary&lt;ul&gt;
&lt;li&gt;For each number of domain elements n from 1 to ∞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Computing entailment by enumerating the models is not easy&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/8-fol-model.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knowledge Engineering in FOL  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify the task&lt;/li&gt;
&lt;li&gt;Assemble the relevant knowledge&lt;/li&gt;
&lt;li&gt;Decide on a vocabulary of predicates, functions, and constants&lt;/li&gt;
&lt;li&gt;Encode general knowledge about the domain&lt;/li&gt;
&lt;li&gt;Encode a description of the specific problem instance&lt;/li&gt;
&lt;li&gt;Pose queries to the inference procedure and get answers&lt;/li&gt;
&lt;li&gt;Debug the knowledge base&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Domain: Electronic Circuits(Adder)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify the task&lt;ul&gt;
&lt;li&gt;Does the circuit actually add properly?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Assemble the relevant knowledge&lt;ul&gt;
&lt;li&gt;Composed of wires and gates&lt;/li&gt;
&lt;li&gt;Types of gates (AND, OR, XOR, NOT)&lt;/li&gt;
&lt;li&gt;Connections between terminals&lt;/li&gt;
&lt;li&gt;Irrelevant: size, shape, color, cost of gates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decide on a vocabulary&lt;ul&gt;
&lt;li&gt;Alternatives&lt;ul&gt;
&lt;li&gt;Type(X1) = XOR&lt;/li&gt;
&lt;li&gt;Type(X1, XOR)&lt;/li&gt;
&lt;li&gt;XOR(X1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General Domain Knowledge&lt;ul&gt;
&lt;li&gt;∀t1,t2 Connected(t1, t2) ⇒ Signal(t1) = Signal(t2)&lt;/li&gt;
&lt;li&gt;∀t Signal(t) = 1 ∨ Signal(t) = 0&lt;/li&gt;
&lt;li&gt;1 ≠ 0&lt;/li&gt;
&lt;li&gt;∀t1,t2 Connected(t1, t2) ⇒ Connected(t2, t1)&lt;/li&gt;
&lt;li&gt;∀g Type(g) = OR ⇒ Signal(Out(1,g)) = 1 ⇔ ∃n Signal(In(n,g)) = 1&lt;/li&gt;
&lt;li&gt;∀g Type(g) = AND ⇒ Signal(Out(1,g)) = 0 ⇔ ∃n Signal(In(n,g)) = 0&lt;/li&gt;
&lt;li&gt;g Type(g) = XOR ⇒ Signal(Out(1,g)) = 1 ⇔ Signal(In(1,g)) ≠ Signal(In2,g))&lt;/li&gt;
&lt;li&gt;∀g Type(g) = NOT ⇒ Signal(Out(1,g)) ≠ Signal(In(1,g))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Specific Problem Instance&lt;ul&gt;
&lt;li&gt;Type(X1) = XOR Type(X2) = XOR&lt;/li&gt;
&lt;li&gt;Type(A1) = AND Type(A2) = AND&lt;/li&gt;
&lt;li&gt;Type(O1) = OR&lt;/li&gt;
&lt;li&gt;Connected(Out(1,X1),In(1,X2)) Connected(In(1,C1),In(1,X1))&lt;/li&gt;
&lt;li&gt;Connected(Out(1,X1),In(2,A2)) Connected(In(1,C1),In(1,A1))&lt;/li&gt;
&lt;li&gt;Connected(Out(1,A2),In(1,O1)) Connected(In(2,C1),In(2,X1))&lt;/li&gt;
&lt;li&gt;Connected(Out(1,A1),In(2,O1)) Connected(In(2,C1),In(2,A1))&lt;/li&gt;
&lt;li&gt;Connected(Out(1,X2),Out(1,C1)) Connected(In(3,C1),In(2,X2))&lt;/li&gt;
&lt;li&gt;Connected(Out(1,O1),Out(2,C1)) Connected(In(3,C1),In(1,A2))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Query&lt;ul&gt;
&lt;li&gt;What are the possible sets of values of all the terminals for the adder circuit?&lt;/li&gt;
&lt;li&gt;∃i1,i2,i3,o1,o2 Signal(In(1,C_1)) = i1 ∧ Signal(In(2,C1)) = i2 ∧ Signal(In(3,C1)) = i3 ∧ Signal(Out(1,C1)) = o1 ∧ Signal(Out(2,C1)) = o2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Domain: Kinship(親屬關係)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Brothers are siblings&lt;ul&gt;
&lt;li&gt;∀x,y Brother(x,y) ⇔ Sibling(x,y)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One’s mother is one’s female parent&lt;ul&gt;
&lt;li&gt;∀m,c Mother(c) = m ⇔ (Female(m) ∧ Parent(m,c))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“Sibling” is symmetric&lt;ul&gt;
&lt;li&gt;∀x,y Sibling(x,y) ⇔ Sibling(y,x)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A first cousin is a child of a parent’s sibling&lt;ul&gt;
&lt;li&gt;∀x,y FirstCousin(x,y) ⇔ ∃p,ps Parent(p,x) ∧ Sibling(ps,p) ∧ Parent(ps,y)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Domain: Set   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;∀s Set(s) ⇔ (s = {} ) ∨ (∃x,s2 Set(s2) ∧ s = {x|s2})&lt;/li&gt;
&lt;li&gt;¬∃x,s {x|s} = {}&lt;/li&gt;
&lt;li&gt;∀x,s x ∈ s ⇔ s = {x|s}&lt;/li&gt;
&lt;li&gt;∀x,s x ∈ s ⇔ [ ∃y,s2} (s = {y|s2} ∧ (x = y ∨ x ∈ s2))]&lt;/li&gt;
&lt;li&gt;∀s1,s2 s1 ⊆ s2 ⇔ (∀x x ∈ s1 ⇒ x ∈ s2)&lt;/li&gt;
&lt;li&gt;∀s1,s2 (s1 = s2) ⇔ (s1 ⊆ s2 ∧ s2 ⊆ s1)&lt;/li&gt;
&lt;li&gt;∀x,s1,s2 x ∈ (s1 ∩ s2) ⇔ (x ∈ s1 ∧ x ∈ s2)&lt;/li&gt;
&lt;li&gt;∀x,s1,s2 x ∈ (s1 ∪ s2) ⇔ (x ∈ s1 ∨ x ∈ s2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Universal Qantification  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;∀&lt;variables&gt; &lt;sentence&gt;&lt;ul&gt;
&lt;li&gt;Everyone at NTU is smart&lt;ul&gt;
&lt;li&gt;∀x At(x,NTU) ⇒ Smart(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;equivalent to the conjunction of instantiations(例證來源) of P&lt;ul&gt;
&lt;li&gt;At(KingJohn,NTU) ⇒ Smart(KingJohn) ∧ At(Richard,NTU) ⇒ Smart(Richard) ∧ At(Mary,NTU) ⇒ Smart(Mary) …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Common Mistake&lt;ul&gt;
&lt;li&gt;Typically, ⇒ is the main connective with ∀&lt;/li&gt;
&lt;li&gt;Wrong: using ∧ as the main connective with ∀&lt;/li&gt;
&lt;li&gt;∀x At(x,NTU) ∧ Smart(x) means “Everyone is at NTU and everyone is smart”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Existential Quantification&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;∃&lt;variables&gt; &lt;sentence&gt;&lt;ul&gt;
&lt;li&gt;Someone at NTU is smart&lt;ul&gt;
&lt;li&gt;∃x At(x,NTU) ∧ Smart(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;equivalent to the disjunction of instantiations of P&lt;ul&gt;
&lt;li&gt;At(KingJohn,NTU) ∧ Smart(KingJohn) ∨ At(Richard,NTU) ∧ Smart(Richard) ∨ At(Mary,NTU) ∧ Smart(Mary) ∨ …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Typically, ∧ is the main connective with ∃&lt;ul&gt;
&lt;li&gt;Common mistake: using ⇒ as the main connective with ∃&lt;/li&gt;
&lt;li&gt;∃x At(x,NTU) ⇒ Smart(x) &lt;strong&gt;is true if there is anyone who is not at NTU!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Properties of Quantifiers  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;∀x ∀y = ∀y ∀x&lt;/li&gt;
&lt;li&gt;∃x ∃y = ∃y ∃x&lt;/li&gt;
&lt;li&gt;∃x ∀y ≠ ∀y ∃x&lt;ul&gt;
&lt;li&gt;∃x ∀y Loves(x,y)&lt;ul&gt;
&lt;li&gt;“There is a person who loves everyone in the world”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;∀y ∃x Loves(x,y)&lt;ul&gt;
&lt;li&gt;“Everyone in the world is loved by at least one person”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Quantifier duality&lt;ul&gt;
&lt;li&gt;each can be expressed using the other&lt;/li&gt;
&lt;li&gt;∀x Likes(x,IceCream) ↔ ¬∃x ¬Likes(x,IceCream)&lt;/li&gt;
&lt;li&gt;∃x Likes(x,Broccoli) ↔ ¬∀x ¬Likes(x,Broccoli)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unification&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To unify Knows(John,x) and Knows(y,z)&lt;ul&gt;
&lt;li&gt;MGU = { y/John, x/z }&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is a single most general unifier (MGU) that is unique up to renaming of variables&lt;/li&gt;
&lt;li&gt;We can get the inference immediately if we can find a substitution θ such that King(x) and Greedy(x) match King(John) and Greedy(y)&lt;/li&gt;
&lt;li&gt;Unify(α,β) = θ if αθ = βθ&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/8-unification.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/AI/8-unify-algo.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;Standardizing apart eliminates overlap of variables&lt;ul&gt;
&lt;li&gt;Knows(z17,OJ)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conversion to CNF  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everyone who loves all animals is loved by someone&lt;/li&gt;
&lt;li&gt;∀x [∀y Animal(y) ⇒ Loves(x,y)] ⇒ [∃y Loves(y,x)]&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Eliminate biconditionals and implications&lt;br&gt;∀x [¬∀y ¬Animal(y) ∨ Loves(x,y)] ∨ [∃y Loves(y,x)]&lt;/li&gt;
&lt;li&gt;Move ¬ inwards: ¬∀x p ≡ ∃x ¬p, ¬ ∃x p ≡ ∀x ¬p&lt;br&gt;∀x [∃y ¬(¬Animal(y) ∨ Loves(x,y))] ∨ [∃y Loves(y,x)]&lt;br&gt;∀x [∃y ¬¬Animal(y) ∧ ¬Loves(x,y)] ∨ [∃y Loves(y,x)]&lt;br&gt;∀x [∃y Animal(y) ∧ ¬Loves(x,y)] ∨ [∃y Loves(y,x)]&lt;/li&gt;
&lt;li&gt;Standardize variables: each quantifier should use a different one&lt;br&gt;∀x [∃y Animal(y) ∧ ¬Loves(x,y)] ∨ [∃z Loves(z,x)]&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;Skolemize: a more general form of existential instantiation&lt;br&gt;Each existential variable is replaced by a Skolem function of the enclosing universally quantified variables&lt;br&gt;∀x [Animal(F(x)) ∧ ¬Loves(x,F(x))] ∨ Loves(G(x),x)&lt;/li&gt;
&lt;li&gt;Drop universal quantifiers&lt;br&gt;[Animal(F(x)) ∧ ¬Loves(x,F(x))] ∨ Loves(G(x),x)&lt;/li&gt;
&lt;li&gt;Distribute ∨ over ∧&lt;br&gt;[Animal(F(x)) ∨ Loves(G(x),x)] ∧ [¬Loves(x,F(x)) ∨ Loves(G(x),x)]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First-order logic   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;objects and relations are semantic&lt;/li&gt;
&lt;li&gt;syntax: constants, functions, predicates, equality, quantifiers&lt;/li&gt;
&lt;li&gt;Increased expressive power: sufficient to define wumpus world&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Reference&#34;&gt;&lt;a href=&#34;#Reference&#34; class=&#34;headerlink&#34; title=&#34;Reference&#34;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Jane Hsu 上課講義&lt;/li&gt;
&lt;li&gt;Artificial Intelligence: A Modern Approach&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FpbWEuY3MuYmVya2VsZXkuZWR1L2luc3RydWN0b3JzLmh0bWw=&#34;&gt;http://aima.cs.berkeley.edu/instructors.html&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5jcy51YmMuY2EvfmhraG9zcmF2L2FpLzMxMC0yMDExLmh0bWw=&#34;&gt;http://www.cs.ubc.ca/~hkhosrav/ai/310-2011.html&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpYm9va3Mub3JnL3dpa2kvQXJ0aWZpY2lhbF9JbnRlbGxpZ2VuY2U=&#34;&gt;https://en.wikibooks.org/wiki/Artificial_Intelligence&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
