{
    "version": "https://jsonfeed.org/version/1",
    "title": "QWERTY • All posts by \"linux\" tag",
    "description": "Programming | Computer Science | Thought",
    "home_page_url": "http://gitqwerty777.github.io",
    "items": [
        {
            "id": "http://gitqwerty777.github.io/linux-screen-tmux-byobu/",
            "url": "http://gitqwerty777.github.io/linux-screen-tmux-byobu/",
            "title": "byobu指令和設定",
            "date_published": "2022-02-21T10:00:45.000Z",
            "content_html": "<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>byobu是基於screen或tmux的一層操作介面<br>預設為基於tmux</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90YW8tb2YtdG11eC5yZWFkdGhlZG9jcy5pby96aF9DTi9sYXRlc3QvbWFudXNjcmlwdC8wMC1mb3Jld29yZC5odG1s\">tmux教學<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"使用byobu\"><a href=\"#使用byobu\" class=\"headerlink\" title=\"使用byobu\"></a>使用byobu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">byobu-enable <span class=\"comment\">#登入就開啟byobu</span></span><br><span class=\"line\">byobu-disable <span class=\"comment\">#取消</span></span><br><span class=\"line\">byobu new -s &lt;session name&gt; <span class=\"comment\"># 新建一個byobu 會話</span></span><br><span class=\"line\"><span class=\"comment\"># 如果新建兩個以上，每次進入byobu的時候需要選擇</span></span><br></pre></td></tr></table></figure>\n\n<p>滑鼠操作</p>\n<ul>\n<li>選擇文字 <code>Shift+選擇</code></li>\n<li>複製文字 <code>Shift+右鍵</code></li>\n<li>開/關滑鼠操作 <code>Shift+F12</code></li>\n</ul>\n<h2 id=\"名詞解釋\"><a href=\"#名詞解釋\" class=\"headerlink\" title=\"名詞解釋\"></a>名詞解釋</h2><p>用瀏覽器的名詞解釋</p>\n<ul>\n<li>session → 視窗：不同視窗包含不同分頁<ul>\n<li>window → 分頁<ul>\n<li>split → 分割：同一個分頁的不同終端</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/img/Other/byobu-cheat-sheet.jpg\" alt=\"cheetsheet\"></p>\n<h2 id=\"指令表\"><a href=\"#指令表\" class=\"headerlink\" title=\"指令表\"></a>指令表</h2><h3 id=\"新建-F2\"><a href=\"#新建-F2\" class=\"headerlink\" title=\"新建(F2)\"></a>新建(F2)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Ctrl-F2</code></td>\n<td>新增垂直分割(分為左右兩塊)</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F2</code></td>\n<td>新增新視窗</td>\n</tr>\n<tr>\n<td><code>F2</code></td>\n<td>新增分頁</td>\n</tr>\n<tr>\n<td><code>Shift-F2</code></td>\n<td>新增水平分割(分為上下兩塊)</td>\n</tr>\n</tbody></table>\n<h3 id=\"移動-F3-F4\"><a href=\"#移動-F3-F4\" class=\"headerlink\" title=\"移動(F3/F4)\"></a>移動(F3/F4)</h3><p>移動的前後順序為編號順序</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-↑/↓</code></td>\n<td>前/後一個視窗</td>\n</tr>\n<tr>\n<td><code>Ctrl-F3/F4</code></td>\n<td>交換兩個分割的位置</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F3/F4</code></td>\n<td>移動分頁的位置(編號)</td>\n</tr>\n<tr>\n<td><code>F3/F4</code>, <code>Alt-←/→</code></td>\n<td>前/後一個分頁</td>\n</tr>\n<tr>\n<td><code>Shift-Alt-Left/Right/Up/Down</code></td>\n<td>修改目前的分割大小</td>\n</tr>\n<tr>\n<td><code>Shift-F3/F4</code></td>\n<td>移動至前/後分割</td>\n</tr>\n<tr>\n<td><code>Shift-←/→/↑/↓</code></td>\n<td>移動至其他分割</td>\n</tr>\n</tbody></table>\n<h3 id=\"設定-F5-F12\"><a href=\"#設定-F5-F12\" class=\"headerlink\" title=\"設定(F5, F12)\"></a>設定(F5, F12)</h3><p>記<code>F9</code>即可</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-F12</code></td>\n<td>切換滑鼠支援</td>\n</tr>\n<tr>\n<td><code>Alt-F5</code></td>\n<td>切換 UTF-8 支援</td>\n</tr>\n<tr>\n<td><code>Ctrl-F5</code></td>\n<td>Reconnect ssh/gpg/dbus sockets(註：應該是重新連線的意思)</td>\n</tr>\n<tr>\n<td><code>F5</code></td>\n<td>重新讀取設定</td>\n</tr>\n<tr>\n<td><code>F9</code></td>\n<td><strong>開啟 byobu 設定頁面</strong></td>\n</tr>\n<tr>\n<td><code>Shift-F12</code></td>\n<td>開/關 byobu 指令快捷鍵</td>\n</tr>\n<tr>\n<td><code>Shift-F5</code></td>\n<td>切換底部狀態列資訊</td>\n</tr>\n</tbody></table>\n<h3 id=\"取消-F6\"><a href=\"#取消-F6\" class=\"headerlink\" title=\"取消(F6)\"></a>取消(F6)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-F6</code></td>\n<td>使連線到相同視窗的 terminal 離開(除了自己)</td>\n</tr>\n<tr>\n<td><code>Ctrl-F6</code></td>\n<td>關閉目前所在的分割</td>\n</tr>\n<tr>\n<td><code>F6</code></td>\n<td>離開 byobu 但不登出(=<code>byobu detach</code>)</td>\n</tr>\n<tr>\n<td><code>Shift-F6</code></td>\n<td>離開 byobu 且登出(註：不知道差別在哪)</td>\n</tr>\n</tbody></table>\n<h3 id=\"記錄-F7\"><a href=\"#記錄-F7\" class=\"headerlink\" title=\"記錄(F7)\"></a>記錄(F7)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-PageUp/PageDown</code></td>\n<td>於歷史記錄中翻頁</td>\n</tr>\n<tr>\n<td><code>F7</code></td>\n<td>瀏覽歷史記錄(Command line history)</td>\n</tr>\n<tr>\n<td><code>Shift-F7</code></td>\n<td>儲存歷史記錄於 <code>$BYOBU_RUN_DIR/printscreen</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"管理-F8\"><a href=\"#管理-F8\" class=\"headerlink\" title=\"管理(F8)\"></a>管理(F8)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-Shift-F8</code></td>\n<td>選擇分割佈局</td>\n</tr>\n<tr>\n<td><code>Ctrl-F8</code></td>\n<td>命名目前視窗</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F8</code></td>\n<td>儲存目前的分割佈局</td>\n</tr>\n<tr>\n<td><code>F8</code></td>\n<td>命名目前分頁</td>\n</tr>\n<tr>\n<td><code>Shift-F8</code></td>\n<td>切換為不同的分割佈局</td>\n</tr>\n</tbody></table>\n<h3 id=\"廣播-F9\"><a href=\"#廣播-F9\" class=\"headerlink\" title=\"廣播(F9)\"></a>廣播(F9)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-F9</code></td>\n<td>開/關 同時輸入分割</td>\n</tr>\n<tr>\n<td><code>Ctrl-F9</code></td>\n<td>視窗中的所有分頁執行同一指令</td>\n</tr>\n<tr>\n<td><code>Shift-F9</code></td>\n<td>分頁中的所有分割執行同一指令</td>\n</tr>\n</tbody></table>\n<h3 id=\"其他-F11-F12\"><a href=\"#其他-F11-F12\" class=\"headerlink\" title=\"其他(F11, F12)\"></a>其他(F11, F12)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-F11</code></td>\n<td>目前分割最大化</td>\n</tr>\n<tr>\n<td><code>Ctrl-F11</code></td>\n<td>將目前分割合併至前一個分頁(Join window into a vertical split)</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F12</code></td>\n<td>顯示蒙德裡安圖(Mondrian squares)</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F5</code></td>\n<td>隨機切換狀態列的顏色</td>\n</tr>\n<tr>\n<td><code>F12</code></td>\n<td>Escape sequence(等同 screen 的<code>Ctrl+a</code>)</td>\n</tr>\n<tr>\n<td><code>Shift-F11</code></td>\n<td>最大化/還原 目前分割</td>\n</tr>\n<tr>\n<td><code>Shift-F1</code></td>\n<td>顯示指令列表</td>\n</tr>\n</tbody></table>\n<h2 id=\"設定\"><a href=\"#設定\" class=\"headerlink\" title=\"設定\"></a>設定</h2><p>預設放在<code>~/.byobu/</code></p>\n<h3 id=\"修改狀態列\"><a href=\"#修改狀態列\" class=\"headerlink\" title=\"修改狀態列\"></a>修改狀態列</h3><p><code>~/.byobu/status</code></p>\n<p>預設是長這樣</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tmux has one status line, with 2 halves for status</span></span><br><span class=\"line\">tmux_left=<span class=\"string\">\"#logo distro release #arch #session\"</span></span><br><span class=\"line\"><span class=\"comment\"># You can have as many tmux right lines below here, and cycle through them using Shift-F5</span></span><br><span class=\"line\">tmux_right=<span class=\"string\">\"network #disk_io #custom #entropy #raid reboot_required #updates_available #apport #services #mail #users uptime #ec2_cost #rcs_cost #fan_speed #cpu_temp #battery #wifi_quality #processes load_average cpu_count cpu_freq memory #swap disk users whoami #hostname ip_address #time_utc #date time\"</span></span><br><span class=\"line\"><span class=\"comment\">#tmux_right=\"network #disk_io #custom entropy raid reboot_required updates_available #apport #services #mail users uptime #ec2_cost #rcs_cost fan_speed cpu_temp battery wifi_quality #processes load_average cpu_count cpu_freq memory #swap #disk whoami hostname ip_address #time_utc date time\"</span></span><br><span class=\"line\"><span class=\"comment\">#tmux_right=\"network #disk_io custom #entropy raid reboot_required updates_available #apport #services #mail users uptime #ec2_cost #rcs_cost #fan_speed #cpu_temp battery wifi_quality #processes load_average cpu_count cpu_freq memory #swap #disk #whoami #hostname ip_address #time_utc date time\"</span></span><br><span class=\"line\"><span class=\"comment\">#tmux_right=\"#network disk_io #custom entropy #raid #reboot_required #updates_available #apport #services #mail #users #uptime #ec2_cost #rcs_cost fan_speed cpu_temp #battery #wifi_quality #processes #load_average #cpu_count #cpu_freq #memory #swap whoami hostname ip_address #time_utc disk date time\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Left</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>說明</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>arch</code></td>\n<td>CPU 架構</td>\n<td><code>x86_64</code></td>\n</tr>\n<tr>\n<td><code>distro</code></td>\n<td>作業系統名稱</td>\n<td><code>Ubuntu</code></td>\n</tr>\n<tr>\n<td><code>logo</code></td>\n<td>作業系統的 Logo，可設定</td>\n<td><code>u</code></td>\n</tr>\n<tr>\n<td><code>release</code></td>\n<td>作業系統版本</td>\n<td><code>20.04</code></td>\n</tr>\n<tr>\n<td><code>session</code></td>\n<td>視窗名字</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>Right</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>說明</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>apport</code></td>\n<td>提醒尚未讀的 Crash Report</td>\n<td></td>\n</tr>\n<tr>\n<td><code>battery</code></td>\n<td>剩餘電量</td>\n<td></td>\n</tr>\n<tr>\n<td><code>cpu_count</code></td>\n<td>CPU 核心數</td>\n<td><code>16x</code></td>\n</tr>\n<tr>\n<td><code>cpu_freq</code></td>\n<td>CPU 時脈</td>\n<td><code>4.0GHz</code></td>\n</tr>\n<tr>\n<td><code>cpu_temp</code></td>\n<td>CPU 溫度</td>\n<td><code>30C</code></td>\n</tr>\n<tr>\n<td><code>custom</code></td>\n<td>自訂腳本，需要額外設定</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>日期，可自行設定</td>\n<td><code>2011-11-11</code></td>\n</tr>\n<tr>\n<td><code>disk_io</code></td>\n<td>即時 IO 讀/寫速度</td>\n<td><code>◁11KB/s ▷188KB/s</code></td>\n</tr>\n<tr>\n<td><code>disk</code></td>\n<td>磁碟用量</td>\n<td><code>256G90%</code></td>\n</tr>\n<tr>\n<td><code>entropy</code></td>\n<td>系統的 Entropy</td>\n<td><code>e3363</code></td>\n</tr>\n<tr>\n<td><code>fan_speed</code></td>\n<td>風扇速度，需要額外設定</td>\n<td></td>\n</tr>\n<tr>\n<td><code>hostname</code></td>\n<td>主機名稱</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ip_address</code></td>\n<td>系統 ip 位址</td>\n<td><code>111.111.111.111</code></td>\n</tr>\n<tr>\n<td><code>load_average</code></td>\n<td>前一分鐘 CPU 的平均用量</td>\n<td><code>0.12</code></td>\n</tr>\n<tr>\n<td><code>mail</code></td>\n<td>是否有新信件</td>\n<td><code>[M]</code></td>\n</tr>\n<tr>\n<td><code>memory</code></td>\n<td>記憶體用量</td>\n<td><code>32G50%</code></td>\n</tr>\n<tr>\n<td><code>network</code></td>\n<td>即時網路上傳/下載速度</td>\n<td><code>△11KB/s ▽188KB/s</code></td>\n</tr>\n<tr>\n<td><code>processes</code></td>\n<td>總程序(Process)數</td>\n<td><code>100&amp;</code></td>\n</tr>\n<tr>\n<td><code>raid</code></td>\n<td>Raid 失敗警告</td>\n<td></td>\n</tr>\n<tr>\n<td><code>reboot_required</code></td>\n<td>是否需要重啟</td>\n<td></td>\n</tr>\n<tr>\n<td><code>services</code></td>\n<td>監控中的服務，需要額外設定</td>\n<td></td>\n</tr>\n<tr>\n<td><code>swap</code></td>\n<td>Swap 用量</td>\n<td><code>s32G50%</code></td>\n</tr>\n<tr>\n<td><code>time_utc</code></td>\n<td>UTC 時間</td>\n<td><code>04:00UTC</code></td>\n</tr>\n<tr>\n<td><code>time</code></td>\n<td>時間</td>\n<td><code>11:11:11</code></td>\n</tr>\n<tr>\n<td><code>updates_available</code></td>\n<td>是否需要更新軟體</td>\n<td><code>!</code>為一般更新 <code>!!</code>為重要更新</td>\n</tr>\n<tr>\n<td><code>uptime</code></td>\n<td>系統開機時間</td>\n<td><code>12d23h</code></td>\n</tr>\n<tr>\n<td><code>users</code></td>\n<td>用 ssh 登入的人數</td>\n<td><code>#1</code></td>\n</tr>\n<tr>\n<td><code>whoami</code></td>\n<td>目前登入帳戶</td>\n<td><code>qwerty</code></td>\n</tr>\n<tr>\n<td><code>wifi_quality</code></td>\n<td>Wifi 訊號強度</td>\n<td><code>[M]</code></td>\n</tr>\n</tbody></table>\n<p>也可以用<code>F9</code>設定</p>\n<h3 id=\"顏色設定\"><a href=\"#顏色設定\" class=\"headerlink\" title=\"顏色設定\"></a>顏色設定</h3><p><code>~/.byobu/color</code><br><code>~/.byobu/color.tmux</code></p>\n<h3 id=\"VSCode設定\"><a href=\"#VSCode設定\" class=\"headerlink\" title=\"VSCode設定\"></a>VSCode設定</h3><p>避免和預設的快捷鍵重覆</p>\n<p>設定 → 終端機</p>\n<ol>\n<li>取消勾選<code>Integrated: Allow Chords</code></li>\n<li><code>Integrated: Commands To Skip Shell</code>增加下列<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.quickOpen</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.terminal</span><span class=\"selector-class\">.findNext</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.terminal</span><span class=\"selector-class\">.findPrevious</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.continue</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.restart</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.run</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.start</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.stop</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.focusNextPart</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.focusPreviousPart</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.pause</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.quickOpen</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.terminal</span><span class=\"selector-class\">.focusFind</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYnlvYnUub3Jn\">byobu<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGV2aGVyby83YjlhNzI4MWRiMGFjNGJhNjgzZg==\">byobu_cheatsheet<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBlcnVzZXIuY29tL2EvNDIzMzk3\">Byobu vs. GNU Screen vs. tmux — usefulness and transferability of skills<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvbnNwbmcuY29tL2ltYWdlcy9ieW9idS1jaGVhdC1zaGVldC9ieW9idS1jaGVhdC1zaGVldC5qcGc=\">byobu-cheat-sheet<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYnlvYnUub3JnL2RvY3VtZW50YXRpb24=\">官方文件<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zemxpbi5tZS8yMDE2LzEwLzA1LyVFNSU4OCU5RCVFNiU4RSVBMi1saW51eC1rZXJuZWwtJUU0JUJBJTgyJUU2JTk1JUI4JUU3JTk0JUEyJUU3JTk0JTlGJUU1JTk5JUE4LXJhbmRvbS1nZW5lcmF0b3Iv\">Entropy說明<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYWlzYWt1LXRlY2guaGF0ZW5hYmxvZy5jb20vZW50cnkvMjAyMC8wOS8wNS8xNzUzMjA=\">VS codeのターミナルでbyobuを使う<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "Linux",
                "byobu",
                "screen",
                "tmux"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/linux-save-memory-disk/",
            "url": "http://gitqwerty777.github.io/linux-save-memory-disk/",
            "title": "在Linux系統中 節省硬碟和記憶體用量",
            "date_published": "2020-10-15T07:46:00.000Z",
            "content_html": "<p>最近發現 VM 和遠端主機的使用空間都太大了，找到一些相關處理方法</p>\n<a id=\"more\"></a>\n\n<h2 id=\"硬碟用量\"><a href=\"#硬碟用量\" class=\"headerlink\" title=\"硬碟用量\"></a>硬碟用量</h2><h3 id=\"檢查\"><a href=\"#檢查\" class=\"headerlink\" title=\"檢查\"></a>檢查</h3><ul>\n<li><code>df -h</code> 查看磁碟使用情形</li>\n<li><code>df -i</code> 檢查inode使用情形</li>\n<li><code>du -sh</code> 查看各資料夾用量</li>\n<li><code>du -sh * | sort -nr</code> 依序列出大檔案</li>\n<li><code>ls -a</code> 顯示隱藏檔案(<code>.</code>開頭的檔案)</li>\n<li><code>dpkg-query -Wf &#39;${Installed-Size}\\t${Package}\\n&#39; | sort -n</code> 顯示已安裝的的大package</li>\n<li><code>wajig large</code><!--  /lib/modules/<kernel_release>/extra/ -->\n\n</li>\n</ul>\n<h3 id=\"apt\"><a href=\"#apt\" class=\"headerlink\" title=\"apt\"></a>apt</h3><figure class=\"highlight dsconfig\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">sudo </span><span class=\"string\">apt </span><span class=\"string\">autoremove</span></span><br><span class=\"line\"><span class=\"string\">sudo </span><span class=\"string\">apt </span><span class=\"string\">autoremove </span><span class=\"built_in\">--purge</span> <span class=\"comment\"># remove old kernels</span></span><br><span class=\"line\"><span class=\"string\">sudo </span><span class=\"string\">apt </span><span class=\"string\">clean </span><span class=\"comment\"># 清除 apt 快取</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h3><p><code>git gc --aggressive --prune=all</code> 清理並壓縮 history</p>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p><code>docker builder prune</code> 移除沒在使用的build</p>\n<h2 id=\"記憶體用量\"><a href=\"#記憶體用量\" class=\"headerlink\" title=\"記憶體用量\"></a>記憶體用量</h2><h3 id=\"檢查-1\"><a href=\"#檢查-1\" class=\"headerlink\" title=\"檢查\"></a>檢查</h3><ul>\n<li><code>free</code></li>\n</ul>\n<h3 id=\"硬碟容量換記憶體容量\"><a href=\"#硬碟容量換記憶體容量\" class=\"headerlink\" title=\"硬碟容量換記憶體容量\"></a>硬碟容量換記憶體容量</h3><p>當然，會比較慢</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3BlbmNsaS5jb20vbGludXgvbGludXgtYWRkLXN3YXA=\">使用 swap<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"CPU-用量\"><a href=\"#CPU-用量\" class=\"headerlink\" title=\"CPU 用量\"></a>CPU 用量</h2><ul>\n<li>各process用量<ul>\n<li><code>top</code></li>\n<li><code>htop</code></li>\n</ul>\n</li>\n<li><code>kill &lt;pid&gt;</code></li>\n</ul>\n",
            "tags": [
                "linux",
                "硬碟",
                "記憶體",
                "效能"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/cmake/",
            "url": "http://gitqwerty777.github.io/cmake/",
            "title": "Makefile 和 CMake 之間的轉換和實作",
            "date_published": "2017-01-17T10:12:50.000Z",
            "content_html": "<!-- RENEW: -->\n\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21xamluZy5ibG9nc3BvdC50dy8yMDA5LzA5L2NtYWtlLWhvdy10by11c2UtY21ha2UuaHRtbA==\">http://mqjing.blogspot.tw/2009/09/cmake-how-to-use-cmake.html<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pdGsub3JnL1dpa2kvQ01ha2VfVXNlZnVsX1ZhcmlhYmxlcw==\">CMake 常用變數<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>CMake用來產生跨平台的專案建置文件，在windows下它會生成visual studio的專案檔(.sln) codeblock eclipse，在linux下它會生成Makefile。類似工具有autotools和qmake，不過autotools太複雜，qmake只限於qt使用。</p>\n<p>CMake用更抽象的語法來組織項目。例如用math表示數學庫，而不需要再具體指定到底是math.dll還是libmath.so。</p>\n<a id=\"more\"></a>\n\n<p>類似功能的工具</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zY29ucy5vcmc=\">SCons<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>by python</li>\n</ul>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2FudC5hcGFjaGUub3JnLw==\">Apache ant<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>by java</li>\n</ul>\n</li>\n<li><p>優點</p>\n<ul>\n<li>stable</li>\n<li>fast</li>\n<li>支援Code::Blocks, Xcode等</li>\n</ul>\n</li>\n<li><p>缺點</p>\n<ul>\n<li>需學習語法</li>\n</ul>\n</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaXRidWNrZXQub3JnL3Njb25zL3Njb25zL3dpa2kvU2NvbnNWc090aGVyQnVpbGRUb29scw==\">專案建置工具比較<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"GUI\"><a href=\"#GUI\" class=\"headerlink\" title=\"GUI\"></a>GUI</h3><ul>\n<li>command line: <code>cmake</code></li>\n<li>curse-based TUI: <code>ccmake</code></li>\n<li>QT-based GUI: <code>cmake-gui</code></li>\n</ul>\n<h3 id=\"Out-Of-Source-Build\"><a href=\"#Out-Of-Source-Build\" class=\"headerlink\" title=\"Out-Of-Source Build\"></a>Out-Of-Source Build</h3><p>將build資料和原始碼分離</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改 CMakeLists.txt</span></span><br><span class=\"line\">mkdir build # will generate build files in this folder</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake .. # the place that put CMakelists.txt</span><br><span class=\"line\"></span><br><span class=\"line\">cmake -G \"Unix Makefiles\" [CMakeList.txt path] # 指定生成平台</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>執行結束後，build資料夾會出現各項中間檔、makefile 以及執行檔</li>\n</ul>\n<p>優點</p>\n<ol>\n<li>可保持working directory的乾淨</li>\n<li>只要用新的資料夾，就可以產生多個不同的build，也可以隨時刪除</li>\n</ol>\n<h2 id=\"語法\"><a href=\"#語法\" class=\"headerlink\" title=\"語法\"></a>語法</h2><ul>\n<li>設定變數 <code>set(var hello)</code></li>\n<li>印出訊息 <code>message(${var})</code></li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span> (VERSION <span class=\"number\">2.6</span>) <span class=\"comment\"># minimum executable version of cmake</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(ex1) <span class=\"comment\"># project name</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(ex1 main.c) <span class=\"comment\"># build program ex1 from main.c</span></span><br></pre></td></tr></table></figure>\n\n<p>在不同的資料夾下建立執行檔</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> relative destination</span></span><br><span class=\"line\">cmake --help-variable CMAKE_INSTALL_PREFIX</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> At Install-time use DESTDIR mechanism (Unix Makefiles)</span></span><br><span class=\"line\">make DESTDIR=/tmp/testinstall install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMake語法\"><a href=\"#CMake語法\" class=\"headerlink\" title=\"CMake語法\"></a>CMake語法</h3><p>general purpose constructs: <code>set</code>, <code>unset</code>, <code>if</code>, <code>elseif</code>, <code>else</code>, <code>endif</code>, <code>foreach</code>, <code>while</code>, <code>break</code></p>\n<h3 id=\"CMake-變數\"><a href=\"#CMake-變數\" class=\"headerlink\" title=\"CMake 變數\"></a>CMake 變數</h3><p>變數不分大小寫，但我習慣性用大寫</p>\n<ul>\n<li><p>變數指定</p>\n<ul>\n<li>CMake 有許多預設變數，以改變基本的運作，用<code>cmake --help-variables-list</code>可以瀏覽</li>\n<li>在檔案內指定<ul>\n<li><code>set(CMAKE_INSTALL_PREFIX /home/eric/testinstall)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>平台相關變數</p>\n<ul>\n<li>作業系統<ul>\n<li><code>WIN32</code> True on windows systems, including win64.</li>\n<li><code>UNIX</code> True for UNIX and UNIX like operating systems.</li>\n<li><code>APPLE</code> True if running on Mac OSX.</li>\n<li><code>CYGWIN</code> True for cygwin.</li>\n</ul>\n</li>\n<li>編譯器<ul>\n<li><code>MSVC</code> True when using Microsoft Visual C</li>\n<li><code>GNU&lt;LANG&gt;</code> True if the compiler of this language is GNU</li>\n<li><code>MINGW</code> True if the compiler is MinGW</li>\n</ul>\n</li>\n<li>example<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">NOT</span> WIN32)</span><br><span class=\"line\"><span class=\"keyword\">option</span> (WITH GUESS NAME <span class=\"string\">\"Guess acronym name\"</span> <span class=\"keyword\">ON</span>)</span><br><span class=\"line\"><span class=\"keyword\">endif</span> (<span class=\"keyword\">NOT</span> WIN32)</span><br></pre></td></tr></table></figure></li>\n<li>找需要的package<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">find package ( LibXml2 )</span><br><span class=\"line\"><span class=\"keyword\">if</span> (LIBXML2 FOUND)</span><br><span class=\"line\">add definitions (−DHAVE XML <span class=\"variable\">$&#123;LIBXML2 DEFINITIONS &#125;</span>)</span><br><span class=\"line\">includedirectories( <span class=\"variable\">$&#123;LIBXML2 INCLUDE DIR &#125;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><code>XXXFOUND</code><pre><code>- Set to false, or undefined, if we haven’t found, or don’t want to use XXX</code></pre><ul>\n<li><code>XXX_INCLUDE_DIRS</code><ul>\n<li>The final set of include directories listed in one variable for use by client code</li>\n</ul>\n</li>\n<li><code>XXX_LIBRARIES</code><ul>\n<li>The libraries to link against to use XXX. These should include full paths</li>\n</ul>\n</li>\n<li><code>XXX_DEFINITIONS</code><ul>\n<li>Definitions to use when compiling code that uses XXX</li>\n</ul>\n</li>\n<li><code>XXX_EXECUTABLE</code><ul>\n<li>Where to find the XXX tool</li>\n</ul>\n</li>\n<li><code>XXX_LIBRARY_DIRS</code><ul>\n<li>Optionally, the final set of library directories listed in one variable for use by client code</li>\n</ul>\n</li>\n<li>to find an executable program<ul>\n<li><code>find_program</code></li>\n</ul>\n</li>\n<li>to find a library<ul>\n<li><code>find_library</code></li>\n</ul>\n</li>\n<li>to find any kind of file<ul>\n<li><code>find_file</code></li>\n</ul>\n</li>\n<li>to find a path where a file reside<ul>\n<li><code>find_path</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>file manipulation with file</p>\n<ul>\n<li><code>READ</code>, <code>WRITE</code>, <code>APPEND</code>, <code>RENAME</code>, <code>REMOVE</code>, <code>MAKE DIRECTORY</code></li>\n</ul>\n</li>\n<li><p>advanced files operations</p>\n<ul>\n<li><code>GLOB</code>, <code>GLOB RECURSE [file name in a path]</code>, <code>DOWNLOAD</code>, <code>UPLOAD</code></li>\n</ul>\n</li>\n<li><p>working with path</p>\n<ul>\n<li><code>file (TO CMAKE PATH /TO NATIVE PATH ...)</code>, get filename component</li>\n</ul>\n</li>\n<li><p>execute an external process (with stdout, stderr and return code retrieval): execute process</p>\n</li>\n<li><p>builtin list manipulation command</p>\n<ul>\n<li><code>LENGTH</code>, <code>GET</code>, <code>APPEND</code>, <code>FIND</code>, <code>APPEND</code>, <code>INSERT</code>, <code>REMOVE ITEM</code>, <code>REMOVE AT</code>, <code>REMOVE DUPLICATES REVERSE</code>, <code>SORT</code></li>\n</ul>\n</li>\n<li><p>string manipulation</p>\n<ul>\n<li>upper/lower case conversion, length, comparison, substring, regular expression match</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CMake-Application\"><a href=\"#CMake-Application\" class=\"headerlink\" title=\"CMake Application\"></a>CMake Application</h3><ul>\n<li><p>CPack</p>\n<ul>\n<li>CMake friend application</li>\n<li>used to easily package your software</li>\n<li>Package the resulting binaries with CPack</li>\n</ul>\n</li>\n<li><p>CTest</p>\n<ul>\n<li>make test</li>\n<li>runs systematic test with CTest and publish them with CDash</li>\n</ul>\n</li>\n<li><p>Wizard mode</p>\n<ul>\n<li>cmake -i, interactive equivalent of the Normal mode</li>\n</ul>\n</li>\n<li><p>Command mode</p>\n<ul>\n<li>cmake -E <command>, command line mode which offers basic command in a portable way</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"專案說明\"><a href=\"#專案說明\" class=\"headerlink\" title=\"專案說明\"></a>專案說明</h2><p>一個簡單的圍棋程式</p>\n<p>file tree</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── <span class=\"selector-tag\">CMakeLists</span><span class=\"selector-class\">.txt</span></span><br><span class=\"line\">├── *<span class=\"selector-class\">.h</span></span><br><span class=\"line\">├── *<span class=\"selector-class\">.cpp</span></span><br><span class=\"line\">├── <span class=\"selector-tag\">previous_version</span></span><br><span class=\"line\">│   ├── <span class=\"selector-tag\">CMakeLists</span><span class=\"selector-class\">.txt</span></span><br><span class=\"line\">│   ├── *<span class=\"selector-class\">.cpp</span></span><br><span class=\"line\">│   └── *<span class=\"selector-class\">.h</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">P?=binary</span><br><span class=\"line\">EXEC=execs/<span class=\"variable\">$(P)</span></span><br><span class=\"line\">OBJECTS=<span class=\"variable\">$(P)</span>.o *.o</span><br><span class=\"line\">CXXFLAGS=-pipe -std=c++11 -Wall -Wextra -Wpedantic -Wno-unknown-pragmas -g -O3 -march=native -fopenmp</span><br><span class=\"line\">LDFLAGS=-lpthread</span><br><span class=\"line\">CXX=g++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all: main</span></span><br><span class=\"line\"><span class=\"section\">parallel: main</span></span><br><span class=\"line\"><span class=\"section\">parallel: CXXFLAGS+=-fopenmp -DPARALLEL # add additional flags</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">previous:</span></span><br><span class=\"line\">    cd previous_version; make</span><br><span class=\"line\"><span class=\"section\">binary: <span class=\"variable\">$(OBJECTS)</span></span></span><br><span class=\"line\">\tg++ <span class=\"variable\">$(CXXFLAGS)</span> <span class=\"variable\">$(OBJECTS)</span> -flto -o <span class=\"variable\">$(EXEC)</span> <span class=\"variable\">$(LDFLAGS)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(P)</span>.o: *.h</span><br><span class=\"line\">\t<span class=\"variable\">$(CXX)</span> <span class=\"variable\">$(CXXFLAGS)</span> main.cpp -c -o <span class=\"variable\">$(P)</span>.o <span class=\"variable\">$(LDFLAGS)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># object files and it's dependency</span></span><br><span class=\"line\"><span class=\"section\">board.o: mc_node.h liberty.h board.h board_constants.h ladder.h database.h strategy.h gameSetting.h</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm -rf *.o</span><br><span class=\"line\"><span class=\"section\">previous_clean:</span></span><br><span class=\"line\">\tcd previous_version; make clean</span><br></pre></td></tr></table></figure>\n\n<p>CMakeLists.txt in root directly</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">2.6</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(MCTS_Go9x9)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set default output file name</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span>(BINARYNAME <span class=\"string\">\"binary\"</span> CACHE <span class=\"keyword\">STRING</span> <span class=\"string\">\"default binary file's name = binary\"</span> FORCE)</span><br><span class=\"line\"><span class=\"comment\"># set output directory</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span>/execs</span><br><span class=\"line\"><span class=\"comment\"># compile parameters</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_COMPILER g++)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(<span class=\"string\">\"compiler: $&#123;CMAKE_CXX_COMPILER&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_FLAGS <span class=\"string\">\"-pipe -std=c++11 -Wall -Wextra -Wpedantic -Wno-unknown-pragmas -g -O3 -march=native -fopenmp\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(<span class=\"string\">\"cxxflags: $&#123;CMAKE_CXX_FLAGS&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_EXE_LINKER_FLAGS <span class=\"string\">\"-flto\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(THREADS_PREFER_PTHREAD_FLAG <span class=\"keyword\">ON</span>) <span class=\"comment\"># pthread</span></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(Threads REQUIRED) <span class=\"comment\"># pthread</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(SRC_FILES *.cpp)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(<span class=\"string\">\"source files: $&#123;SRC_FILES&#125;\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># each executable is a target in GNU makefile</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(<span class=\"variable\">$&#123;BINARYNAME&#125;</span> <span class=\"variable\">$&#123;SRC_FILES&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(<span class=\"variable\">$&#123;BINARYNAME&#125;</span> Threads::Threads) <span class=\"comment\"># pthread</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># parallel</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(parallel <span class=\"variable\">$&#123;SRC_FILES&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">target_compile_options</span>(parallel PUBLIC -fopenmp -DPARALLEL) <span class=\"comment\"># add additional compile parameters</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># we have another CMakeLists.txt in this directory, still follow the same method to generate</span></span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(previous_version)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Makefile-和-CMake-的語法比較\"><a href=\"#Makefile-和-CMake-的語法比較\" class=\"headerlink\" title=\"Makefile 和 CMake 的語法比較\"></a>Makefile 和 CMake 的語法比較</h2><table>\n<thead>\n<tr>\n<th>makefile</th>\n<th>cmake</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>COMPILE_FLAGS = -c -m32 -O3 -fPIC -w -DSOMETHING -Wall -I src/sdk/core</code></td>\n<td><code>SET( COMPILE_FLAGS &quot;-c -m32 -O3 -fPIC -w DSOMETHING -Wall&quot; ) INCLUDE_DIRECTORIES( src/sdk/core )</code></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Makefile</span></span><br><span class=\"line\"><span class=\"keyword\">ifdef</span> STATIC</span><br><span class=\"line\">  <span class=\"comment\"># Do something</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"comment\"># Do something elseendif</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CMake</span></span><br><span class=\"line\"><span class=\"keyword\">OPTION</span>(STATIC <span class=\"string\">\"Brief description\"</span> <span class=\"keyword\">ON</span>)</span><br><span class=\"line\"><span class=\"keyword\">IF</span>( STATIC )</span><br><span class=\"line\">  <span class=\"comment\"># Do something</span></span><br><span class=\"line\"><span class=\"keyword\">ELSE</span>()</span><br><span class=\"line\">  <span class=\"comment\"># Do something else</span></span><br><span class=\"line\"><span class=\"keyword\">ENDIF</span>()</span><br></pre></td></tr></table></figure>\n\n<p>using libraries<br>call find_package with the name of your library, which will invoke a library search script from your cmake module path. This script (which is also written in CMake) will attempt to detect the location of the library’s header and lib files and store them in a couple of CMake variables that can then be passed to the according CMake commands like include_directories and target_link_libraries.</p>\n<p>There are two problems with this approach: First, you need a search script. Fortunately, CMake ships with search scripts for Pthreads, Boost and a couple of others, but if you are using a more exotic library, you might have to write the search script yourself, which is kind of an arcane experience at first…</p>\n<p> 並不會刪除自身產出的快取和中間檔</p>\n<p>The following Makefile builds an executable named prog from the sources prog1.c, prog2.c, prog3.c and main.c. prog is linked against libmystatlib.a and libmydynlib.so which are both also built from source. Additionally, prog uses the library libstuff.a in stuff/lib and its header in stuff/include. The Makefile by default builds a release target, but offers also a debug target:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Makefile</span></span><br><span class=\"line\">CC = gcc</span><br><span class=\"line\">CPP = g++</span><br><span class=\"line\">RANLIB = ar rcs</span><br><span class=\"line\">RELEASE = -c -O3</span><br><span class=\"line\">DEBUG = -c -g -D_DEBUG</span><br><span class=\"line\">INCDIR = -I./stuff/<span class=\"keyword\">include</span></span><br><span class=\"line\">LIBDIR = -L./stuff/lib -L.</span><br><span class=\"line\">LIBS = -lstuff -lmystatlib -lmydynlib</span><br><span class=\"line\">CFLAGS = <span class=\"variable\">$(RELEASE)</span></span><br><span class=\"line\"></span><br><span class=\"line\">PROGOBJS = prog1.o prog2.o prog3.o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">prog: main.o <span class=\"variable\">$(PROGOBJS)</span> mystatlib mydynlib</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> main.o <span class=\"variable\">$(PROGOBJS)</span> <span class=\"variable\">$(LIBDIR)</span> <span class=\"variable\">$(LIBS)</span> -o prog</span><br><span class=\"line\"><span class=\"section\">debug: CFLAGS=<span class=\"variable\">$(DEBUG)</span></span></span><br><span class=\"line\"><span class=\"section\">debug: prog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">mystatlib: mystatlib.o</span></span><br><span class=\"line\">    <span class=\"variable\">$(RANLIB)</span> libmystatlib.a mystatlib.o</span><br><span class=\"line\"><span class=\"section\">mydynlib: mydynlib.o</span></span><br><span class=\"line\">    <span class=\"variable\">$(CPP)</span> -shared mydynlib.o -o libmydynlib.so</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">%.o: %.c</span></span><br><span class=\"line\">    <span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> <span class=\"variable\">$(INCDIR)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"section\">%.o: %.cpp</span></span><br><span class=\"line\">    <span class=\"variable\">$(CPP)</span> <span class=\"variable\">$(CFLAGS)</span> <span class=\"variable\">$(INCDIR)</span> -fPIC  <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\">Here is a CMakeLists.txtthat does (almost) exactly the same, with some comments to underline the similarities to the Makefile:</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#CMakeLists.txt</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">2.8</span>)                    <span class=\"comment\"># stuff not directly</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(example)                                       <span class=\"comment\"># related to building</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span>/stuff/<span class=\"keyword\">include</span>) <span class=\"comment\"># -I flags for compiler</span></span><br><span class=\"line\"><span class=\"keyword\">link_directories</span>(<span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span>/stuff/lib)        <span class=\"comment\"># -L flags for linker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(PROGSRC prog1.c prog2.c prog3.c)                   <span class=\"comment\"># define variable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(prog main.c <span class=\"variable\">$&#123;PROGSRC&#125;</span>)                 <span class=\"comment\"># define executable target prog, specify sources</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(prog mystatlib mydynlib stuff)   <span class=\"comment\"># -l flags for linking prog target</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(mystatlib STATIC mystatlib.c)              <span class=\"comment\"># define static library target mystatlib, specify sources</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(mydynlib SHARED mydynlib.cpp)              <span class=\"comment\"># define shared library target mydynlib, specify sources</span></span><br><span class=\"line\"><span class=\"comment\">#extra flags for linking mydynlib</span></span><br><span class=\"line\"><span class=\"keyword\">set_target_properties</span>(mydynlib PROPERTIES POSITION_INDEPENDENT_CODE <span class=\"keyword\">TRUE</span>)</span><br><span class=\"line\"><span class=\"comment\">#alternatively:</span></span><br><span class=\"line\"><span class=\"comment\">#set_target_properties(mydynlib PROPERTIES COMPILE_FLAGS \"-fPIC\")</span></span><br></pre></td></tr></table></figure>\n<p>In this simple example, the most important differences are:</p>\n<p>CMake recognizes which compilers to use for which kind of source. Also, it invokes the right sequence of commands for each type of target. Therefore, there is no explicit specification of commands like $(CC)…, $(RANLIB)… and so on.<br>All usual compiler/linker flags dealing with inclusion of header files, libraries, etc. are replaced by platform independent / build system independent commands.<br>Debugging flags are included by either setting the variable CMAKE_BUILD_TYPE to “Debug”, or by passing it to CMake when invoking the program: cmake -DCMAKE_BUILD_TYPE:STRING=Debug.<br>CMake offers also the platform independent inclusion of the ‘-fPIC’ flag (via the POSITION_INDEPENDENT_CODE property) and many others. Still, more obscure settings can be implemented by hand in CMake just as well as in a Makefile (by using COMPILE_FLAGS and similar properties). Of course CMake really starts to shine when third party libraries (like OpenGL) are included in a portable manner.<br>The build process has one step if you use a Makefile, namely typing<br>make at the command line. For CMake, there are two steps: First, you need to setup your build environment (either by typing cmake <source_dir> in your build directory or by running some GUI client). This creates a Makefile or something equivalent, depending on the build system of your choice (e.g. make on Unixes or VC++ or MinGW + Msys on Windows). The build system can be passed to CMake as a parameter; however, CMake makes reasonable default choices depending on your system configuration. Second, you perform the actual build in the selected build system.<br>Sources and build instructions are available at <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Job2VsemVsL21ha2VfY21ha2U=\">https://github.com/rhoelzel/make_cmake<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h1 id=\"設定變數範例\"><a href=\"#設定變數範例\" class=\"headerlink\" title=\"設定變數範例\"></a>設定變數範例</h1><pre><code>set(MYLIBPATH &quot;C:\\\\Documents and\n        Settings\\\\Jing\\\\Desktop\\\\opencv_bin\\\\lib\\\\release\\\\&quot;)</code></pre><h1 id=\"使用變數範例\"><a href=\"#使用變數範例\" class=\"headerlink\" title=\"使用變數範例\"></a>使用變數範例</h1><pre><code>target_link_libraries(${name} ${MYLIBPATH}cv200.lib)</code></pre><h1 id=\"建立-macro-範例\"><a href=\"#建立-macro-範例\" class=\"headerlink\" title=\"建立 macro 範例\"></a>建立 macro 範例</h1><pre><code>MACRO(MY_DEFINE_EXAMPLE name srcs)\n      add_executable(${name} ${srcs})\nENDMACRO(MY_DEFINE_EXAMPLE)</code></pre><h1 id=\"使用-macro-範例\"><a href=\"#使用-macro-範例\" class=\"headerlink\" title=\"使用 macro 範例\"></a>使用 macro 範例</h1><pre><code>MY_DEFINE_EXAMPLE(demo     demo.cpp)</code></pre><h1 id=\"存取環境變數的範例\"><a href=\"#存取環境變數的範例\" class=\"headerlink\" title=\"存取環境變數的範例\"></a>存取環境變數的範例</h1><pre><code>MESSAGE(&quot;$ENV{PATH}&quot;)</code></pre><h1 id=\"加入-Post-Build-的範例\"><a href=\"#加入-Post-Build-的範例\" class=\"headerlink\" title=\"加入 Post Build 的範例\"></a>加入 Post Build 的範例</h1><pre><code>add_custom_command(\n        TARGET ${MyPluginTarget}\n        POST_BUILD\n        COMMAND copy\n                       ${CMAKE_CFG_INTDIR}\\\\${MyPluginTarget}.dll\n                       &quot;C:\\\\Program Files\\\\Mozilla Firefox\\\\\n                         plugins\\\\${MyPluginTarget}.dll&quot;\n    )</code></pre><p>若你的執行檔是 Windows 程式, 請加入 Win32<br><code>add_executable(demo WIN32 ${SOURCE})</code></p>\n<h2 id=\"MFC-設定\"><a href=\"#MFC-設定\" class=\"headerlink\" title=\"MFC 設定\"></a>MFC 設定</h2><figure class=\"highlight sqf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_MFC_FLAG <span class=\"number\">2</span>)</span><br><span class=\"line\">set_target_properties(MyApp      PROPERTIES</span><br><span class=\"line\">COMPILE_DEFINITIONS</span><br><span class=\"line\"><span class=\"variable\">_AFXDLL</span>, <span class=\"variable\">_UNICODE</span>, UNICODE,</span><br><span class=\"line\"><span class=\"variable\">_BIND_TO_CURRENT_CRT_VERSION</span>,</span><br><span class=\"line\"><span class=\"variable\">_BIND_TO_CURRENT_MFC_VERSION</span></span><br><span class=\"line\">LINK_FLAGS</span><br><span class=\"line\"><span class=\"string\">\" /ENTRY:\\\"</span>wWinMainCRTStartup\\<span class=\"string\">\"    \"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>add_executable(demo WIN32 ${SOURCE})</p>\n<h1 id=\"設定-source-code-群組範例\"><a href=\"#設定-source-code-群組範例\" class=\"headerlink\" title=\"設定 source code 群組範例\"></a>設定 source code 群組範例</h1><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ex1:</span></span><br><span class=\"line\"><span class=\"keyword\">file</span>(GLOB_RECURSE myRESOURCE_FILE 「*.def」 「*.rc」)</span><br><span class=\"line\"><span class=\"keyword\">source_group</span>(Resource FILES <span class=\"variable\">$&#123;myRESOURCE_FILE &#125;</span>)</span><br><span class=\"line\"><span class=\"comment\"># ex2:</span></span><br><span class=\"line\"><span class=\"keyword\">source_group</span>(abc_group REGULAR_EXPRESSION <span class=\"string\">\"abc.*\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">source_group</span>(<span class=\"number\">123</span>_group REGULAR_EXPRESSION <span class=\"string\">\"123.*\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(SOURCE abc.cpp abc.h <span class=\"number\">123</span>.cpp <span class=\"number\">123</span>.h abc.rc main.cpp main.h</span><br><span class=\"line\">resource.h stdafx.cpp  stdafx.h</span><br><span class=\"line\">./res/<span class=\"number\">123</span>.ico ./res/<span class=\"number\">123</span>.rc2)</span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(demo WIN32 <span class=\"variable\">$&#123;SOURCE&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"建立-dll-範例\"><a href=\"#建立-dll-範例\" class=\"headerlink\" title=\"建立 dll 範例\"></a>建立 dll 範例</h1><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_library</span>( <span class=\"keyword\">target</span> SHARED a.c b.c);</span><br></pre></td></tr></table></figure>\n<p>#console 與 windows (/SUBSYSTEM:CONSOLE or /SUBSYSTEM:WINDOWS)<br>a. 如果你的程式是 Windows.<br>=&gt; 則 add_executable(demo WIN32 ${SOURCE})<br>b. 如果是 console, 則<br>=&gt; 則 add_executable(demo ${SOURCE})</p>\n<p>好用的變數 (more)<br><code>PROJECT_SOURCE_DIR</code>:  包含 project 命令的 CMakeFile.txt 完整路徑. (ex: c:\\abc)</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(PROJECT_HOME <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>\\\\..\\\\)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI3NDU1OTYzL2Fuc3dlci8zNjcyMjk5Mg==\">make makefile cmake qmake都是什麼，有什麼區別？-玟清的回答-知乎<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnNpbXBseXBhdHJpY2suY29tL3Bvc3RzLzIwMTUvMDYtMTktY21ha2Utbm90ZXMv\">CMake筆記<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1RoZUVyay9DTWFrZS10dXRvcmlhbA==\">Eric Noulard - CMake tutorial<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpYm9va3Mub3JnL3dpa2kvQ01ha2VfJUU1JTg1JUE1JUU5JTk2JTgw\">CMake 入門 - 維基教科書，自由的教學讀本<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDg4MjAzMC9jbWFrZS12cy1tYWtlLXNhbXBsZS1jb2Rlcw==\">stackoverflow - Cmake vs make sample codes?<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDA4NTk0NS9jbWFrZS1jZmxhZ3MtY3h4ZmxhZ3MtbW9kaWZpY2F0aW9u\">stackoverflow - cmake CFLAGS CXXFLAGS modification<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY2NTA4MjUvY29udmVydGluZy1vbGQtbWFrZWZpbGUtdG8tY21ha2U=\">stackoverflow - Converting old makefile to CMake<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTk4NTgzOS9jcmVhdGluZy1jbWFrZWxpc3RzLWZpbGUtZnJvbS1leGlzdGluZy1tYWtlZmlsZQ==\">stackoverflow - Creating CMakeLists file from existing Makefile<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "CMake",
                "Makefile",
                "Linux"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/gcc-usage/",
            "url": "http://gitqwerty777.github.io/gcc-usage/",
            "title": "gcc參數介紹",
            "date_published": "2015-02-22T17:01:01.000Z",
            "content_html": "<p>假設已經知道編譯流程<br>[介紹]<br>gcc and g++分別是gnu的c &amp; c++編譯器 gcc/g++在執行編譯工作的時候，總共需要4步<br>1.預處理,生成.i的文件[預處理器cpp]<br>2.將預處理後的文件不轉換成彙編語言,生成文件.s[編譯器egcs]<br>3.有彙編變為目標代碼(機器代碼)生成.o的文件[彙編器as]<br>4.連接目標代碼,生成可執行程序[鏈接器ld]</p>\n<a id=\"more\"></a>\n\n<h2 id=\"常用參數\"><a href=\"#常用參數\" class=\"headerlink\" title=\"常用參數\"></a>常用參數</h2><table>\n<thead>\n<tr>\n<th>參數</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>編譯但不連結，產生.o檔</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>輸出組譯碼</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>顯示預處理(define, macro)的結果</td>\n</tr>\n<tr>\n<td>-o filename</td>\n<td>指定輸出檔名</td>\n</tr>\n<tr>\n<td>-ansi</td>\n<td>只支持 ANSI 標準的 C 語法。這一選項將禁止 GNU C 的某些特色 例如 asm 或 typeof 關鍵詞。</td>\n</tr>\n<tr>\n<td>-Dmacro</td>\n<td>定義指定巨集為有效</td>\n</tr>\n<tr>\n<td>-Dmarco=defn</td>\n<td>定義指定巨集為defn</td>\n</tr>\n<tr>\n<td>-Wa,option</td>\n<td>將選項(option)傳給組譯器</td>\n</tr>\n<tr>\n<td>-wl,option</td>\n<td>將選項(option)傳給連結器</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>增加include header檔案的搜尋路徑</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>增加library檔案的搜尋路徑</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>指定連結的函式庫</td>\n</tr>\n<tr>\n<td>-Wall</td>\n<td>顯示所有的警告訊息</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>編入除錯資訊(使用GDB除錯時用)</td>\n</tr>\n</tbody></table>\n<p>-IDIRECTORY 指定額外的頭文件搜索路徑DIRECTORY。<br>-LDIRECTORY 指定額外的函數庫搜索路徑DIRECTORY。<br>-lLIBRARY 連接時搜索指定的函數庫LIBRARY。<br>-m486 針對 486 進行代碼優化。<br>-shared 生成共享目標文件。通常用在建立共享庫時。<br>-static 禁止使用共享連接。<br>-UMACRO 取消對 MACRO 宏的定義。<br>-w 不生成任何警告信息。<br>-Wall 生成所有警告信息。</p>\n<h2 id=\"最佳化\"><a href=\"#最佳化\" class=\"headerlink\" title=\"最佳化\"></a>最佳化</h2><p>-Os, -O0, -O1, -O2, -O3,</p>\n<p>-O0表示沒有優化,-O1為缺省值，-O3優化級別最高</p>\n<h2 id=\"使用範例\"><a href=\"#使用範例\" class=\"headerlink\" title=\"使用範例\"></a>使用範例</h2><p>與函式庫連結 :<br>另一個常用的選項是 -l, 它以一種特殊方式來指定函式庫. 首先它必須放在命令的最後面, 也就是原始檔檔名之後, 而所有其他的選項是指定在檔名之前. 底下是一個典型的命令 ; 因為輸入檔是目的檔, 所以命令僅僅啟動連結器 :<br>%gcc -o plot main.o plot_line.o -lm</p>\n<p>-lm 選項指定使用數學函式庫. 當你指定 -lname, 系統會到存放標準函式庫的目錄中 (通常位於 /usr/lib) 中去尋找 libname.a 檔案. 所以你所尋找的數學函式庫應該是 /usr/lib/libm.a . 和表頭檔一樣, 函式庫有時也放在非標準路徑的目錄下. 你這時必須以 -L 選項來告訴 gcc 到哪裡去找這函式庫, 例如 :<br>%gcc -o -L/src/local/lib main.o plot_line.o -lm</p>\n<p>它告訴gcc 首先到 /src/local/lib 去找函式庫, 然後才是標準路徑下的函式庫. 假如某人把自己版本的函式庫放到 /src/local/lib 下, 在使用順序上, 他的這個版本將超過 /usr/lib 下的同名函式庫</p>\n<p>///==================另外還有個Os選項==========================<br><span class=\"exturl\" data-url=\"aHR0cDovL2hpLmJhaWR1LmNvbS9haF9fZnUvYmxvZy9pdGVtL2NjOWZkMTliODAxOTQ4YmRjOWVhZjRiMy5odG1s\">http://hi.baidu.com/ah__fu/blog/item/cc9fd19b801948bdc9eaf4b3.html<i class=\"fa fa-external-link-alt\"></i></span><br>在研究編譯驅動的makefile的時候，發現GCC的命令行裡面有一個-Os的優化選項。<br>    遍查GCC文檔，發現了-O0, -O1, -O2, -O3，就是沒有發現-Os。<br>    祭出GOOGLE大法搜了一下，終於發現這篇文章說明了-Os的作用：<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5saW51eGpvdXJuYWwuY29tL2FydGljbGUvNzI2OQ==\">http://www.linuxjournal.com/article/7269<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>   原來-Os相當於-O2.5。是使用了所有-O2的優化選項，但又不縮減代碼尺寸的方法。<br>   詳細的說明如下：<br>Level 2.5 (-Os)<br>The special optimization level (-Os or size) enables all -O2 optimizations that do not increase code size; it puts the emphasis on size over speed. This includes all second-level optimizations, except for the alignment optimizations. The alignment optimizations skip space to align functions, loops, jumps and labels to an address that is a multiple of a power of two, in an architecture-dependent manner. Skipping to these boundaries can increase performance as well as the size of the resulting code and data spaces; therefore, these particular optimizations are disabled. The size optimization level is enabled as:<br>gcc -Os -o test test.c<br>In gcc 3.2.2, reorder-blocks is enabled at -Os, but in gcc 3.3.2 reorder-blocks is disabled.</p>\n<p>==============================<br>補充：在GCC的官方文檔裡又發現了關於-Os的說明：<br><span class=\"exturl\" data-url=\"aHR0cDovL2djYy5nbnUub3JnL29ubGluZWRvY3MvZ2NjLTMuNC42L2djYy9PcHRpbWl6ZS1PcHRpb25zLmh0bWwjT3B0aW1pemUtT3B0aW9ucw==\">http://gcc.gnu.org/onlinedocs/gcc-3.4.6/gcc/Optimize-Options.html#Optimize-Options<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>//=============================================<br><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaXNvbjgxL2FyY2hpdmUvMjAwOS8wNS8wNy80MTU4NTc2LmFzcHg=\">http://blog.csdn.net/ison81/archive/2009/05/07/4158576.aspx<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>backtrace與fomit-frame-pointer選項</p>\n<p>事實上gcc的所有級別的優化（-O, -O2, -O3等）都會打開-fomit-frame-pointer，該選項的功能是函數調用時不保存frame指針，在ARM上就是fp，故我們無法按照APCS中的約定來回溯調用棧。但是GDB中仍然可以使用bt命令看到調用棧，為什麼？得知GDB v6之後都是支持DWARF2的，也就意味著它可以不依賴fp來回溯調用棧（詳見<span class=\"exturl\" data-url=\"aHR0cDovL2djYy5nbnUub3JnL21sL2djYy8yMDAzLTEwL21zZzAwMzIyLmh0bWzvvInjgII=\">http://gcc.gnu.org/ml/gcc/2003-10/msg00322.html）。<i class=\"fa fa-external-link-alt\"></i></span><br>看來想在代碼中動態顯示調用棧而又不希望使用GDB的朋友，只能在編譯時關掉-fomit-frame-pointer了。</p>\n<p>//==================gcc參數大全：===========================</p>\n<p>[參數詳解]<br>-x language filename<br>　設定文件所使用的語言,使後綴名無效,對以後的多個有效.也就是根據約定C語言的後綴名稱是.c的，而C++的後綴名是.C或者.cpp,如果你很個性，決定你的C代碼文件的後綴名是.pig 哈哈，那你就要用這個參數,這個參數對他後面的文件名都起作用，除非到了下一個參數的使用。<br>　　可以使用的參數嗎有下面的這些<br>　　<code>c&#39;,</code>objective-c’, <code>c-header&#39;,</code>c++’, <code>cpp-output&#39;,</code>assembler’, and `assembler-with-cpp’.<br>　　看到英文，應該可以理解的。<br>　　例子用法:<br>　　gcc -x c hello.pig<br>　　<br>-x none filename<br>　　關掉上一個選項，也就是讓gcc根據文件名後綴，自動識別文件類型<br>　　例子用法:<br>　　gcc -x c hello.pig -x none hello2.c<br>　　<br>-c<br>　　只激活預處理,編譯,和彙編,也就是他只把程序做成obj文件<br>　　例子用法:<br>　　gcc -c hello.c<br>　　他將生成.o的obj文件<br>-S<br>　　只激活預處理和編譯，就是指把文件編譯成為彙編代碼。<br>　　例子用法<br>　　gcc -S hello.c<br>　　他將生成.s的彙編代碼，你可以用文本編輯器察看<br>-E<br>　　只激活預處理,這個不生成文件,你需要把它重定向到一個輸出文件裡面.<br>　　例子用法:<br>　　gcc -E hello.c &gt; pianoapan.txt<br>　　gcc -E hello.c | more<br>　　慢慢看吧,一個hello word 也要與處理成800行的代碼<br>-o<br>　　制定目標名稱,缺省的時候,gcc 編譯出來的文件是a.out,很難聽,如果你和我有同感，改掉它,哈哈<br>　　例子用法<br>　　gcc -o hello.exe hello.c (哦,windows用習慣了)<br>　　gcc -o hello.asm -S hello.c<br>-pipe<br>　　使用管道代替編譯中臨時文件,在使用非gnu彙編工具的時候,可能有些問題<br>　　gcc -pipe -o hello.exe hello.c<br>-ansi<br>　　關閉gnu c中與ansi c不兼容的特性,激活ansi c的專有特性(包括禁止一些asm inline typeof關鍵字,以及UNIX,vax等預處理宏,<br>-fno-asm<br>　　此選項實現ansi選項的功能的一部分，它禁止將asm,inline和typeof用作關鍵字。 　　　　<br>-fno-strict-prototype<br>　　只對g++起作用,使用這個選項,g++將對不帶參數的函數,都認為是沒有顯式的對參數的個數和類型說明,而不是沒有參數.<br>　　而gcc無論是否使用這個參數,都將對沒有帶參數的函數,認為城沒有顯式說明的類型<br>　　<br>-fthis-is-varialble<br>　　就是向傳統c++看齊,可以使用this當一般變量使用.<br>　　<br>-fcond-mismatch<br>　　允許條件表達式的第二和第三參數類型不匹配,表達式的值將為void類型<br>　　<br>-funsigned-char<br>-fno-signed-char<br>-fsigned-char<br>-fno-unsigned-char<br>　　這四個參數是對char類型進行設置,決定將char類型設置成unsigned char(前兩個參數)或者 signed char(後兩個參數)<br>　　<br>-include file<br>　　包含某個代碼,簡單來說,就是便以某個文件,需要另一個文件的時候,就可以用它設定,功能就相當於在代碼中使用#include<filename><br>　　例子用法:<br>　　gcc hello.c -include /root/pianopan.h<br>　　<br>-imacros file<br>　　將file文件的宏,擴展到gcc/g++的輸入文件,宏定義本身並不出現在輸入文件中<br>　　<br>-Dmacro<br>　　相當於C語言中的#define macro<br>　　<br>-Dmacro=defn<br>　　相當於C語言中的#define macro=defn<br>　　<br>-Umacro<br>　　相當於C語言中的#undef macro<br>-undef<br>　　取消對任何非標準宏的定義<br>　　<br>-Idir<br>　　在你是用#include”file”的時候,gcc/g++會先在當前目錄查找你所制定的頭文件,如果沒有找到,他回到缺省的頭文件目錄找,如果使用-I制定了目錄,他<br>　　回先在你所制定的目錄查找,然後再按常規的順序去找.<br>　　對於#include<file>,gcc/g++會到-I制定的目錄查找,查找不到,然後將到系統的缺省的頭文件目錄查找<br>　　<br>-I-<br>　　就是取消前一個參數的功能,所以一般在-Idir之後使用<br>　　<br>-idirafter dir<br>　　在-I的目錄裡面查找失敗,講到這個目錄裡面查找.<br>　　<br>-iprefix prefix<br>-iwithprefix dir<br>　　一般一起使用,當-I的目錄查找失敗,會到prefix+dir下查找<br>　　<br>-nostdinc<br>　　使編譯器不再系統缺省的頭文件目錄裡面找頭文件,一般和-I聯合使用,明確限定頭文件的位置<br>　　<br>-nostdin C++<br>　　規定不在g++指定的標準路經中搜索,但仍在其他路徑中搜索,.此選項在創libg++庫使用<br>　　<br>-C<br>　　在預處理的時候,不刪除註釋信息,一般和-E使用,有時候分析程序，用這個很方便的<br>　　<br>-M<br>　　生成文件關聯的信息。包含目標文件所依賴的所有源代碼你可以用gcc -M hello.c來測試一下，很簡單。<br>　　<br>-MM<br>　　和上面的那個一樣，但是它將忽略由#include<file>造成的依賴關係。<br>　　<br>-MD<br>　　和-M相同，但是輸出將導入到.d的文件裡面<br>　　<br>-MMD<br>　　和-MM相同，但是輸出將導入到.d的文件裡面<br>　　<br>-Wa,option<br>　　此選項傳遞option給彙編程序;如果option中間有逗號,就將option分成多個選項,然後傳遞給會彙編程序<br>　　<br>-Wl.option<br>　　此選項傳遞option給連接程序;如果option中間有逗號,就將option分成多個選項,然後傳遞給會連接程序.<br>-llibrary<br>　　制定編譯的時候使用的庫<br>　　例子用法<br>　　gcc -lcurses hello.c<br>　　使用ncurses庫編譯程序<br>　　<br>-Ldir<br>　　制定編譯的時候，搜索庫的路徑。比如你自己的庫，可以用它制定目錄，不然<br>　　編譯器將只在標準庫的目錄找。這個dir就是目錄的名稱。<br>　　<br>-O0<br>-O1<br>-O2<br>-O3<br>　　編譯器的優化選項的4個級別，-O0表示沒有優化,-O1為缺省值，-O3優化級別最高　　 　　<br>-g<br>　　只是編譯器，在編譯的時候，產生調試信息。<br>　　<br>-gstabs<br>　　此選項以stabs格式聲稱調試信息,但是不包括gdb調試信息.<br>　　<br>-gstabs+<br>　　此選項以stabs格式聲稱調試信息,並且包含僅供gdb使用的額外調試信息.<br>　　<br>-ggdb<br>　　此選項將儘可能的生成gdb的可以使用的調試信息.<br>-static<br>　　此選項將禁止使用動態庫，所以，編譯出來的東西，一般都很大，也不需要什麼<br>動態連接庫，就可以運行.<br>-share<br>　　此選項將儘量使用動態庫，所以生成文件比較小，但是需要系統由動態庫.<br>-traditional<br>　　試圖讓編譯器支持傳統的C語言特性</p>\n<p>[參考資料]<br>-Linux/UNIX高級編程<br>　　中科紅旗軟件技術有限公司編著.清華大學出版社出版<br>-Gcc man page \n　　 </p>\n<h2 id=\"其他編譯器\"><a href=\"#其他編譯器\" class=\"headerlink\" title=\"其他編譯器\"></a>其他編譯器</h2><p>Clang</p>\n<p>編譯速度更快、編譯產出更小、出錯提示更友好。尤其是在比較極端的情況下。<br>最後一點，其他同學也有講到，就是Clang採用的是BSD協議。這是蘋果資助LLVM、FreeBSD淘汰GCC換用Clang的一個重要原因。</p>\n<p>從代碼上說，clang結構更簡單。因為clang只需要完成詞法和語法分析，代碼優化和機器代碼的生成工作由llvm完成。所以和全部由自己包下的gcc比起來，clang可以更專注地做好一件事。<br>這種結構也使clang可以被單獨拿出來用在其他的程序裡。比如vim的clang_complete插件就是利用clang進行語法分析後給出精確的自動補全和語法錯誤</p>\n<p>llvm是一個底層虛擬機平台，提供了經過最佳化的IF代碼，也就是有個中間層，在這個中間層可以做很多的事情，比如優化和提供給編譯器更多的信息，理論上可以支持幾乎任何編程語言。llvm默認的前端是clang，當然也可以用gcc做前端。<br>llvm用c++寫的，模塊化做的很好，因此可以很好的和clang，gcc等等更多的東西合作，能為ide提供更全的有用信息。而gcc則包含的比較全面，整一個是一個宏結構，沒有模塊化設計，用c寫的，對ide也不太友好(實際上linux社區裡似乎對ide一直不感冒)。不過c++版的gcc正在重寫中，為了與llvm/clang更好的競爭，而且gcc從5.0開始打算進行模塊化設計，所以，以後gcc內部可能會分出很多部分。<br>就現在來看，gcc大體等同於llvm+clang所提供的功能。<br>很多人特別羨慕clang那強大的錯誤診斷信息，其實gcc4.8部分信息診斷能力已經超過它了，比它更準確，所以競爭真的很好，我們可以用到好的東西了。gcc目前的問題就是缺乏模塊化設計，這是暫時落後於llvm的地方。<br>freebsd不用gcc是因為gpl協議，llvm/clang的協議更加自由，但llvm/clang目前的兼容性和參數優化等等方面和gcc還有不小差距，雖然編譯後的體積更小了(架構領先優勢)，但在性能優化方面相比gcc還有很多事情要做。</p>\n<p>======<br>Several of the -f code generation options are interesting:</p>\n<p>The -ftrapv function will cause the program to abort on signed integer overflow (formally “undefined behaviour” in C).<br>-fverbose-asm is useful if you’re compiling with -S to examine the assembly output - it adds some informative comments.<br>-finstrument-functions adds code to call user-supplied profiling functions at every function entry and exit point.<br><span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMzc1Njk3L3VzZWZ1bC1nY2MtZmxhZ3MtZm9yLWM=\">http://stackoverflow.com/questions/3375697/useful-gcc-flags-for-c<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>===============================</p>\n<h3 id=\"pkg-config-的功能與用法\"><a href=\"#pkg-config-的功能與用法\" class=\"headerlink\" title=\"pkg-config 的功能與用法\"></a>pkg-config 的功能與用法</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL2NhbGFtYXJ5c2hvcC5ibG9nc3BvdC5jb20vMjAxMS8xMS9wa2ctY29uZmlnLmh0bWw=\">http://calamaryshop.blogspot.com/2011/11/pkg-config.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>當開發C程式時經常使會用到許多系統已安裝的library所提供的function，來加速對程式的開發。在程式中會將含有這些library提供的function宣告的header file加到程式中，但最頭痛的是在compile程式時加上額外的設定來告訴編譯器該去系統中的何處找尋所要使用的header file以及所使用的library file被安裝在何處。所以Linux系統上有個非常好用的工具pkg-config可以查詢library的header file以及library的所在位置及資訊，以及在編譯程式時該使用的編譯參數為何。</p>\n<p>這個程式主要讀取系統中位於 /usr/lib/pkgconfig 目錄或是環境變數 PKG_CONFIG_PATH 所設定的路徑中的副檔名為 .pc 的檔案，這些檔案包含系統安裝的library的相關資訊，包括：安裝的目錄、程式編譯的參數等等。<br>使用方法:<br>pkg-config –cflags library-name-with-version 就可以得到編譯程式時 pre-processing 動作必須加上的參數設定。<br>執行 pkg-config –cflags glib-2.0，其結果為-I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include。<br>pkg-config –libs library-name-with-version就可以得到 linking時所必須傳給編譯器的參數。<br>執行 pkg-config –libs glib-2.0 得到-lglib-2.0。<br>另外，我們還可以利用 pkg-config 來簡化 Makefile 的撰寫。<br>在Makefile中，原來寫在編譯器之後的參數，改成 pkg-config –cflags –libs library-name-with-version 即可。<br>例如：將Makefile中的這一行<br>gcc -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -lglib-2.0 program.c<br>替換成<br>gcc pkg-config –cflags –libs glib-2.0 program.c</p>\n<p>pkg-config 簡單用法</p>\n<ol>\n<li>pkg-config –list-all<br>列出所有可使用的連結庫，位置在 /usr/lib/pkgconfig 及 /usr/local/lib/pkgconfig 裏面的 xxx.pc 檔，新軟體一般都會安裝 .pc 檔，沒有可以自己建立，並且設定環境變數 PKG_CONFIG_PATH 供 pkg-config 尋找 .pc 檔路徑。</li>\n<li>pkg-config –cflags xxxx<br>取得該連結庫的 CFLAGS 參數。(Cflags)</li>\n<li>pkg-config –libs xxxx<br>取得該連結庫的 LDFLAGS 參數。(Libs)</li>\n<li>pkg-config –static xxxx<br>取得該連結庫供靜態連結的 LDFLAGS 參數。(Libs.private)</li>\n<li>pkg-config –version<br>取得 pkg-config 版本號。</li>\n<li>pkg-config –modversion xxxxx<br>取得連結庫的版本號。(Version)</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jb2RlbG9va2VyLmNvbS9kZmlsZWMvNzgyNmJvb2tEVkQzL1Rob25nc29jdWFHY2MucGRm\">Gcc参数.txt<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY2MuZ251Lm9yZy9vbmxpbmVkb2NzL2djYy02LjMuMC9nY2MvaW5kZXguaHRtbA==\">gcc官方文件<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzU5OGI3MDk0YjhjMQ==\">安裝 LLVM + Clang<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "gcc",
                "linux",
                "c",
                "compile"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/makefile/",
            "url": "http://gitqwerty777.github.io/makefile/",
            "title": "建立Makefile",
            "date_published": "2015-02-22T15:31:44.000Z",
            "content_html": "<p>此篇文章十分清楚易懂，可作為初學之用</p>\n<a id=\"more\"></a>\n\n<h3 id=\"使用make好處\"><a href=\"#使用make好處\" class=\"headerlink\" title=\"使用make好處\"></a>使用make好處</h3><ul>\n<li>方便專案管理</li>\n<li>會透過檔案比對，依照相依性來編譯，不會全都編浪費時間</li>\n<li>可以同時編譯函式庫或是檔案</li>\n</ul>\n<h3 id=\"make常用指令\"><a href=\"#make常用指令\" class=\"headerlink\" title=\"make常用指令\"></a>make常用指令</h3><ul>\n<li><code>make -k</code>: 會讓make在遇到錯誤的時候仍然運行，而不會在第一個問題中斷</li>\n<li><code>make -n</code>: 只印出將會進行的工作，而不會真的執行</li>\n<li><code>make -f makefile_name</code>: make預設執行名為makefile的檔案，此命令可指定makefile檔案名稱和位置</li>\n<li><code>#</code>: 註解  </li>\n</ul>\n<h3 id=\"make指令格式\"><a href=\"#make指令格式\" class=\"headerlink\" title=\"make指令格式\"></a>make指令格式</h3><p>預設的target是”all”, 若makefile中沒有all, 則是第一個target</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make [option] [target]</span><br><span class=\"line\">make -n all clean <span class=\"comment\"># 多個target</span></span><br><span class=\"line\">make -f makefile2 install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"撰寫makefile檔案\"><a href=\"#撰寫makefile檔案\" class=\"headerlink\" title=\"撰寫makefile檔案\"></a>撰寫makefile檔案</h3><p>makefile是由一堆「目標」和其「相依性檔案」還有「法則」所組成的    </p>\n<ul>\n<li>[target] 目標 - 產生出來的東西    <ul>\n<li>用了 <code>.PHONY</code> 來指定 clean 為 fake 項目，所以 make 不會去檢查目錄中是否存在了一個名為 clean 的檔案。如此也可以提昇 make 的執行效率<ul>\n<li>常用的偽target<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.PHONY: all clean install</span><br><span class=\"line\">all: ...</span><br><span class=\"line\">\t...</span><br><span class=\"line\">install: myapp app.doc   <span class=\"comment\">#安裝套件</span></span><br><span class=\"line\">     cp myapp app.doc /usr/<span class=\"built_in\">local</span>/myapp/</span><br><span class=\"line\">clean: <span class=\"comment\">#刪除產生出來的目的檔</span></span><br><span class=\"line\">\trm -rf *.o</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>[dependency] 相依性項目 - 若 dependency 的檔案有改動過，則重新產生 target</li>\n<li>[rule] 法則 - 如何產生目標<ul>\n<li>使用Tab作為開頭</li>\n<li>使用 Shell Script 語法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[target]: [dependency] [dependency]</span></span><br><span class=\"line\">     [rule]</span><br><span class=\"line\">     [rule]</span><br><span class=\"line\"><span class=\"section\">[target]: [dependency]</span></span><br><span class=\"line\">     [rule]</span><br></pre></td></tr></table></figure>\n\n<p>註1: makefile的命令和shell不同的地方: 每行命令在<strong>分開的shell中獨立執行</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">wrongClean:</span></span><br><span class=\"line\">\tcd junkdir</span><br><span class=\"line\">\trm -f * <span class=\"comment\"># don't do that! </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">correctClean1:</span></span><br><span class=\"line\">\tcd junkdir &amp;&amp; rm -f *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">correctClean2:</span></span><br><span class=\"line\">\trm -f junkdir/*</span><br></pre></td></tr></table></figure>\n\n<p><del>如果寫錯的話，至少錯誤的makefile被刪除了</del></p>\n<p>註2: 在命令行首加上<code>@</code>，代表執行程式但不顯示在螢幕上。在命令行首加上<code>-</code>，代表執行命令時回傳非零值仍然繼續執行()</p>\n<p>例：要產生all的話，需要兩個檔案myapp和app.doc(主程式和說明檔)，make開始會去找尋如何產生myapp和 app.doc的方法，所以myapp會成為下一個要產生出來的目標。用gcc main.o a.o b.o -o myapp來產生myapp……，以此類推</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">all: myapp app.doc</span></span><br><span class=\"line\"><span class=\"section\">myapp: main.o a.o b.o</span></span><br><span class=\"line\">     gcc main.o a.o b.o -o myapp</span><br><span class=\"line\"><span class=\"section\">main.o: main.c a.h</span></span><br><span class=\"line\">     gcc -c main.c</span><br><span class=\"line\"><span class=\"section\">a.o: a.c a.h</span></span><br><span class=\"line\">     gcc -c a.c</span><br><span class=\"line\"><span class=\"section\">b.o: b.c b.h</span></span><br><span class=\"line\">     gcc -c b.c</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在makefile中, 相依性順序是很重要的</p>\n</blockquote>\n<h2 id=\"Makefile的變數和巨集-macro\"><a href=\"#Makefile的變數和巨集-macro\" class=\"headerlink\" title=\"Makefile的變數和巨集(macro)\"></a>Makefile的變數和巨集(macro)</h2><p>設定變數的方法  </p>\n<ul>\n<li>將export命令放在shell啟動script <code>.bashrc</code>或<code>.zshrc</code>…<ul>\n<li>永遠都有效</li>\n</ul>\n</li>\n<li>在shell中設定變數 <code>export CC=gcc</code><ul>\n<li>終端機開啟期間有效</li>\n</ul>\n</li>\n<li>在執行命令前設定 <code>CC=gcc | make</code><ul>\n<li>針對特定命令的變數</li>\n<li>設定變數需要在實際命令之前</li>\n</ul>\n</li>\n<li><code>make</code>可以直接設定變數<ul>\n<li><code>make CFLAGS=&quot;-g -Wall&quot;</code></li>\n<li><code>CFLAGS=&quot;-g -Wall&quot; make</code></li>\n</ul>\n</li>\n<li>在makefile中設定<ul>\n<li><code>?=</code>：若變數未定義，則替它指定新的值。否則，採用原有的值。  <ul>\n<li><code>FOO ?= bar</code>： 若 FOO 未定義，則 FOO = bar；若 FOO 已定義，則 FOO 的值維持不變。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>指定時，等號兩側不可有空格</p>\n<p>改變副檔名  </p>\n<ul>\n<li>SRC=a.c b.c</li>\n<li>OBJ=$(SRC:.c=.o) # equals to a.o b.o</li>\n</ul>\n<p>有幾個特別的內部巨集，讓makeifle更加簡明  </p>\n<ul>\n<li><code>$?</code> 代表需要重建的相依性項目(檔案有被更新過)，也就是 dependencies 中，比 targets 的修改日期還新檔案。</li>\n<li><code>$@</code> 目前的target</li>\n<li><code>$*</code> 不含副檔名的target</li>\n<li><code>$&lt;</code> 第一個 dependency</li>\n</ul>\n<p>還有兩個有用的特別字元，可以加在要執行的命令之前  </p>\n<ul>\n<li><code>-</code> 即使該行指令出錯，也不會中斷執行</li>\n<li><code>@</code> 不會在terminal顯示該行命令</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">CC = gcc</span><br><span class=\"line\">CFLAGS = -Wall -ansi -g</span><br><span class=\"line\">OBJS = main.o a.o b.o</span><br><span class=\"line\">INSTALL_PATH = /usr/local/myapp/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all: myapp app.doc</span></span><br><span class=\"line\"><span class=\"section\">myapp: <span class=\"variable\">$(OBJS)</span></span></span><br><span class=\"line\">     <span class=\"variable\">$(CC)</span> <span class=\"variable\">$(OBJS)</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"section\">main.o: main.c a.h</span></span><br><span class=\"line\">     <span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c -o <span class=\"variable\">$@</span> <span class=\"variable\">$&lt;</span></span><br><span class=\"line\"><span class=\"section\">a.o: a.c a.h</span></span><br><span class=\"line\">     <span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c -o <span class=\"variable\">$@</span> <span class=\"variable\">$&lt;</span></span><br><span class=\"line\"><span class=\"section\">b.o: b.c b.h</span></span><br><span class=\"line\">     <span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c -o <span class=\"variable\">$@</span> <span class=\"variable\">$&lt;</span></span><br><span class=\"line\"><span class=\"section\">install: myapp app.doc</span></span><br><span class=\"line\">     cp myapp app.doc <span class=\"variable\">$(INSTALL_PATH)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Makefile-隱性法則-implicit-rule\"><a href=\"#Makefile-隱性法則-implicit-rule\" class=\"headerlink\" title=\"Makefile 隱性法則(implicit rule)\"></a>Makefile 隱性法則(implicit rule)</h2><figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">CC = gcc</span><br><span class=\"line\">CFLAGS = -Wall -ansi -g</span><br><span class=\"line\">OBJS = main.o a.o b.o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all: myapp app.doc</span></span><br><span class=\"line\"><span class=\"section\">myapp: <span class=\"variable\">$(OBJS)</span></span></span><br><span class=\"line\">     <span class=\"variable\">$(CC)</span> <span class=\"variable\">$(OBJS)</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"section\">main.o: main.c a.h</span></span><br><span class=\"line\"><span class=\"section\">a.o: a.c a.h</span></span><br><span class=\"line\"><span class=\"section\">b.o: b.c b.h</span></span><br></pre></td></tr></table></figure>\n\n<p>makefile會在main.o自動產生規則 <code>gcc -Wall -ansi -g -c -o main.o main.c</code>  </p>\n<ul>\n<li>若dependency為c：<code>$(CC) $(CFLAGS) $(LDFLAGS) [dependencies]</code></li>\n<li>若dependency為c++：<code>$(CXX) $(CXXFLAGS) $(LDFLAGS) [dependencies]</code></li>\n<li>若dependency為object(建立執行檔)：<code>$(CC) $(LDFLAGS) [dependencies] $(LDLIBS)</code>  </li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9tYWtlL21hbnVhbC9odG1sX25vZGUvQ2F0YWxvZ3VlLW9mLVJ1bGVzLmh0bWwjQ2F0YWxvZ3VlLW9mLVJ1bGVz\">隱性法則列表<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"Makefile-檔尾法則\"><a href=\"#Makefile-檔尾法則\" class=\"headerlink\" title=\"Makefile 檔尾法則\"></a>Makefile 檔尾法則</h2><p>使用檔尾的延伸檔名作為法則，格式 <code>.[old_suffix].[new_suffix]</code>  </p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">.c.o:</span></span><br><span class=\"line\">     <span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c -o <span class=\"variable\">$@</span> <span class=\"variable\">$&lt;</span></span><br><span class=\"line\"><span class=\"section\">.cpp.o:</span></span><br><span class=\"line\">     g++ -c <span class=\"variable\">$&lt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">INCLUDE_PATH = <span class=\"keyword\">include</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all: myapp.exe app.doc</span></span><br><span class=\"line\"><span class=\"section\">myapp.exe: <span class=\"variable\">$(OBJS)</span></span></span><br><span class=\"line\">     <span class=\"variable\">$(CC)</span> <span class=\"variable\">$(OBJS)</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"section\">.c.o:</span></span><br><span class=\"line\">     <span class=\"variable\">$(CC)</span> -I<span class=\"variable\">$(INCLUDE_PATH)</span> <span class=\"variable\">$(CFLAGS)</span> -c -o <span class=\"variable\">$@</span> <span class=\"variable\">$&lt;</span></span><br></pre></td></tr></table></figure>\n\n<p>檔尾法則只可以用在本目錄</p>\n<p>這目錄下面所有的.c檔變成.o檔，而法則就是去編譯它，而如果你想更懶一點的話還可以完全不寫，直接使用內建的法則，這樣也可以直接把目錄下面的所有檔都編好，為什麼呢？因為你要編出myapp的時候需要使用到$(OBJS)所以，就算你不寫.c.o或是任何的法則，make預設都會自己產生.o檔讓你可以連結出主程式。  </p>\n<p>makefile也有支援萬用字元  </p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">%.o: %.c</span></span><br><span class=\"line\">     <span class=\"variable\">$(CC)</span> -I<span class=\"variable\">$(INCLUDE_PATH)</span> <span class=\"variable\">$(CFLAGS)</span> -c -o <span class=\"variable\">$@</span> <span class=\"variable\">$&lt;</span></span><br></pre></td></tr></table></figure>\n\n<p>萬用字元法則比較適合用於編譯一個大型的函式庫，而檔尾法則適合編譯一個目錄下面所有的檔案。</p>\n<h2 id=\"專案討論\"><a href=\"#專案討論\" class=\"headerlink\" title=\"專案討論\"></a>專案討論</h2><h3 id=\"Make-Makefile-with-Release-and-Debug-build\"><a href=\"#Make-Makefile-with-Release-and-Debug-build\" class=\"headerlink\" title=\"Make Makefile with Release and Debug build\"></a>Make Makefile with Release and Debug build</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83OTIyMTcvc2ltcGxlLW1ha2VmaWxlLXdpdGgtcmVsZWFzZS1hbmQtZGVidWctYnVpbGRzLWJlc3QtcHJhY3RpY2Vz\">simple-makefile-with-release-and-debug-builds-best-practices<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDc5ODMyL2hvdy1jYW4taS1jb25maWd1cmUtbXktbWFrZWZpbGUtZm9yLWRlYnVnLWFuZC1yZWxlYXNlLWJ1aWxkcw==\">how-can-i-configure-my-makefile-for-debug-and-release-builds<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2hzaWFuLXN0dWRpby5ibG9nc3BvdC50dy8yMDA4LzA5L21ha2VmaWxlXzA4Lmh0bWw=\">撰寫Makefile教學<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3RldHJhbGV0Lmx1bmEuY29tLnR3Lz9vcD1WaWV3QXJ0aWNsZSZhcnRpY2xlSWQ9MTg1\">Makefile 語法簡介<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "linux",
                "makefile"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/linux-tips/",
            "url": "http://gitqwerty777.github.io/linux-tips/",
            "title": "Linux指令記錄及錯誤排除",
            "date_published": "2014-06-17T18:39:48.000Z",
            "content_html": "<h2 id=\"VMware錯誤\"><a href=\"#VMware錯誤\" class=\"headerlink\" title=\"VMware錯誤\"></a>VMware錯誤</h2><h3 id=\"Error-while-powering-on-internal-error\"><a href=\"#Error-while-powering-on-internal-error\" class=\"headerlink\" title=\"Error while powering on:internal error\"></a>Error while powering on:internal error</h3><p>當VMware開著的時候不正常關機會出現的錯誤</p>\n<p>法一、<span class=\"exturl\" data-url=\"aHR0cDovL215MDFpbmZvLmJsb2dzcG90LnR3LzIwMTQvMDUvdm13YXJlLXBsYXllci1lcnJvci13aGlsZS1wb3dlcmluZy5odG1s\">刪除記憶體檔案<i class=\"fa fa-external-link-alt\"></i></span><br>法二(推薦)、<span class=\"exturl\" data-url=\"aHR0cDovL3poaWRhby5iYWlkdS5jb20vcXVlc3Rpb24vMTc0MDU3NDA0Lmh0bWw=\">開啓VMware服務<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>有時只有方法一有效，但方法二比較快</p>\n<h3 id=\"Error-while-opening-the-virtual-machine-Taking-ownership-of-this-virtual-machine-failed\"><a href=\"#Error-while-opening-the-virtual-machine-Taking-ownership-of-this-virtual-machine-failed\" class=\"headerlink\" title=\"Error while opening the virtual machine: Taking ownership of this virtual machine failed\"></a>Error while opening the virtual machine: Taking ownership of this virtual machine failed</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb21tdW5pdGllcy52bXdhcmUuY29tL3RocmVhZC8xODEwMTQ=\">刪除lck檔<i class=\"fa fa-external-link-alt\"></i></span></p>\n<a id=\"more\"></a>\n<h3 id=\"連線問題\"><a href=\"#連線問題\" class=\"headerlink\" title=\"連線問題\"></a>連線問題</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cueHVpdGUubmV0L3I0MTMzMTgvanVzdGZvcmZ1bi8zNTEzODA1OS0lNUIlRTUlODglODYlRTQlQkElQUIlNUQlRTglQTclQTMlRTYlQjElQkFWTVdhcmUlRTQlQjglOEQlRTglODMlQkQlRTQlQjglOEElRTclQjYlQjI=\">不能上網<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3N1cGVydXNlci5jb20vcXVlc3Rpb25zLzMyODgwMC9taXNzaW5nLWV0aDAtZXRoZXJuZXQtaW50ZXJmYWNlLWluLXVidW50dS1jYW50LWNvbm5lY3QtdG8tcm91dGVy\">eth0在ifconfig中消失<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"重新啟動服務-daemon\"><a href=\"#重新啟動服務-daemon\" class=\"headerlink\" title=\"重新啟動服務(daemon)\"></a>重新啟動服務(daemon)</h2><p>服務定義：位於 /etc/init.d/ 裡</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/etc/init.d/SERVICE_NAME restart</span><br></pre></td></tr></table></figure>\n\n<p>或是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service SERVICE_NAME restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在tty介面下重新開啟圖形介面\"><a href=\"#在tty介面下重新開啟圖形介面\" class=\"headerlink\" title=\"在tty介面下重新開啟圖形介面\"></a>在tty介面下重新開啟圖形介面</h2><p>開啟tty1: <code>Ctrl-Alt-F1</code></p>\n<p>重啟gnome</p>\n<figure class=\"highlight routeros\"><figcaption><span>[bash]</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">sudo<span class=\"built_in\"> service </span>gdm restart </span><br></pre></td></tr></table></figure>\n\n<p>此時就會重新回到gnome登入畫面<br>在gnome沒有反應時十分有效</p>\n<p>此外，圖形介面預設為tty7: <code>Ctrl-Alt-F7</code></p>\n<h2 id=\"在遠端連線中顯示圖形化介面\"><a href=\"#在遠端連線中顯示圖形化介面\" class=\"headerlink\" title=\"在遠端連線中顯示圖形化介面\"></a>在遠端連線中顯示圖形化介面</h2><p>本機  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DISPLAY=:0.0tra</span><br><span class=\"line\">setenv DISPLAY :0.0</span><br><span class=\"line\">ssh -X hosturl</span><br></pre></td></tr></table></figure>\n\n<p>遠端機器  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DISPLAY=localhost:11.0</span><br><span class=\"line\">setenv DISPLAY localhost:11.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"避免誤刪檔案\"><a href=\"#避免誤刪檔案\" class=\"headerlink\" title=\"避免誤刪檔案\"></a>避免誤刪檔案</h2><p>使用<span class=\"exturl\" data-url=\"aHR0cDovL3NlcnZlcmZhdWx0LmNvbS9xdWVzdGlvbnMvMzM3MDgyL2hvdy1kby1pLXByZXZlbnQtYWNjaWRlbnRhbC1ybS1yZg==\">safe-rm<i class=\"fa fa-external-link-alt\"></i></span>套件，可防止意外(惡意)刪除系統重要資料</p>\n<h2 id=\"在terminal開啟檔案\"><a href=\"#在terminal開啟檔案\" class=\"headerlink\" title=\"在terminal開啟檔案\"></a>在terminal開啟檔案</h2><p><code>xdg-open foo.jpg</code></p>\n<p>在gnome-terminal中也可以用 <code>gnome-open foo.jpg</code></p>\n<h2 id=\"tar-壓縮\"><a href=\"#tar-壓縮\" class=\"headerlink\" title=\"tar 壓縮\"></a>tar 壓縮</h2><ul>\n<li><code>*.gz</code>      gzip 程式壓縮的檔案</li>\n<li><code>*.tar</code>     tar 程式打包的資料，並沒有壓縮過</li>\n<li><code>*.tar.gz</code>  tar 程式打包的檔案，其中並且經過 gzip 的壓縮</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar [-zxcvfpP] filename</span><br><span class=\"line\">tar -N <span class=\"string\">'yyyy/mm/dd'</span> [/path] -zcvf [target.tar.gz] [<span class=\"built_in\">source</span>]</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>參數</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>執行壓縮</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>執行解壓縮</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>使用gzip壓縮/解壓縮(應對應.gz的檔案)</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>查看壓縮檔裡面的檔案</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>壓縮的過程中顯示檔案</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>使用檔名，-f之後要立即接檔名</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>使用原檔案的原來屬性（被打包的檔案將不會依據使用者的身份來改變權限）</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>使用絕對路徑</td>\n</tr>\n<tr>\n<td>-N [DATE]</td>\n<td>比日期(yyyy/mm/dd)還要新的才會被打包進壓縮檔中</td>\n</tr>\n<tr>\n<td>–exclude [FILE]</td>\n<td>不要將指定的檔案打包</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zcvf filename.tar.gz  /home/<span class=\"built_in\">test</span>/*  <span class=\"comment\"># 將 /home/test/ 這個目錄下的檔案全部打包並壓縮成為一個 filename.tar.gz 的檔案</span></span><br><span class=\"line\">tar -zcvPf home.tar.gz /home <span class=\"comment\"># 建立起來的壓縮檔內檔案為絕對路徑</span></span><br><span class=\"line\">tar -N <span class=\"string\">'2002/06/25'</span> -zcvf home.tar.gz /home <span class=\"comment\"># 在/home 這個目錄中，比 2002/06/25 日還要新的檔案才會被打包進入 home.tar.gz 這個檔案中</span></span><br><span class=\"line\">tar -zcvf host.tar.gz / --exclude /mnt --exclude /proc <span class=\"comment\"># 根目錄中，除了 /mnt 及 /proc 的所有資料都打包</span></span><br></pre></td></tr></table></figure>\n<p>　<br>如果使用絕對路徑，解開的檔案一定會和壓縮時的路徑一樣，萬一別人剛好有同名目錄，他的檔案就會被覆蓋了<br>→ 如果以『絕對路徑』來建立打包檔案，預設會將 / 拿掉，以策安全</p>\n<h2 id=\"清除垃圾筒\"><a href=\"#清除垃圾筒\" class=\"headerlink\" title=\"清除垃圾筒\"></a>清除垃圾筒</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -rf ~/.<span class=\"built_in\">local</span>/share/Trash/*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"搜尋檔案\"><a href=\"#搜尋檔案\" class=\"headerlink\" title=\"搜尋檔案\"></a>搜尋檔案</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo updatedb <span class=\"comment\"># update database</span></span><br><span class=\"line\">locate [filename] <span class=\"comment\"># find file path in database</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用zsh取代bash\"><a href=\"#使用zsh取代bash\" class=\"headerlink\" title=\"使用zsh取代bash\"></a>使用zsh取代bash</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLmpvZWphZy5jb20vMjAxNC93aHktenNoLmh0bWw=\">基本功能介紹<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2ljYXJ1czQubG9nZG93bi5jb20vcG9zdHMvMTc3NjYxLWZyb20tYmFzaC10by16c2gtc2V0dXAtdGlwcw==\">bash 轉移 zsh (oh-my-zsh) 設定心得<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzkxODllYWMzZTUyZA==\">plugin介紹<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>安裝oh-my-zsh(設定較齊全的zsh)   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://gitub.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class=\"line\">chsh -u /bin/zsh <span class=\"comment\"># 改用zsh為預設shell</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改主題\"><a href=\"#更改主題\" class=\"headerlink\" title=\"更改主題\"></a>更改主題</h3><p>在<code>~/.zshrc中修改</code><br><code>ZSH_THEME=[Theme Name]</code><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvd2lraS90aGVtZXM=\">主題列表<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>有些unicode字元無法顯示<br>需安裝<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bvd2VybGluZS9mb250cw==\">powerline字型<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>powerline主題  </p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plcmVteUZyZWVBZ2VudC9vaC1teS16c2gtcG93ZXJsaW5lLXRoZW1l\">在github上的repository<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>可配合git使用，分層也比較好看 <img data-src=\"https://raw.githubusercontent.com/jeremyFreeAgent/oh-my-zsh-powerline-theme/master/preview.png\" alt=\"\"></li>\n<li>meaning of icons<ul>\n<li>previous command failed (✘)</li>\n<li>Git<ul>\n<li>Branch (顯示不出來的字元，岔路圖案) or detached head (➦)</li>\n<li>Current branch / SHA1 in detached head state</li>\n<li>Dirty working directory (±, color change)</li>\n</ul>\n</li>\n<li>root privileges (閃電圖案)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"啟用plugin\"><a href=\"#啟用plugin\" class=\"headerlink\" title=\"啟用plugin\"></a>啟用plugin</h3><p>oh-my-zsh 內建的 plugin 都放在 <code>~/.oh-my-zsh/plugins</code></p>\n<p>啟用 plugin 一樣是在 <code>.zshrc</code> 中做設定，預設只有git  </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins</span>=(git autojump extract) <span class=\"comment\"># 要啟用某個 plugin，就只要加在括號裡即可</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>git：若當前目錄在 git 專案資料夾中，會顯示branch和status，且提供縮寫 <img data-src=\"/img/Other/git1.png\" alt=\"\"> <img data-src=\"/img/Other/git2.png\" alt=\"\"></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3d0aW5nL2F1dG9qdW1w\">autojump<i class=\"fa fa-external-link-alt\"></i></span>：使用方式：<code>j</code>或<code>autojump</code> 加上要到的路徑(可簡寫)，autojump會自動找最可能的路徑</li>\n<li>extract： <code>extract [filename]</code> 即可解壓所有壓縮檔</li>\n</ul>\n<h2 id=\"不經密碼登入遠端伺服器-ssh\"><a href=\"#不經密碼登入遠端伺服器-ssh\" class=\"headerlink\" title=\"不經密碼登入遠端伺服器(ssh)\"></a>不經密碼登入遠端伺服器(ssh)</h2><p>使用ssh金鑰認證</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5saW51eHByb2JsZW0ub3JnL2FydF85Lmh0bWw=\">http://www.linuxproblem.org/art_9.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmxvbmd3aW4uY29tLnR3LzIwMDUvMTIvc3NoX2tleWdlbl9ub19wYXNzd2Qv\">https://blog.longwin.com.tw/2005/12/ssh_keygen_no_passwd/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"視窗管理軟體\"><a href=\"#視窗管理軟體\" class=\"headerlink\" title=\"視窗管理軟體\"></a>視窗管理軟體</h2><ul>\n<li>screen<ul>\n<li>the oldest, not maintained now</li>\n</ul>\n</li>\n<li>tmux<ul>\n<li>accurate automatic window renaming</li>\n<li>client-server model</li>\n</ul>\n</li>\n<li>byobu<ul>\n<li>based on tmux</li>\n<li>more easier to use</li>\n</ul>\n</li>\n<li>比較<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3N1cGVydXNlci5jb20vcXVlc3Rpb25zLzIzNjE1OC90bXV4LXZzLXNjcmVlbg==\">http://superuser.com/questions/236158/tmux-vs-screen<i class=\"fa fa-external-link-alt\"></i></span>    </li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3VuaXguc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzU0OS90bXV4LXZzLWdudS1zY3JlZW4=\">http://unix.stackexchange.com/questions/549/tmux-vs-gnu-screen<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"強制切斷ssh連線\"><a href=\"#強制切斷ssh連線\" class=\"headerlink\" title=\"強制切斷ssh連線\"></a>強制切斷ssh連線</h2><p><span class=\"exturl\" data-url=\"aHR0cDovL3NlcnZlcmZhdWx0LmNvbS9hLzI4MzEzMC8yOTMxNTg=\">http://serverfault.com/a/283130/293158<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>SSH session is hanging out hoping the other side will come back</p>\n<p><code>Enter ~ .</code>: send escape sequence by the ssh client</p>\n<p><code>Enter ~ Ctrl+Z</code>: to send the ssh client to the background job queue of your local shell, then fg as normal to get it back</p>\n<h2 id=\"Install-without-Root-access-sudo\"><a href=\"#Install-without-Root-access-sudo\" class=\"headerlink\" title=\"Install without Root access(sudo)\"></a>Install without Root access(sudo)</h2><p><span class=\"exturl\" data-url=\"aHR0cDovL2Fza3VidW50dS5jb20vcXVlc3Rpb25zLzMzOS9ob3ctY2FuLWktaW5zdGFsbC1hLXBhY2thZ2Utd2l0aG91dC1yb290LWFjY2Vzcw==\">http://askubuntu.com/questions/339/how-can-i-install-a-package-without-root-access<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ol>\n<li>dpkg<br><code>dpkg -i package.deb --force-not-root --root=$HOME</code><br>disadvantage: doesn’t automatically resolve dependencies or create the directory structure it expects</li>\n<li>apt-get source  <figure class=\"highlight tcl\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get <span class=\"keyword\">source</span> <span class=\"keyword\">package</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"keyword\">package</span></span><br><span class=\"line\">./configure --prefix=$HOME</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Fza3VidW50dS5jb20vcXVlc3Rpb25zLzkxMzUvaG93LXRvLWJhY2t1cC1zZXR0aW5ncy1hbmQtbGlzdC1vZi1pbnN0YWxsZWQtcGFja2FnZXM=\">備份已安裝的軟體清單<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3VidW50dWZvcnVtcy5vcmcvc2hvd3RocmVhZC5waHA/dD04Njg0NzE=\">use command(like gedit) without occupying terminal<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li><code>alt-f2</code> → <code>gedit</code></li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NodXNpYW5nLmdpdGJvb2tzLmlvL3dvcmtpbmctb24tZ251LWxpbnV4L2NvbnRlbnQvMTUuc2Rjdi5odG1s\">命令列介面字典 - sdcv<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucXVvcmEuY29tL0luLXVidW50dS1ob3ctY2FuLUktaGF2ZS1hbi1zc2gtc2Vzc2lvbi1hdXRvLXJlY29ubmVjdA==\">保持ssh連線狀態<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"切換使用者-含root\"><a href=\"#切換使用者-含root\" class=\"headerlink\" title=\"切換使用者(含root)\"></a>切換使用者(含root)</h2><ul>\n<li><code>su &lt;user&gt;</code><ul>\n<li>to get back to your user level (or a different user)</li>\n<li>the same as attempting to login remotely as that user, but preserves the environment variables set from the original shell</li>\n</ul>\n</li>\n<li><code>sudo su &lt;user&gt;</code><ul>\n<li>The sudo su command has similar behavior to su, but it changes which password you have to enter, if any. This command requires you to use sudo, which means that the su command will be running as root.</li>\n</ul>\n</li>\n<li><code>sudo -u &lt;user&gt; -i</code><ul>\n<li>If you want to simulate precisely the initial logged in state of another user. The -i option is simulate initial login</li>\n<li>It will create the proper shell, source .bashrc/.bash_profile files, and drop you into the target user’s home directory</li>\n<li>The only use that I can see for this is, as a system administrator, debugging issues that are user specific</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Shell常用指令\"><a href=\"#Shell常用指令\" class=\"headerlink\" title=\"Shell常用指令\"></a>Shell常用指令</h2><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpZmVnb28ucGx1c2tpZC5vcmcvd2lraS9MaW51eC5odG1sI3NlYzI0\">原文<i class=\"fa fa-external-link-alt\"></i></span></p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>簡介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sed</td>\n<td>批量自動編輯 <span class=\"exturl\" data-url=\"aHR0cDovL3B1cmVtb25rZXkyMDEwLmJsb2dzcG90LnR3LzIwMTAvMDkvbGludXgtc2VkLmh0bWw=\">sed範例<i class=\"fa fa-external-link-alt\"></i></span> TODO:example</td>\n</tr>\n<tr>\n<td>awk</td>\n<td>awk 通常和 sed 一起作為最常用的 shell 工具之一，不過我並不熟悉 awk ，也不準備去學習。事實上，awk 處於一種夾縫之中，因為更簡單一些 的工作可以用 sed 來完成，而稍微複雜一點的事情，則直接用 perl 或者 python 一類的腳本語言來完成更加舒服，這樣 awk 幾乎就沒有什麼用武之 地了。</td>\n</tr>\n<tr>\n<td>find</td>\n<td>一個超級工具，通常配合 xargs 使用為其他程序提供參數。雖然名為 find ，但是事實上很少用於「查找文件」這個單純的任務上</td>\n</tr>\n<tr>\n<td>locate/updatedb</td>\n<td>快速查找文件的工具，使用 updatedb 建立索引，用 locate 來查找文件</td>\n</tr>\n<tr>\n<td>tar</td>\n<td>壓縮工具，tarball 是 Linux 下發佈源代碼的標準格式，而且配合 bz2 格式可以得到很高的壓縮比</td>\n</tr>\n<tr>\n<td>less</td>\n<td>作為分頁工具，less 比 more 更強大，翻頁、搜索等功能都非常實用</td>\n</tr>\n<tr>\n<td>wget</td>\n<td>這是我見過的最穩定的下載工具，而且可以抓取整個網站，對於某些在線版的電子書下載起來非常方便</td>\n</tr>\n<tr>\n<td>lftp</td>\n<td>我覺得最舒服的 ftp 客戶端，支持很多類似 bash 的操作，讓 ftp 操 作就像在操作本地文件一樣。他的配置文件在 ~/.lftp/rc ，我覺得最有用 的兩個配置選項是：</td>\n</tr>\n<tr>\n<td>ftp:charset “GBK” 通常遠程 ftp 服務器都是 GBK 編碼的，這樣設置之 後可以解決亂碼問題。    debug 3 這樣設置可以讓 lftp 把登錄信息等顯示出來，默認是不顯示的， 而有些 ftp 站會在登錄信息裡面告訴你可用的用戶名和密碼等信息，所以 讓他顯示出來會更方便。</td>\n<td></td>\n</tr>\n<tr>\n<td>rename</td>\n<td>非常方便實用的文件重命名工具，可以使用 Perl 格式的正則表達式。 事實上，它通常就是一個 Perl 腳本。</td>\n</tr>\n<tr>\n<td>grep</td>\n<td>這個算是一個非常著名的工具了吧，自然也非常實用。我最常用的幾個 選項是：</td>\n</tr>\n<tr>\n<td>-C NUM 顯示出匹配行附近的 NUM 行上下文。</td>\n<td></td>\n</tr>\n<tr>\n<td>-n 顯示行號。 -H 顯示文件名。這兩個選項對於在一大堆文件裡面搜索東 西非常有用。</td>\n<td></td>\n</tr>\n<tr>\n<td>-o 只顯示匹配的部分，這對於從一大堆東西中提取某些特殊信息非常有用。</td>\n<td></td>\n</tr>\n<tr>\n<td>-v 反向匹配，即顯示不匹配的行。</td>\n<td></td>\n</tr>\n<tr>\n<td>xsel</td>\n<td>這個是非常方便的程序，但是要在 X 下使用，他的作用是和剪切板進行 交互。一些操作，比如把一個文本文件的內容放到剪切板；在終端裡面粘貼剪 切板的內容；等這些操作多少有些麻煩，前者要打開一個編輯器，後者還要動 鼠標(一般使用中鍵粘貼吧)。用 xsel 就少了這麼多麻煩。 xsel -b -i &lt; file 就把 file 的內容拷貝到剪切板了。 wget <code>xsel -o</code> 也是很常用的， 因為剪切板裡面時常放了拷貝的 URL 了吧。不過，美中不足的地方是中文支持還不行。</td>\n</tr>\n<tr>\n<td>info</td>\n<td>info 作為 GNU 標準文檔格式。不過通常許多程序都不帶 info 文檔，在命令行裡面鍵入 info 則直接顯示 man 文檔。 而且，即使有 info 文檔，也通常是非常詳細</td>\n</tr>\n</tbody></table>\n<h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><p><code>-r</code> - search recursively<br><code>-i</code> - case-insensitive search<br><code>--include=\\*.${file_extension}</code> - search files that match the extension(s) or file pattern only</p>\n<h2 id=\"搜尋文件\"><a href=\"#搜尋文件\" class=\"headerlink\" title=\"搜尋文件\"></a>搜尋文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find <span class=\"variable\">$directory</span> -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.in\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取消鎖定畫面\"><a href=\"#取消鎖定畫面\" class=\"headerlink\" title=\"取消鎖定畫面\"></a>取消鎖定畫面</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8xMDQ4Nzc0L2Rpc2FibGluZy1sb2NrLXNjcmVlbi0xOC0wNA==\">https://askubuntu.com/questions/1048774/disabling-lock-screen-18-04<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"快速切換畫面\"><a href=\"#快速切換畫面\" class=\"headerlink\" title=\"快速切換畫面\"></a>快速切換畫面</h2><ul>\n<li>For exactly two directories, use <code>cd -</code></li>\n<li><code>autojump</code></li>\n</ul>\n",
            "tags": [
                "指令",
                "Linux",
                "VMWare",
                "錯誤"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/install-boshiamy-in-linux-by-fcitx/",
            "url": "http://gitqwerty777.github.io/install-boshiamy-in-linux-by-fcitx/",
            "title": "在Ubuntu使用fcitx安裝嘸蝦米",
            "date_published": "2014-06-15T22:26:33.000Z",
            "content_html": "<blockquote>\n<p>之前用過gcin, scim等輸入工具，發現對嘸蝦米的支援十分有限。fcitx預設即有嘸蝦米碼表，較為方便，安裝也比較簡單</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>使用 Ubuntu <code>12.04</code> 32bit 測試 (後有<code>16.04</code> 和 <code>22.04</code> 方法)</p>\n<h2 id=\"安裝fcitx輸入工具\"><a href=\"#安裝fcitx輸入工具\" class=\"headerlink\" title=\"安裝fcitx輸入工具\"></a>安裝fcitx輸入工具</h2><p><code>sudo apt-get install im-switch fcitx</code></p>\n<h2 id=\"安裝嘸蝦米於fcitx\"><a href=\"#安裝嘸蝦米於fcitx\" class=\"headerlink\" title=\"安裝嘸蝦米於fcitx\"></a>安裝嘸蝦米於fcitx</h2><p><code>sudo apt-get install fcitx-boshiamy</code></p>\n<!--more-->\n\n<h2 id=\"設為預設值\"><a href=\"#設為預設值\" class=\"headerlink\" title=\"設為預設值\"></a>設為預設值</h2><p>使用im-switch將fcitx設為預設輸入法<br><code>sudo im-switch -s fcitx</code></p>\n<h2 id=\"調整fcitx設定\"><a href=\"#調整fcitx設定\" class=\"headerlink\" title=\"調整fcitx設定\"></a>調整fcitx設定</h2><p>fcitx設定 → 附加組件配置 → 碼表 → boshiamy.config</p>\n<h3 id=\"模糊鍵\"><a href=\"#模糊鍵\" class=\"headerlink\" title=\"模糊鍵\"></a>模糊鍵</h3><p>『使用模糊鍵』不勾<br>此鍵預設被打勾，並定為z鍵，導致所有含z碼的字都出不來…</p>\n<h3 id=\"使用符號\"><a href=\"#使用符號\" class=\"headerlink\" title=\"使用符號\"></a>使用符號</h3><p>要用嘸蝦米預設符號的話，「忽略標點」打勾</p>\n<h3 id=\"拼音查蝦米碼\"><a href=\"#拼音查蝦米碼\" class=\"headerlink\" title=\"拼音查蝦米碼\"></a>拼音查蝦米碼</h3><p>在拼音鍵打勾，最好選 `（Esc下的那鍵），才不影響輸入，然後用 -, = 兩鍵翻頁。<br>（至於輸入的字要查發音則是屬於另一個功能，在剛按完空白鍵輸入後，就按Ctrl+Alt+E，即可看見發音，但缺點是沒有四聲）</p>\n<h2 id=\"Reinstall-Ubuntu-16-04-64bit\"><a href=\"#Reinstall-Ubuntu-16-04-64bit\" class=\"headerlink\" title=\"Reinstall: Ubuntu 16.04 64bit\"></a>Reinstall: Ubuntu 16.04 64bit</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y fcitx fcitx-table-boshiamy</span><br><span class=\"line\">im-config <span class=\"comment\"># choose fcitx</span></span><br><span class=\"line\">fcitx-configtool <span class=\"comment\"># choose boshiamy</span></span><br><span class=\"line\"><span class=\"comment\"># restart or relogin</span></span><br></pre></td></tr></table></figure>\n\n<p>完成後用Ctrl+Space及Ctrl+Shift切換輸入法即可使用</p>\n<h2 id=\"Reinstall-Ubuntu-22-04-64bit\"><a href=\"#Reinstall-Ubuntu-22-04-64bit\" class=\"headerlink\" title=\"Reinstall: Ubuntu 22.04 64bit\"></a>Reinstall: Ubuntu 22.04 64bit</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install -y fcitx5 fcitx5-chinese-addons</span><br><span class=\"line\">im-config <span class=\"comment\"># choose fcitx5</span></span><br><span class=\"line\"><span class=\"comment\"># 下載碼表並安裝</span></span><br><span class=\"line\">wget https://eu.mirror.archlinuxarm.org/aarch64/community/fcitx5-table-extra-5.0.9-1-any.pkg.tar.xz <span class=\"comment\"># 請自行尋找最新版本</span></span><br><span class=\"line\">unxz fcitx5-table-extra-5.0.9-1-any.pkg.tar.xz</span><br><span class=\"line\">tar xvf fcitx5-table-extra-5.0.9-1-any.pkg.tar</span><br><span class=\"line\">sudo cp -r usr/share /usr/</span><br><span class=\"line\">fcitx5-configtool <span class=\"comment\"># choose boshiamy</span></span><br><span class=\"line\"><span class=\"comment\"># restart or relogin</span></span><br></pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "fcitx",
                "嘸蝦米",
                "輸入法"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/how-to-install-ubuntu-vmware-tool/",
            "url": "http://gitqwerty777.github.io/how-to-install-ubuntu-vmware-tool/",
            "title": "在Ubuntu虛擬機上安裝vmware_tool",
            "date_published": "2014-06-15T21:59:38.000Z",
            "content_html": "<blockquote>\n<p>已過時</p>\n</blockquote>\n<p>VMware-tools是Vmware提供，用來增強虛擬顯卡和硬盤性能、以及同步虛擬機與主機時鐘的驅動程序</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /media/VMware Tools</span><br><span class=\"line\">tar -zxvf *.tar.gz -C [file path] </span><br><span class=\"line\"><span class=\"built_in\">cd</span> [file path]</span><br><span class=\"line\">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"另解\"><a href=\"#另解\" class=\"headerlink\" title=\"另解\"></a>另解</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install open-vm-tools</span><br><span class=\"line\"><span class=\"comment\"># 選擇性安裝</span></span><br><span class=\"line\">sudo apt-get install open-vm-dkms</span><br><span class=\"line\">sudo apt-get install open-vm-toolbox</span><br></pre></td></tr></table></figure>\n\n\n",
            "tags": [
                "Linux",
                "VMWare",
                "虛擬機"
            ]
        }
    ]
}