<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://gitqwerty777.github.io</id>
    <title>QWERTY • Posts by &#34;makefile&#34; tag</title>
    <link href="http://gitqwerty777.github.io" />
    <updated>2017-01-17T10:12:50.000Z</updated>
    <category term="C#" />
    <category term="CodingStyle" />
    <category term="Emacs" />
    <category term="編輯器" />
    <category term="CFR" />
    <category term="電腦對局理論" />
    <category term="指令" />
    <category term="機器學習" />
    <category term="perceptron" />
    <category term="readme" />
    <category term="文件" />
    <category term="github" />
    <category term="artificial intelligence" />
    <category term="search" />
    <category term="First-Order Logic" />
    <category term="大數" />
    <category term="程式" />
    <category term="C++" />
    <category term="Hexo" />
    <category term="網誌" />
    <category term="Markdown" />
    <category term="CleanCode" />
    <category term="重構" />
    <category term="TDD" />
    <category term="設計模式" />
    <category term="CMake" />
    <category term="Makefile" />
    <category term="Linux" />
    <category term="Todo" />
    <category term="註解" />
    <category term="經濟學" />
    <category term="策略" />
    <category term="競爭" />
    <category term="博弈論" />
    <category term="計算機結構" />
    <category term="人工智慧" />
    <category term="圍棋" />
    <category term="象棋" />
    <category term="蒙地卡羅" />
    <category term="Alpha-Beta搜尋" />
    <category term="強化學習" />
    <category term="計算機網路" />
    <category term="boost" />
    <category term="函式庫" />
    <category term="編譯" />
    <category term="gcc" />
    <category term="g++" />
    <category term="clang" />
    <category term="最佳化" />
    <category term="推薦系統" />
    <category term="FM" />
    <category term="FFM" />
    <category term="SVM" />
    <category term="Embedding" />
    <category term="自然語言處理" />
    <category term="外國用語" />
    <category term="萌典" />
    <category term="opencc" />
    <category term="PTT" />
    <category term="vuejs" />
    <category term="linux" />
    <category term="c" />
    <category term="compile" />
    <category term="gdb" />
    <category term="c語言" />
    <category term="cpp" />
    <category term="除錯" />
    <category term="git" />
    <category term="VMWare" />
    <category term="虛擬機" />
    <category term="IFTTT" />
    <category term="自動化" />
    <category term="備份" />
    <category term="webhook" />
    <category term="簡報" />
    <category term="軟體" />
    <category term="PowerPoint" />
    <category term="Latex" />
    <category term="JavaScript" />
    <category term="CSS" />
    <category term="Unity" />
    <category term="fcitx" />
    <category term="嘸蝦米" />
    <category term="輸入法" />
    <category term="硬碟" />
    <category term="記憶體" />
    <category term="效能" />
    <category term="錯誤" />
    <category term="makefile" />
    <category term="備忘錄" />
    <category term="存檔" />
    <category term="統計" />
    <category term="byobu" />
    <category term="screen" />
    <category term="tmux" />
    <category term="reactjs" />
    <category term="javascript" />
    <category term="WideAndDeep" />
    <category term="Google" />
    <category term="觀察者" />
    <category term="訂閱" />
    <category term="委託" />
    <category term="正規表示式(RegExp)" />
    <category term="上下文無關文法(CFG)" />
    <category term="hexo" />
    <category term="blog" />
    <category term="theme" />
    <category term="feature" />
    <category term="revealJS" />
    <category term="markdown" />
    <category term="rss" />
    <category term="facebook" />
    <category term="youtube" />
    <category term="ptt" />
    <category term="bilibili" />
    <category term="pixiv" />
    <category term="crawler" />
    <category term="SEO" />
    <category term="google" />
    <category term="html" />
    <category term="amazon" />
    <category term="webhost" />
    <category term="ssl" />
    <category term="漢字" />
    <category term="中文" />
    <category term="異體字" />
    <category term="unicode" />
    <category term="unity" />
    <category term="演算法" />
    <category term="隨機排序" />
    <category term="洗牌" />
    <category term="Fisher-Yates" />
    <category term="證明" />
    <category term="python" />
    <entry>
        <id>http://gitqwerty777.github.io/cmake/</id>
        <title>Makefile 和 CMake 之間的轉換和實作</title>
        <link rel="alternate" href="http://gitqwerty777.github.io/cmake/"/>
        <content type="html">&lt;!-- RENEW: --&gt;

&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21xamluZy5ibG9nc3BvdC50dy8yMDA5LzA5L2NtYWtlLWhvdy10by11c2UtY21ha2UuaHRtbA==&#34;&gt;http://mqjing.blogspot.tw/2009/09/cmake-how-to-use-cmake.html&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pdGsub3JnL1dpa2kvQ01ha2VfVXNlZnVsX1ZhcmlhYmxlcw==&#34;&gt;CMake 常用變數&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;簡介&#34;&gt;&lt;a href=&#34;#簡介&#34; class=&#34;headerlink&#34; title=&#34;簡介&#34;&gt;&lt;/a&gt;簡介&lt;/h2&gt;&lt;p&gt;CMake用來產生跨平台的專案建置文件，在windows下它會生成visual studio的專案檔(.sln) codeblock eclipse，在linux下它會生成Makefile。類似工具有autotools和qmake，不過autotools太複雜，qmake只限於qt使用。&lt;/p&gt;
&lt;p&gt;CMake用更抽象的語法來組織項目。例如用math表示數學庫，而不需要再具體指定到底是math.dll還是libmath.so。&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;類似功能的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5zY29ucy5vcmc=&#34;&gt;SCons&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FudC5hcGFjaGUub3JnLw==&#34;&gt;Apache ant&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;優點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stable&lt;/li&gt;
&lt;li&gt;fast&lt;/li&gt;
&lt;li&gt;支援Code::Blocks, Xcode等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缺點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需學習語法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iaXRidWNrZXQub3JnL3Njb25zL3Njb25zL3dpa2kvU2NvbnNWc090aGVyQnVpbGRUb29scw==&#34;&gt;專案建置工具比較&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;h3 id=&#34;GUI&#34;&gt;&lt;a href=&#34;#GUI&#34; class=&#34;headerlink&#34; title=&#34;GUI&#34;&gt;&lt;/a&gt;GUI&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;command line: &lt;code&gt;cmake&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;curse-based TUI: &lt;code&gt;ccmake&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;QT-based GUI: &lt;code&gt;cmake-gui&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Out-Of-Source-Build&#34;&gt;&lt;a href=&#34;#Out-Of-Source-Build&#34; class=&#34;headerlink&#34; title=&#34;Out-Of-Source Build&#34;&gt;&lt;/a&gt;Out-Of-Source Build&lt;/h3&gt;&lt;p&gt;將build資料和原始碼分離&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; 修改 CMakeLists.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mkdir build # will generate build files in this folder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake .. # the place that put CMakelists.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake -G &#34;Unix Makefiles&#34; [CMakeList.txt path] # 指定生成平台&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;執行結束後，build資料夾會出現各項中間檔、makefile 以及執行檔&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;優點&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可保持working directory的乾淨&lt;/li&gt;
&lt;li&gt;只要用新的資料夾，就可以產生多個不同的build，也可以隨時刪除&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;語法&#34;&gt;&lt;a href=&#34;#語法&#34; class=&#34;headerlink&#34; title=&#34;語法&#34;&gt;&lt;/a&gt;語法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;設定變數 &lt;code&gt;set(var hello)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;印出訊息 &lt;code&gt;message(${var})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;cmake_minimum_required&lt;/span&gt; (VERSION &lt;span class=&#34;number&#34;&gt;2.6&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;# minimum executable version of cmake&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;project&lt;/span&gt;(ex1) &lt;span class=&#34;comment&#34;&gt;# project name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_executable&lt;/span&gt;(ex1 main.c) &lt;span class=&#34;comment&#34;&gt;# build program ex1 from main.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在不同的資料夾下建立執行檔&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; relative destination&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake --help-variable CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;bash&#34;&gt; At Install-time use DESTDIR mechanism (Unix Makefiles)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;make DESTDIR=/tmp/testinstall install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;CMake語法&#34;&gt;&lt;a href=&#34;#CMake語法&#34; class=&#34;headerlink&#34; title=&#34;CMake語法&#34;&gt;&lt;/a&gt;CMake語法&lt;/h3&gt;&lt;p&gt;general purpose constructs: &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;unset&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;endif&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;CMake-變數&#34;&gt;&lt;a href=&#34;#CMake-變數&#34; class=&#34;headerlink&#34; title=&#34;CMake 變數&#34;&gt;&lt;/a&gt;CMake 變數&lt;/h3&gt;&lt;p&gt;變數不分大小寫，但我習慣性用大寫&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;變數指定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMake 有許多預設變數，以改變基本的運作，用&lt;code&gt;cmake --help-variables-list&lt;/code&gt;可以瀏覽&lt;/li&gt;
&lt;li&gt;在檔案內指定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set(CMAKE_INSTALL_PREFIX /home/eric/testinstall)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平台相關變數&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作業系統&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WIN32&lt;/code&gt; True on windows systems, including win64.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNIX&lt;/code&gt; True for UNIX and UNIX like operating systems.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;APPLE&lt;/code&gt; True if running on Mac OSX.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CYGWIN&lt;/code&gt; True for cygwin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;編譯器&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MSVC&lt;/code&gt; True when using Microsoft Visual C&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GNU&amp;lt;LANG&amp;gt;&lt;/code&gt; True if the compiler of this language is GNU&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINGW&lt;/code&gt; True if the compiler is MinGW&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;example&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; WIN32)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;option&lt;/span&gt; (WITH GUESS NAME &lt;span class=&#34;string&#34;&gt;&#34;Guess acronym name&#34;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;ON&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; WIN32)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;找需要的package&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;find package ( LibXml2 )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (LIBXML2 FOUND)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add definitions (−DHAVE XML &lt;span class=&#34;variable&#34;&gt;$&amp;#123;LIBXML2 DEFINITIONS &amp;#125;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;includedirectories( &lt;span class=&#34;variable&#34;&gt;$&amp;#123;LIBXML2 INCLUDE DIR &amp;#125;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XXXFOUND&lt;/code&gt;&lt;pre&gt;&lt;code&gt;- Set to false, or undefined, if we haven’t found, or don’t want to use XXX&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XXX_INCLUDE_DIRS&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The final set of include directories listed in one variable for use by client code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XXX_LIBRARIES&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The libraries to link against to use XXX. These should include full paths&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XXX_DEFINITIONS&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Definitions to use when compiling code that uses XXX&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XXX_EXECUTABLE&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Where to find the XXX tool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XXX_LIBRARY_DIRS&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Optionally, the final set of library directories listed in one variable for use by client code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to find an executable program&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find_program&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to find a library&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find_library&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to find any kind of file&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find_file&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to find a path where a file reside&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find_path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;file manipulation with file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;WRITE&lt;/code&gt;, &lt;code&gt;APPEND&lt;/code&gt;, &lt;code&gt;RENAME&lt;/code&gt;, &lt;code&gt;REMOVE&lt;/code&gt;, &lt;code&gt;MAKE DIRECTORY&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;advanced files operations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GLOB&lt;/code&gt;, &lt;code&gt;GLOB RECURSE [file name in a path]&lt;/code&gt;, &lt;code&gt;DOWNLOAD&lt;/code&gt;, &lt;code&gt;UPLOAD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;working with path&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file (TO CMAKE PATH /TO NATIVE PATH ...)&lt;/code&gt;, get filename component&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;execute an external process (with stdout, stderr and return code retrieval): execute process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;builtin list manipulation command&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LENGTH&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;APPEND&lt;/code&gt;, &lt;code&gt;FIND&lt;/code&gt;, &lt;code&gt;APPEND&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;REMOVE ITEM&lt;/code&gt;, &lt;code&gt;REMOVE AT&lt;/code&gt;, &lt;code&gt;REMOVE DUPLICATES REVERSE&lt;/code&gt;, &lt;code&gt;SORT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;string manipulation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;upper/lower case conversion, length, comparison, substring, regular expression match&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CMake-Application&#34;&gt;&lt;a href=&#34;#CMake-Application&#34; class=&#34;headerlink&#34; title=&#34;CMake Application&#34;&gt;&lt;/a&gt;CMake Application&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CPack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMake friend application&lt;/li&gt;
&lt;li&gt;used to easily package your software&lt;/li&gt;
&lt;li&gt;Package the resulting binaries with CPack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CTest&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make test&lt;/li&gt;
&lt;li&gt;runs systematic test with CTest and publish them with CDash&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wizard mode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmake -i, interactive equivalent of the Normal mode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Command mode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmake -E &lt;command&gt;, command line mode which offers basic command in a portable way&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;專案說明&#34;&gt;&lt;a href=&#34;#專案說明&#34; class=&#34;headerlink&#34; title=&#34;專案說明&#34;&gt;&lt;/a&gt;專案說明&lt;/h2&gt;&lt;p&gt;一個簡單的圍棋程式&lt;/p&gt;
&lt;p&gt;file tree&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;├── &lt;span class=&#34;selector-tag&#34;&gt;CMakeLists&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── *&lt;span class=&#34;selector-class&#34;&gt;.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── *&lt;span class=&#34;selector-class&#34;&gt;.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── &lt;span class=&#34;selector-tag&#34;&gt;previous_version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── &lt;span class=&#34;selector-tag&#34;&gt;CMakeLists&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── *&lt;span class=&#34;selector-class&#34;&gt;.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── *&lt;span class=&#34;selector-class&#34;&gt;.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;P?=binary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;EXEC=execs/&lt;span class=&#34;variable&#34;&gt;$(P)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OBJECTS=&lt;span class=&#34;variable&#34;&gt;$(P)&lt;/span&gt;.o *.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CXXFLAGS=-pipe -std=c++11 -Wall -Wextra -Wpedantic -Wno-unknown-pragmas -g -O3 -march=native -fopenmp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LDFLAGS=-lpthread&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CXX=g++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;all: main&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;parallel: main&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;parallel: CXXFLAGS+=-fopenmp -DPARALLEL # add additional flags&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;previous:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cd previous_version; make&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;binary: &lt;span class=&#34;variable&#34;&gt;$(OBJECTS)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	g++ &lt;span class=&#34;variable&#34;&gt;$(CXXFLAGS)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(OBJECTS)&lt;/span&gt; -flto -o &lt;span class=&#34;variable&#34;&gt;$(EXEC)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(LDFLAGS)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$(P)&lt;/span&gt;.o: *.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;variable&#34;&gt;$(CXX)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CXXFLAGS)&lt;/span&gt; main.cpp -c -o &lt;span class=&#34;variable&#34;&gt;$(P)&lt;/span&gt;.o &lt;span class=&#34;variable&#34;&gt;$(LDFLAGS)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# object files and it&#39;s dependency&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;board.o: mc_node.h liberty.h board.h board_constants.h ladder.h database.h strategy.h gameSetting.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;clean:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	rm -rf *.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;previous_clean:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cd previous_version; make clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;CMakeLists.txt in root directly&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;cmake_minimum_required&lt;/span&gt;(VERSION &lt;span class=&#34;number&#34;&gt;2.6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;project&lt;/span&gt;(MCTS_Go9x9)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# set default output file name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SET&lt;/span&gt;(BINARYNAME &lt;span class=&#34;string&#34;&gt;&#34;binary&#34;&lt;/span&gt; CACHE &lt;span class=&#34;keyword&#34;&gt;STRING&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#34;default binary file&#39;s name = binary&#34;&lt;/span&gt; FORCE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# set output directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(CMAKE_RUNTIME_OUTPUT_DIRECTORY &lt;span class=&#34;variable&#34;&gt;$&amp;#123;CMAKE_SOURCE_DIR&amp;#125;&lt;/span&gt;/execs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# compile parameters&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(CMAKE_CXX_COMPILER g++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;message&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#34;compiler: $&amp;#123;CMAKE_CXX_COMPILER&amp;#125;&#34;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(CMAKE_CXX_FLAGS &lt;span class=&#34;string&#34;&gt;&#34;-pipe -std=c++11 -Wall -Wextra -Wpedantic -Wno-unknown-pragmas -g -O3 -march=native -fopenmp&#34;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;message&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#34;cxxflags: $&amp;#123;CMAKE_CXX_FLAGS&amp;#125;&#34;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(CMAKE_EXE_LINKER_FLAGS &lt;span class=&#34;string&#34;&gt;&#34;-flto&#34;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(THREADS_PREFER_PTHREAD_FLAG &lt;span class=&#34;keyword&#34;&gt;ON&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;# pthread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;find_package&lt;/span&gt;(Threads REQUIRED) &lt;span class=&#34;comment&#34;&gt;# pthread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(SRC_FILES *.cpp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;message&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#34;source files: $&amp;#123;SRC_FILES&amp;#125;&#34;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# each executable is a target in GNU makefile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_executable&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$&amp;#123;BINARYNAME&amp;#125;&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$&amp;#123;SRC_FILES&amp;#125;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;target_link_libraries&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$&amp;#123;BINARYNAME&amp;#125;&lt;/span&gt; Threads::Threads) &lt;span class=&#34;comment&#34;&gt;# pthread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# parallel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_executable&lt;/span&gt;(parallel &lt;span class=&#34;variable&#34;&gt;$&amp;#123;SRC_FILES&amp;#125;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;target_compile_options&lt;/span&gt;(parallel PUBLIC -fopenmp -DPARALLEL) &lt;span class=&#34;comment&#34;&gt;# add additional compile parameters&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# we have another CMakeLists.txt in this directory, still follow the same method to generate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_subdirectory&lt;/span&gt;(previous_version)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Makefile-和-CMake-的語法比較&#34;&gt;&lt;a href=&#34;#Makefile-和-CMake-的語法比較&#34; class=&#34;headerlink&#34; title=&#34;Makefile 和 CMake 的語法比較&#34;&gt;&lt;/a&gt;Makefile 和 CMake 的語法比較&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;makefile&lt;/th&gt;
&lt;th&gt;cmake&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;COMPILE_FLAGS = -c -m32 -O3 -fPIC -w -DSOMETHING -Wall -I src/sdk/core&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SET( COMPILE_FLAGS &amp;quot;-c -m32 -O3 -fPIC -w DSOMETHING -Wall&amp;quot; ) INCLUDE_DIRECTORIES( src/sdk/core )&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#Makefile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ifdef&lt;/span&gt; STATIC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;# Do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;# Do something elseendif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# CMake&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;OPTION&lt;/span&gt;(STATIC &lt;span class=&#34;string&#34;&gt;&#34;Brief description&#34;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;ON&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;IF&lt;/span&gt;( STATIC )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;# Do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ELSE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;# Do something else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ENDIF&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;using libraries&lt;br&gt;call find_package with the name of your library, which will invoke a library search script from your cmake module path. This script (which is also written in CMake) will attempt to detect the location of the library’s header and lib files and store them in a couple of CMake variables that can then be passed to the according CMake commands like include_directories and target_link_libraries.&lt;/p&gt;
&lt;p&gt;There are two problems with this approach: First, you need a search script. Fortunately, CMake ships with search scripts for Pthreads, Boost and a couple of others, but if you are using a more exotic library, you might have to write the search script yourself, which is kind of an arcane experience at first…&lt;/p&gt;
&lt;p&gt; 並不會刪除自身產出的快取和中間檔&lt;/p&gt;
&lt;p&gt;The following Makefile builds an executable named prog from the sources prog1.c, prog2.c, prog3.c and main.c. prog is linked against libmystatlib.a and libmydynlib.so which are both also built from source. Additionally, prog uses the library libstuff.a in stuff/lib and its header in stuff/include. The Makefile by default builds a release target, but offers also a debug target:&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#Makefile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CC = gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CPP = g++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RANLIB = ar rcs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RELEASE = -c -O3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DEBUG = -c -g -D_DEBUG&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;INCDIR = -I./stuff/&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LIBDIR = -L./stuff/lib -L.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LIBS = -lstuff -lmystatlib -lmydynlib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CFLAGS = &lt;span class=&#34;variable&#34;&gt;$(RELEASE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PROGOBJS = prog1.o prog2.o prog3.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;prog: main.o &lt;span class=&#34;variable&#34;&gt;$(PROGOBJS)&lt;/span&gt; mystatlib mydynlib&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; main.o &lt;span class=&#34;variable&#34;&gt;$(PROGOBJS)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(LIBDIR)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(LIBS)&lt;/span&gt; -o prog&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;debug: CFLAGS=&lt;span class=&#34;variable&#34;&gt;$(DEBUG)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;debug: prog&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;mystatlib: mystatlib.o&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$(RANLIB)&lt;/span&gt; libmystatlib.a mystatlib.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;mydynlib: mydynlib.o&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$(CPP)&lt;/span&gt; -shared mydynlib.o -o libmydynlib.so&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;%.o: %.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(INCDIR)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt; -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;%.o: %.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$(CPP)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(INCDIR)&lt;/span&gt; -fPIC  &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt; -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Here is a CMakeLists.txtthat does (almost) exactly the same, with some comments to underline the similarities to the Makefile:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#CMakeLists.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;cmake_minimum_required&lt;/span&gt;(VERSION &lt;span class=&#34;number&#34;&gt;2.8&lt;/span&gt;)                    &lt;span class=&#34;comment&#34;&gt;# stuff not directly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;project&lt;/span&gt;(example)                                       &lt;span class=&#34;comment&#34;&gt;# related to building&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;include_directories&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$&amp;#123;CMAKE_SOURCE_DIR&amp;#125;&lt;/span&gt;/stuff/&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;# -I flags for compiler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;link_directories&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$&amp;#123;CMAKE_SOURCE_DIR&amp;#125;&lt;/span&gt;/stuff/lib)        &lt;span class=&#34;comment&#34;&gt;# -L flags for linker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(PROGSRC prog1.c prog2.c prog3.c)                   &lt;span class=&#34;comment&#34;&gt;# define variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_executable&lt;/span&gt;(prog main.c &lt;span class=&#34;variable&#34;&gt;$&amp;#123;PROGSRC&amp;#125;&lt;/span&gt;)                 &lt;span class=&#34;comment&#34;&gt;# define executable target prog, specify sources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;target_link_libraries&lt;/span&gt;(prog mystatlib mydynlib stuff)   &lt;span class=&#34;comment&#34;&gt;# -l flags for linking prog target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_library&lt;/span&gt;(mystatlib STATIC mystatlib.c)              &lt;span class=&#34;comment&#34;&gt;# define static library target mystatlib, specify sources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_library&lt;/span&gt;(mydynlib SHARED mydynlib.cpp)              &lt;span class=&#34;comment&#34;&gt;# define shared library target mydynlib, specify sources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#extra flags for linking mydynlib&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set_target_properties&lt;/span&gt;(mydynlib PROPERTIES POSITION_INDEPENDENT_CODE &lt;span class=&#34;keyword&#34;&gt;TRUE&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#alternatively:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#set_target_properties(mydynlib PROPERTIES COMPILE_FLAGS &#34;-fPIC&#34;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In this simple example, the most important differences are:&lt;/p&gt;
&lt;p&gt;CMake recognizes which compilers to use for which kind of source. Also, it invokes the right sequence of commands for each type of target. Therefore, there is no explicit specification of commands like $(CC)…, $(RANLIB)… and so on.&lt;br&gt;All usual compiler/linker flags dealing with inclusion of header files, libraries, etc. are replaced by platform independent / build system independent commands.&lt;br&gt;Debugging flags are included by either setting the variable CMAKE_BUILD_TYPE to “Debug”, or by passing it to CMake when invoking the program: cmake -DCMAKE_BUILD_TYPE:STRING=Debug.&lt;br&gt;CMake offers also the platform independent inclusion of the ‘-fPIC’ flag (via the POSITION_INDEPENDENT_CODE property) and many others. Still, more obscure settings can be implemented by hand in CMake just as well as in a Makefile (by using COMPILE_FLAGS and similar properties). Of course CMake really starts to shine when third party libraries (like OpenGL) are included in a portable manner.&lt;br&gt;The build process has one step if you use a Makefile, namely typing&lt;br&gt;make at the command line. For CMake, there are two steps: First, you need to setup your build environment (either by typing cmake &lt;source_dir&gt; in your build directory or by running some GUI client). This creates a Makefile or something equivalent, depending on the build system of your choice (e.g. make on Unixes or VC++ or MinGW + Msys on Windows). The build system can be passed to CMake as a parameter; however, CMake makes reasonable default choices depending on your system configuration. Second, you perform the actual build in the selected build system.&lt;br&gt;Sources and build instructions are available at &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Job2VsemVsL21ha2VfY21ha2U=&#34;&gt;https://github.com/rhoelzel/make_cmake&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h1 id=&#34;設定變數範例&#34;&gt;&lt;a href=&#34;#設定變數範例&#34; class=&#34;headerlink&#34; title=&#34;設定變數範例&#34;&gt;&lt;/a&gt;設定變數範例&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;set(MYLIBPATH &amp;quot;C:\\Documents and
        Settings\\Jing\\Desktop\\opencv_bin\\lib\\release\\&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用變數範例&#34;&gt;&lt;a href=&#34;#使用變數範例&#34; class=&#34;headerlink&#34; title=&#34;使用變數範例&#34;&gt;&lt;/a&gt;使用變數範例&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;target_link_libraries(${name} ${MYLIBPATH}cv200.lib)&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;建立-macro-範例&#34;&gt;&lt;a href=&#34;#建立-macro-範例&#34; class=&#34;headerlink&#34; title=&#34;建立 macro 範例&#34;&gt;&lt;/a&gt;建立 macro 範例&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;MACRO(MY_DEFINE_EXAMPLE name srcs)
      add_executable(${name} ${srcs})
ENDMACRO(MY_DEFINE_EXAMPLE)&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用-macro-範例&#34;&gt;&lt;a href=&#34;#使用-macro-範例&#34; class=&#34;headerlink&#34; title=&#34;使用 macro 範例&#34;&gt;&lt;/a&gt;使用 macro 範例&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;MY_DEFINE_EXAMPLE(demo     demo.cpp)&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;存取環境變數的範例&#34;&gt;&lt;a href=&#34;#存取環境變數的範例&#34; class=&#34;headerlink&#34; title=&#34;存取環境變數的範例&#34;&gt;&lt;/a&gt;存取環境變數的範例&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;MESSAGE(&amp;quot;$ENV{PATH}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;加入-Post-Build-的範例&#34;&gt;&lt;a href=&#34;#加入-Post-Build-的範例&#34; class=&#34;headerlink&#34; title=&#34;加入 Post Build 的範例&#34;&gt;&lt;/a&gt;加入 Post Build 的範例&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;add_custom_command(
        TARGET ${MyPluginTarget}
        POST_BUILD
        COMMAND copy
                       ${CMAKE_CFG_INTDIR}\\${MyPluginTarget}.dll
                       &amp;quot;C:\\Program Files\\Mozilla Firefox\\
                         plugins\\${MyPluginTarget}.dll&amp;quot;
    )&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若你的執行檔是 Windows 程式, 請加入 Win32&lt;br&gt;&lt;code&gt;add_executable(demo WIN32 ${SOURCE})&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;MFC-設定&#34;&gt;&lt;a href=&#34;#MFC-設定&#34; class=&#34;headerlink&#34; title=&#34;MFC 設定&#34;&gt;&lt;/a&gt;MFC 設定&lt;/h2&gt;&lt;figure class=&#34;highlight sqf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(CMAKE_MFC_FLAG &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set_target_properties(MyApp      PROPERTIES&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;COMPILE_DEFINITIONS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;_AFXDLL&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;_UNICODE&lt;/span&gt;, UNICODE,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;_BIND_TO_CURRENT_CRT_VERSION&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;_BIND_TO_CURRENT_MFC_VERSION&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LINK_FLAGS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34; /ENTRY:\&#34;&lt;/span&gt;wWinMainCRTStartup\&lt;span class=&#34;string&#34;&gt;&#34;    &#34;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;add_executable(demo WIN32 ${SOURCE})&lt;/p&gt;
&lt;h1 id=&#34;設定-source-code-群組範例&#34;&gt;&lt;a href=&#34;#設定-source-code-群組範例&#34; class=&#34;headerlink&#34; title=&#34;設定 source code 群組範例&#34;&gt;&lt;/a&gt;設定 source code 群組範例&lt;/h1&gt;&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# ex1:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;file&lt;/span&gt;(GLOB_RECURSE myRESOURCE_FILE 「*.def」 「*.rc」)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;source_group&lt;/span&gt;(Resource FILES &lt;span class=&#34;variable&#34;&gt;$&amp;#123;myRESOURCE_FILE &amp;#125;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# ex2:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;source_group&lt;/span&gt;(abc_group REGULAR_EXPRESSION &lt;span class=&#34;string&#34;&gt;&#34;abc.*&#34;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;source_group&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;_group REGULAR_EXPRESSION &lt;span class=&#34;string&#34;&gt;&#34;123.*&#34;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(SOURCE abc.cpp abc.h &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;.cpp &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;.h abc.rc main.cpp main.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;resource.h stdafx.cpp  stdafx.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./res/&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;.ico ./res/&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;.rc2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_executable&lt;/span&gt;(demo WIN32 &lt;span class=&#34;variable&#34;&gt;$&amp;#123;SOURCE&amp;#125;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;建立-dll-範例&#34;&gt;&lt;a href=&#34;#建立-dll-範例&#34; class=&#34;headerlink&#34; title=&#34;建立 dll 範例&#34;&gt;&lt;/a&gt;建立 dll 範例&lt;/h1&gt;&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_library&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;target&lt;/span&gt; SHARED a.c b.c);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#console 與 windows (/SUBSYSTEM:CONSOLE or /SUBSYSTEM:WINDOWS)&lt;br&gt;a. 如果你的程式是 Windows.&lt;br&gt;=&amp;gt; 則 add_executable(demo WIN32 ${SOURCE})&lt;br&gt;b. 如果是 console, 則&lt;br&gt;=&amp;gt; 則 add_executable(demo ${SOURCE})&lt;/p&gt;
&lt;p&gt;好用的變數 (more)&lt;br&gt;&lt;code&gt;PROJECT_SOURCE_DIR&lt;/code&gt;:  包含 project 命令的 CMakeFile.txt 完整路徑. (ex: c:\abc)&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(PROJECT_HOME &lt;span class=&#34;variable&#34;&gt;$&amp;#123;PROJECT_SOURCE_DIR&amp;#125;&lt;/span&gt;\\..\\)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Reference&#34;&gt;&lt;a href=&#34;#Reference&#34; class=&#34;headerlink&#34; title=&#34;Reference&#34;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI3NDU1OTYzL2Fuc3dlci8zNjcyMjk5Mg==&#34;&gt;make makefile cmake qmake都是什麼，有什麼區別？-玟清的回答-知乎&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLnNpbXBseXBhdHJpY2suY29tL3Bvc3RzLzIwMTUvMDYtMTktY21ha2Utbm90ZXMv&#34;&gt;CMake筆記&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1RoZUVyay9DTWFrZS10dXRvcmlhbA==&#34;&gt;Eric Noulard - CMake tutorial&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpYm9va3Mub3JnL3dpa2kvQ01ha2VfJUU1JTg1JUE1JUU5JTk2JTgw&#34;&gt;CMake 入門 - 維基教科書，自由的教學讀本&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDg4MjAzMC9jbWFrZS12cy1tYWtlLXNhbXBsZS1jb2Rlcw==&#34;&gt;stackoverflow - Cmake vs make sample codes?&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDA4NTk0NS9jbWFrZS1jZmxhZ3MtY3h4ZmxhZ3MtbW9kaWZpY2F0aW9u&#34;&gt;stackoverflow - cmake CFLAGS CXXFLAGS modification&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY2NTA4MjUvY29udmVydGluZy1vbGQtbWFrZWZpbGUtdG8tY21ha2U=&#34;&gt;stackoverflow - Converting old makefile to CMake&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTk4NTgzOS9jcmVhdGluZy1jbWFrZWxpc3RzLWZpbGUtZnJvbS1leGlzdGluZy1tYWtlZmlsZQ==&#34;&gt;stackoverflow - Creating CMakeLists file from existing Makefile&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="CMake" />
        <category term="Makefile" />
        <category term="Linux" />
        <updated>2017-01-17T10:12:50.000Z</updated>
    </entry>
    <entry>
        <id>http://gitqwerty777.github.io/makefile/</id>
        <title>建立Makefile</title>
        <link rel="alternate" href="http://gitqwerty777.github.io/makefile/"/>
        <content type="html">&lt;p&gt;此篇文章十分清楚易懂，可作為初學之用&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h3 id=&#34;使用make好處&#34;&gt;&lt;a href=&#34;#使用make好處&#34; class=&#34;headerlink&#34; title=&#34;使用make好處&#34;&gt;&lt;/a&gt;使用make好處&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方便專案管理&lt;/li&gt;
&lt;li&gt;會透過檔案比對，依照相依性來編譯，不會全都編浪費時間&lt;/li&gt;
&lt;li&gt;可以同時編譯函式庫或是檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;make常用指令&#34;&gt;&lt;a href=&#34;#make常用指令&#34; class=&#34;headerlink&#34; title=&#34;make常用指令&#34;&gt;&lt;/a&gt;make常用指令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make -k&lt;/code&gt;: 會讓make在遇到錯誤的時候仍然運行，而不會在第一個問題中斷&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make -n&lt;/code&gt;: 只印出將會進行的工作，而不會真的執行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make -f makefile_name&lt;/code&gt;: make預設執行名為makefile的檔案，此命令可指定makefile檔案名稱和位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;: 註解  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;make指令格式&#34;&gt;&lt;a href=&#34;#make指令格式&#34; class=&#34;headerlink&#34; title=&#34;make指令格式&#34;&gt;&lt;/a&gt;make指令格式&lt;/h3&gt;&lt;p&gt;預設的target是”all”, 若makefile中沒有all, 則是第一個target&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;make [option] [target]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;make -n all clean &lt;span class=&#34;comment&#34;&gt;# 多個target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;make -f makefile2 install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;撰寫makefile檔案&#34;&gt;&lt;a href=&#34;#撰寫makefile檔案&#34; class=&#34;headerlink&#34; title=&#34;撰寫makefile檔案&#34;&gt;&lt;/a&gt;撰寫makefile檔案&lt;/h3&gt;&lt;p&gt;makefile是由一堆「目標」和其「相依性檔案」還有「法則」所組成的    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[target] 目標 - 產生出來的東西    &lt;ul&gt;
&lt;li&gt;用了 &lt;code&gt;.PHONY&lt;/code&gt; 來指定 clean 為 fake 項目，所以 make 不會去檢查目錄中是否存在了一個名為 clean 的檔案。如此也可以提昇 make 的執行效率&lt;ul&gt;
&lt;li&gt;常用的偽target&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.PHONY: all clean install&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;all: ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;install: myapp app.doc   &lt;span class=&#34;comment&#34;&gt;#安裝套件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     cp myapp app.doc /usr/&lt;span class=&#34;built_in&#34;&gt;local&lt;/span&gt;/myapp/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;clean: &lt;span class=&#34;comment&#34;&gt;#刪除產生出來的目的檔&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	rm -rf *.o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[dependency] 相依性項目 - 若 dependency 的檔案有改動過，則重新產生 target&lt;/li&gt;
&lt;li&gt;[rule] 法則 - 如何產生目標&lt;ul&gt;
&lt;li&gt;使用Tab作為開頭&lt;/li&gt;
&lt;li&gt;使用 Shell Script 語法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;[target]: [dependency] [dependency]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     [rule]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     [rule]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;[target]: [dependency]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     [rule]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;註1: makefile的命令和shell不同的地方: 每行命令在&lt;strong&gt;分開的shell中獨立執行&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;wrongClean:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cd junkdir&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	rm -f * &lt;span class=&#34;comment&#34;&gt;# don&#39;t do that! &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;correctClean1:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cd junkdir &amp;amp;&amp;amp; rm -f *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;correctClean2:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	rm -f junkdir/*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;del&gt;如果寫錯的話，至少錯誤的makefile被刪除了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;註2: 在命令行首加上&lt;code&gt;@&lt;/code&gt;，代表執行程式但不顯示在螢幕上。在命令行首加上&lt;code&gt;-&lt;/code&gt;，代表執行命令時回傳非零值仍然繼續執行()&lt;/p&gt;
&lt;p&gt;例：要產生all的話，需要兩個檔案myapp和app.doc(主程式和說明檔)，make開始會去找尋如何產生myapp和 app.doc的方法，所以myapp會成為下一個要產生出來的目標。用gcc main.o a.o b.o -o myapp來產生myapp……，以此類推&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;all: myapp app.doc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;myapp: main.o a.o b.o&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     gcc main.o a.o b.o -o myapp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;main.o: main.c a.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     gcc -c main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;a.o: a.c a.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     gcc -c a.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;b.o: b.c b.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     gcc -c b.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;在makefile中, 相依性順序是很重要的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Makefile的變數和巨集-macro&#34;&gt;&lt;a href=&#34;#Makefile的變數和巨集-macro&#34; class=&#34;headerlink&#34; title=&#34;Makefile的變數和巨集(macro)&#34;&gt;&lt;/a&gt;Makefile的變數和巨集(macro)&lt;/h2&gt;&lt;p&gt;設定變數的方法  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將export命令放在shell啟動script &lt;code&gt;.bashrc&lt;/code&gt;或&lt;code&gt;.zshrc&lt;/code&gt;…&lt;ul&gt;
&lt;li&gt;永遠都有效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在shell中設定變數 &lt;code&gt;export CC=gcc&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;終端機開啟期間有效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在執行命令前設定 &lt;code&gt;CC=gcc | make&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;針對特定命令的變數&lt;/li&gt;
&lt;li&gt;設定變數需要在實際命令之前&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;可以直接設定變數&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make CFLAGS=&amp;quot;-g -Wall&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CFLAGS=&amp;quot;-g -Wall&amp;quot; make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在makefile中設定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?=&lt;/code&gt;：若變數未定義，則替它指定新的值。否則，採用原有的值。  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;FOO ?= bar&lt;/code&gt;： 若 FOO 未定義，則 FOO = bar；若 FOO 已定義，則 FOO 的值維持不變。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指定時，等號兩側不可有空格&lt;/p&gt;
&lt;p&gt;改變副檔名  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SRC=a.c b.c&lt;/li&gt;
&lt;li&gt;OBJ=$(SRC:.c=.o) # equals to a.o b.o&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有幾個特別的內部巨集，讓makeifle更加簡明  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$?&lt;/code&gt; 代表需要重建的相依性項目(檔案有被更新過)，也就是 dependencies 中，比 targets 的修改日期還新檔案。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$@&lt;/code&gt; 目前的target&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$*&lt;/code&gt; 不含副檔名的target&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&amp;lt;&lt;/code&gt; 第一個 dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;還有兩個有用的特別字元，可以加在要執行的命令之前  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt; 即使該行指令出錯，也不會中斷執行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@&lt;/code&gt; 不會在terminal顯示該行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CC = gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CFLAGS = -Wall -ansi -g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OBJS = main.o a.o b.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;INSTALL_PATH = /usr/local/myapp/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;all: myapp app.doc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;myapp: &lt;span class=&#34;variable&#34;&gt;$(OBJS)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(OBJS)&lt;/span&gt; -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;main.o: main.c a.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; -c -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;a.o: a.c a.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; -c -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;b.o: b.c b.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; -c -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;install: myapp app.doc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     cp myapp app.doc &lt;span class=&#34;variable&#34;&gt;$(INSTALL_PATH)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Makefile-隱性法則-implicit-rule&#34;&gt;&lt;a href=&#34;#Makefile-隱性法則-implicit-rule&#34; class=&#34;headerlink&#34; title=&#34;Makefile 隱性法則(implicit rule)&#34;&gt;&lt;/a&gt;Makefile 隱性法則(implicit rule)&lt;/h2&gt;&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CC = gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CFLAGS = -Wall -ansi -g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OBJS = main.o a.o b.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;all: myapp app.doc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;myapp: &lt;span class=&#34;variable&#34;&gt;$(OBJS)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(OBJS)&lt;/span&gt; -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;main.o: main.c a.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;a.o: a.c a.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;b.o: b.c b.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;makefile會在main.o自動產生規則 &lt;code&gt;gcc -Wall -ansi -g -c -o main.o main.c&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若dependency為c：&lt;code&gt;$(CC) $(CFLAGS) $(LDFLAGS) [dependencies]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若dependency為c++：&lt;code&gt;$(CXX) $(CXXFLAGS) $(LDFLAGS) [dependencies]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若dependency為object(建立執行檔)：&lt;code&gt;$(CC) $(LDFLAGS) [dependencies] $(LDLIBS)&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9tYWtlL21hbnVhbC9odG1sX25vZGUvQ2F0YWxvZ3VlLW9mLVJ1bGVzLmh0bWwjQ2F0YWxvZ3VlLW9mLVJ1bGVz&#34;&gt;隱性法則列表&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;Makefile-檔尾法則&#34;&gt;&lt;a href=&#34;#Makefile-檔尾法則&#34; class=&#34;headerlink&#34; title=&#34;Makefile 檔尾法則&#34;&gt;&lt;/a&gt;Makefile 檔尾法則&lt;/h2&gt;&lt;p&gt;使用檔尾的延伸檔名作為法則，格式 &lt;code&gt;.[old_suffix].[new_suffix]&lt;/code&gt;  &lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;.c.o:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; -c -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;.cpp.o:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     g++ -c &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;INCLUDE_PATH = &lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;all: myapp.exe app.doc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;myapp.exe: &lt;span class=&#34;variable&#34;&gt;$(OBJS)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(OBJS)&lt;/span&gt; -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;.c.o:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; -I&lt;span class=&#34;variable&#34;&gt;$(INCLUDE_PATH)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; -c -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;檔尾法則只可以用在本目錄&lt;/p&gt;
&lt;p&gt;這目錄下面所有的.c檔變成.o檔，而法則就是去編譯它，而如果你想更懶一點的話還可以完全不寫，直接使用內建的法則，這樣也可以直接把目錄下面的所有檔都編好，為什麼呢？因為你要編出myapp的時候需要使用到$(OBJS)所以，就算你不寫.c.o或是任何的法則，make預設都會自己產生.o檔讓你可以連結出主程式。  &lt;/p&gt;
&lt;p&gt;makefile也有支援萬用字元  &lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;%.o: %.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; -I&lt;span class=&#34;variable&#34;&gt;$(INCLUDE_PATH)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; -c -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;萬用字元法則比較適合用於編譯一個大型的函式庫，而檔尾法則適合編譯一個目錄下面所有的檔案。&lt;/p&gt;
&lt;h2 id=&#34;專案討論&#34;&gt;&lt;a href=&#34;#專案討論&#34; class=&#34;headerlink&#34; title=&#34;專案討論&#34;&gt;&lt;/a&gt;專案討論&lt;/h2&gt;&lt;h3 id=&#34;Make-Makefile-with-Release-and-Debug-build&#34;&gt;&lt;a href=&#34;#Make-Makefile-with-Release-and-Debug-build&#34; class=&#34;headerlink&#34; title=&#34;Make Makefile with Release and Debug build&#34;&gt;&lt;/a&gt;Make Makefile with Release and Debug build&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83OTIyMTcvc2ltcGxlLW1ha2VmaWxlLXdpdGgtcmVsZWFzZS1hbmQtZGVidWctYnVpbGRzLWJlc3QtcHJhY3RpY2Vz&#34;&gt;simple-makefile-with-release-and-debug-builds-best-practices&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDc5ODMyL2hvdy1jYW4taS1jb25maWd1cmUtbXktbWFrZWZpbGUtZm9yLWRlYnVnLWFuZC1yZWxlYXNlLWJ1aWxkcw==&#34;&gt;how-can-i-configure-my-makefile-for-debug-and-release-builds&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;&lt;a href=&#34;#參考資料&#34; class=&#34;headerlink&#34; title=&#34;參考資料&#34;&gt;&lt;/a&gt;參考資料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2hzaWFuLXN0dWRpby5ibG9nc3BvdC50dy8yMDA4LzA5L21ha2VmaWxlXzA4Lmh0bWw=&#34;&gt;撰寫Makefile教學&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RldHJhbGV0Lmx1bmEuY29tLnR3Lz9vcD1WaWV3QXJ0aWNsZSZhcnRpY2xlSWQ9MTg1&#34;&gt;Makefile 語法簡介&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="linux" />
        <category term="makefile" />
        <updated>2015-02-22T15:31:44.000Z</updated>
    </entry>
</feed>
