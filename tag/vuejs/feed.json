{
    "version": "https://jsonfeed.org/version/1",
    "title": "QWERTY • All posts by \"vuejs\" tag",
    "description": "Programming | Computer Science | Thought",
    "home_page_url": "http://gitqwerty777.github.io",
    "items": [
        {
            "id": "http://gitqwerty777.github.io/foreign-language-police/",
            "url": "http://gitqwerty777.github.io/foreign-language-police/",
            "title": "如何當稱職的支語警察？",
            "date_published": "2020-09-13T09:25:34.000Z",
            "content_html": "<p><img data-src=\"/img/Other/foreign-terms-police.png\" alt=\"\"></p>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>PTT 上常有支語警察</p>\n<p>也常發現 google 翻譯的中文常常會<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2V0bi5jb20vTmV3cy5hc3B4P05ld3NJRD03NDY3OTM=\">翻譯成中國慣用語<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>所以就寫了一個支語警察的網站：<a href=\"/foreign-terms-police\">支語警察</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>文章分詞</li>\n<li>標出非台灣習慣用語</li>\n<li>從資料庫尋找對應的用語</li>\n<li>若無對應用語則尋找其解釋</li>\n</ol>\n<h2 id=\"資料庫\"><a href=\"#資料庫\" class=\"headerlink\" title=\"資料庫\"></a>資料庫</h2><p>基本上都是使用現有的詞典，其資料都是人工更新的，<strong>目前還沒有自動辨識習慣用語的方法</strong>。</p>\n<h3 id=\"萌典\"><a href=\"#萌典\" class=\"headerlink\" title=\"萌典\"></a>萌典</h3><p>從萌典的兩岸字典獲取用語中台灣和中國的意思不同者(同字不同義，同義不同字)</p>\n<h3 id=\"開放中文轉換-OpenCC\"><a href=\"#開放中文轉換-OpenCC\" class=\"headerlink\" title=\"開放中文轉換 OpenCC\"></a>開放中文轉換 OpenCC</h3><p>支持詞彙級別的轉換、異體字轉換和地區習慣用語及字體轉換（中國大陸、臺灣、香港、日本）。</p>\n<p>使用詞典對應的方式實作，像是簡體轉繁體就使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0JZVm9pZC9PcGVuQ0MvYmxvYi9tYXN0ZXIvZGF0YS9kaWN0aW9uYXJ5L1NUUGhyYXNlcy50eHQ=\">此詞典<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h2><ul>\n<li>支援單字或文章檢測</li>\n<li>Google Trends<ul>\n<li>使用台灣的搜尋趨勢比較原本用語及對應的外來用語</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"困難\"><a href=\"#困難\" class=\"headerlink\" title=\"困難\"></a>困難</h3><ol>\n<li>資料庫通常沒有收錄網路流行語</li>\n<li>同詞不同義<ol>\n<li>質量：中國常用於表示「品質」，但兩岸都有「重量」的意思 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHR0LmNjL2Jicy9DX0NoYXQvTS4xNTk1NTU0NDM0LkEuNjc2Lmh0bWw=\">範例<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>土豆：中國為「馬鈴薯」，台灣為「花生」</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9lZGljdC50dy8=\">萌典<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0JZVm9pZC9PcGVuQ0M=\">OpenCC<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHR0LmNjL2Jicy9DX0NoYXQvTS4xNTk1NTEyNDgwLkEuNTY5Lmh0bWw=\">[閒聊] 支語警察是誰畫的？<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "自然語言處理",
                "外國用語",
                "萌典",
                "opencc",
                "PTT",
                "vuejs"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/vuejs/",
            "url": "http://gitqwerty777.github.io/vuejs/",
            "title": "vuejs 語法",
            "date_published": "2020-09-06T06:50:12.000Z",
            "content_html": "<blockquote>\n<p>因為mustache語法(雙大括號)會被判斷成render命令，改成全形符號</p>\n</blockquote>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>採用簡潔的模板語法來宣告式地將資料渲染進 DOM 的系統</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html part --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  ｛｛ message ｝｝</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js part</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello Vue.js!'</span></span><br><span class=\"line\">    todo: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 html tag 中 加入<code>v-</code>開頭的attributes以實作邏輯</p>\n<a id=\"more\"></a>\n\n<h2 id=\"元件化應用構建\"><a href=\"#元件化應用構建\" class=\"headerlink\" title=\"元件化應用構建\"></a>元件化應用構建</h2><p><code>v-bind</code>: todo-item 元件接受一個”prop”，類似於一個自定義 attribute。這個 prop 名為 todo。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;ol&gt;</span><br><span class=\"line\">    &lt;todo-item</span><br><span class=\"line\">      v-<span class=\"keyword\">for</span>=<span class=\"string\">\"item in groceryList\"</span></span><br><span class=\"line\">      v-bind:todo=<span class=\"string\">\"item\"</span></span><br><span class=\"line\">      v-bind:key=<span class=\"string\">\"item.id\"</span></span><br><span class=\"line\">    &gt;&lt;<span class=\"regexp\">/todo-item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>ol&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Vue.component('todo-item', &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['todo'],</span></span><br><span class=\"line\"><span class=\"regexp\">  template: '&lt;li&gt;｛｛ todo.text ｝｝&lt;/</span>li&gt;<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">var app = new Vue(&#123;</span></span><br><span class=\"line\">  el: '#app',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    groceryList: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">text</span>: <span class=\"string\">'蔬菜'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'乳酪'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'隨便其它什麼人吃的東西'</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Instance\"><a href=\"#Instance\" class=\"headerlink\" title=\"Instance\"></a>Instance</h2><p>用 Vue 函式建立一個新的 Vue 例項<br>當一個 Vue 例項被建立時，它將 data 物件中的所有的 property 加入到 Vue 的響應式系統中<br>只有當例項被建立時就已經存在於 data 中的 property 才是響應式的<br>唯一的例外是使用<code>Object.freeze()</code>，這會阻止修改現有的 property，也意味著響應系統無法再追蹤變化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我們的資料物件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 該物件被加入到一個 Vue 例項中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 獲得這個例項上的 property</span></span><br><span class=\"line\"><span class=\"comment\">// 返回源資料中對應的欄位</span></span><br><span class=\"line\">vm.a == data.a <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 設定 property 也會影響到原始資料</span></span><br><span class=\"line\">vm.a = <span class=\"number\">2</span></span><br><span class=\"line\">data.a <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ……反之亦然</span></span><br><span class=\"line\">data.a = <span class=\"number\">3</span></span><br><span class=\"line\">vm.a <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">vm.$data === data <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">vm.$el === <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// $watch 是一個例項方法</span></span><br><span class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue, oldValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這個回撥將在 `vm.a` 改變後呼叫</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命週期鉤子\"><a href=\"#生命週期鉤子\" class=\"headerlink\" title=\"生命週期鉤子\"></a>生命週期鉤子</h2><p><code>created</code>、<code>mounted</code>、<code>updated</code> 和 <code>destroyed</code></p>\n<p><strong>不要在選項 property 或 callback 使用箭頭函式</strong>。因為箭頭函式並沒有 this，this 會作為變數一直向上級詞法作用域查詢，直至找到為止，經常導致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之類的錯誤。</p>\n<h2 id=\"資料繫結\"><a href=\"#資料繫結\" class=\"headerlink\" title=\"資料繫結\"></a>資料繫結</h2><p>資料繫結最常見的形式就是使用“Mustache”語法 (雙大括號) 的文字插值：<br>雙大括號會將資料解釋為普通文字，而非 HTML 程式碼</p>\n<p><code>&lt;span&gt;Message: ｛｛ msg ｝｝&lt;/span&gt;</code></p>\n<p>可使用表示式<br><code>｛｛ ok ? &#39;YES&#39; : &#39;NO&#39; ｝｝</code></p>\n<p>透過使用 <code>v-once</code> 指令，你也能執行一次性地插值，當資料改變時，插值處的內容不會更新。但請留心這會影響到該節點上的其它資料繫結：</p>\n<p><code>&lt;span v-once&gt;這個將不會改變: ｛｛ msg ｝｝&lt;/span&gt;</code></p>\n<p>為了輸出真正的 HTML，你需要使用 <code>v-html</code> 指令<br><code>&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;</code><br><strong>動態渲染 HTML 可能會非常危險，因為它很容易導致 XSS 攻擊。請只對可信內容使用 HTML 插值，絕不要對使用者提供的內容使用插值。</strong></p>\n<p>Mustache 語法不能作用在 HTML attribute 上，應該使用 <code>v-bind</code> 指令：<br><code>&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</code><br><code>&lt;div v-bind:id=&quot;&#39;list-&#39; + id&quot;&gt;&lt;/div&gt;</code></p>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>指令 (Directives) 是帶有 <code>v-</code> 字首的特殊 attribute。<br>指令 attribute 的值預期是單個 JavaScript 表示式 (<code>v-for</code> 是例外)。<br>指令的職責是，當表示式的值改變時，將其產生的連帶影響，響應式地作用於 DOM。</p>\n<p>一些指令能夠接收一個“引數”，在指令名稱之後以冒號表示。例如，<code>v-bind</code> 指令可以用於響應式地更新 HTML attribute<br><code>&lt;a v-bind:href&gt;</code></p>\n<p>從 2.6.0 開始，可以用方括號括起來的 JavaScript 表示式作為一個指令的引數：<br><code>&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;</code></p>\n<p>動態引數預期會求出一個字串，異常情況下值為 null。這個特殊的 null 值可以用於移除繫結。任何其它非字串型別的值都將會觸發一個警告。</p>\n<h3 id=\"修飾符\"><a href=\"#修飾符\" class=\"headerlink\" title=\"修飾符\"></a>修飾符</h3><p>修飾符 (modifier) 是以 <code>.</code> 指明的特殊字尾，用於指出一個指令應該以特殊方式繫結。例如<code>.prevent</code> 修飾符告訴 <code>v-on</code> 指令對於觸發的事件呼叫 <code>event.preventDefault()</code></p>\n<p><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;</code></p>\n<p>Vue 為 <code>v-bind</code> 和 <code>v-on</code> 這兩個最常用的指令，提供了特定簡寫：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整語法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 縮寫 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整語法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 縮寫 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"計算屬性-computed\"><a href=\"#計算屬性-computed\" class=\"headerlink\" title=\"計算屬性(computed)\"></a>計算屬性(computed)</h3><p>對於任何複雜邏輯，你都應當使用計算屬性<br>計算屬性只在相關響應式依賴發生改變時它們才會重新求值，這是比使用function好的地方</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 計算屬性的 getter</span></span><br><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 例項</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)<span class=\"comment\">//olleH</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>下面的計算屬性將不再更新，因為 Date.now() 不是響應式依賴：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>計算屬性預設只有 getter，不過在需要時你也可以提供一個 setter：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  fullName: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// better than set two variables seperately</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function (newValue) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><p>監視某個資料，當其發生改變，這個函式就會執行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"watch-example\"</span>&gt;</span><br><span class=\"line\">  &lt;p&gt;</span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    &lt;input v-model=<span class=\"string\">\"question\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;｛｛ answer ｝｝&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!-- 因為 AJAX 庫和通用工具的生態已經相當豐富，Vue 核心程式碼沒有重複 --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!-- 提供這些功能以保持精簡。這也可以讓你自由選擇自己更熟悉的工具。 --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"https:/</span><span class=\"regexp\">/cdn.jsdelivr.net/</span>npm/axios@<span class=\"number\">0.12</span><span class=\"number\">.0</span>/dist/axios.min.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script src=\"</span>https:<span class=\"comment\">//cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#watch-example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    question: <span class=\"string\">''</span>,</span><br><span class=\"line\">    answer: <span class=\"string\">'I cannot give you an answer until you ask a question!'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 `question` 發生改變，這個函式就會執行</span></span><br><span class=\"line\">    question: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Waiting for you to stop typing...'</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.debouncedGetAnswer()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// `_.debounce` 是一個透過 Lodash 限制操作頻率的函式。</span></span><br><span class=\"line\">    <span class=\"comment\">// 在這個例子中，我們希望限制訪問 yesno.wtf/api 的頻率</span></span><br><span class=\"line\">    <span class=\"comment\">// AJAX 請求直到使用者輸入完畢才會發出。想要瞭解更多關於</span></span><br><span class=\"line\">    <span class=\"comment\">// `_.debounce` 函式 (及其近親 `_.throttle`) 的知識，</span></span><br><span class=\"line\">    <span class=\"comment\">// 請參考：https://lodash.com/docs#debounce</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"keyword\">this</span>.getAnswer, <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getAnswer: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.question.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Questions usually contain a question mark. ;-)'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Thinking...'</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">      axios.get(<span class=\"string\">'https://yesno.wtf/api'</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">          vm.answer = _.capitalize(response.data.answer)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">          vm.answer = <span class=\"string\">'Error! Could not reach the API. '</span> + error</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Class-與-Style-繫結\"><a href=\"#Class-與-Style-繫結\" class=\"headerlink\" title=\"Class 與 Style 繫結\"></a>Class 與 Style 繫結</h2><p><code>&lt;div v-bind:class=&quot;{ active: isActive }&quot;&gt;&lt;/div&gt;</code><br>上面的語法表示 active 這個 class 存在與否將取決於資料 property isActive 的 truthiness。</p>\n<p>我們也可以在這裡繫結一個返回物件的計算屬性。這是一個常用且強大的模式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"classObject\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">data: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  isActive: true,</span></span><br><span class=\"line\"><span class=\"regexp\">  error: null</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  classObject: function () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      active: this.isActive &amp;&amp; !this.error,</span></span><br><span class=\"line\"><span class=\"regexp\">      'text-danger': this.error &amp;&amp; this.error.type === 'fatal'</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>陣列語法中也可以使用物件語法：<br><code>&lt;div v-bind:class=&quot;[{ active: isActive }, errorClass]&quot;&gt;&lt;/div&gt;</code></p>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'A'\"</span>&gt;</span></span><br><span class=\"line\">  A</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'B'\"</span>&gt;</span></span><br><span class=\"line\">  B</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'C'\"</span>&gt;</span></span><br><span class=\"line\">  C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  Not A/B/C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在html用<code>template</code>作為隱形元素，不渲染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"ok\"</span>&gt;</span><br><span class=\"line\">  &lt;h1&gt;Title&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;Paragraph 1&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;Paragraph <span class=\"number\">2</span>&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Vue 會儘可能高效地渲染元素，通常會復用已有元素而不是從頭開始渲染。這麼做除了使 Vue 變得非常快之外，還有其它一些好處。例如，如果你允許使用者在不同的登入方式之間切換：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Username&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your username\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\">&lt;template v-<span class=\"keyword\">else</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Email&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your email address\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>那麼在上面的程式碼中切換 loginType 將不會清除使用者已經輸入的內容。因為兩個模板使用了相同的元素，<code>&lt;input&gt;</code> 不會被替換掉——僅僅是替換了它的 placeholder。</p>\n<p>帶有 <code>v-show</code> 的元素始終會被渲染並保留在 DOM 中。<code>v-show</code> 只是簡單地切換元素的 CSS property display。<br>注意，<code>v-show</code> 不支援 <code>&lt;template&gt;</code> 元素，也不支援 <code>v-else</code>。</p>\n<p><code>v-if</code> 是“真正”的條件渲染，因為它會確保在切換過程中條件塊內的事件監聽器和子元件適當地被銷毀和重建。</p>\n<p><code>v-if</code> 也是惰性的：如果在初始渲染時條件為假，則什麼也不做——直到條件第一次變為真時，才會開始渲染條件塊。</p>\n<p>相比之下，<code>v-show</code> 就簡單得多——不管初始條件是什麼，元素總是會被渲染，並且只是簡單地基於 CSS 進行切換。</p>\n<blockquote>\n<p>一般來說，v-if 有更高的切換開銷，而 v-show 有更高的初始渲染開銷。因此，如果需要非常頻繁地切換，則使用 v-show 較好；如果在執行時條件很少改變，則使用 v-if 較好。</p>\n</blockquote>\n<p><strong>不推薦同時使用 v-if 和 v-for</strong>。請查閱風格指南以獲取更多資訊。</p>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><p><code>v-for</code> 還支援一個可選的第二個引數，即當前項的索引。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"example-2\"</span>&gt;</span><br><span class=\"line\">  &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span><br><span class=\"line\">    ｛｛ parentMessage ｝｝ - ｛｛ index ｝｝ - ｛｛ item.message ｝｝</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以用 <code>of</code> 替代 <code>in</code> 作為分隔符，因為它更接近 JavaScript 迭代器的語法：</p>\n<p><code>&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</code></p>\n<p>可以用 <code>v-for</code> 來遍歷一個物件的 property。<br>也可以提供第二個的引數為 property 名稱 (也就是key)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"v-for-object\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"demo\"</span>&gt;</span><br><span class=\"line\">  &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"value in object\"</span>&gt;</span><br><span class=\"line\">    ｛｛ value ｝｝</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 在遍歷物件時，會按 <span class=\"built_in\">Object</span>.keys() 的結果遍歷，但是不能保證它的結果在不同的 JavaScript 引擎下都一致。 --&gt;</span><br><span class=\"line\">&lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(value, name) in object\"</span>&gt;</span><br><span class=\"line\">  ｛｛ name ｝｝: ｛｛ value ｝｝</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>v-for</code> 渲染的元素列表時，它預設使用“就地更新”的策略。如果資料項的順序被改變，Vue 將不會移動 DOM 元素來匹配資料項的順序，而是就地更新每個元素，並且確保它們在每個索引位置正確渲染</p>\n<p>這個預設的模式是高效的，但是隻適用於不依賴子元件狀態或臨時 DOM 狀態 (例如：表單輸入值) 的列表渲染輸出。</p>\n<p>為了給 Vue 一個提示，以便它能跟蹤每個節點的身份，從而重用和重新排序現有元素，<strong>你需要為每項提供一個唯一的 key attribute</strong></p>\n<h3 id=\"自動檢測變化的限制\"><a href=\"#自動檢測變化的限制\" class=\"headerlink\" title=\"自動檢測變化的限制\"></a>自動檢測變化的限制</h3><p><strong>由於 JavaScript 的限制，Vue 不能檢測陣列(array)和物件(object)的變化</strong></p>\n<p>Vue 將被偵聽的陣列的變更方法進行了包裹，所以它們也將會觸發檢視更新。這些被包裹過的方法包括：</p>\n<ul>\n<li><code>push()</code></li>\n<li><code>pop()</code></li>\n<li><code>shift()</code></li>\n<li><code>unshift()</code></li>\n<li><code>splice()</code></li>\n<li><code>sort()</code></li>\n<li><code>reverse()</code></li>\n</ul>\n<p>相比之下，也有非變更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它們不會變更原始陣列，而總是返回一個新陣列</p>\n<h3 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h3><p>注意這裡的 <code>is=&quot;todo-item&quot;</code> attribute。這種做法在使用 DOM 模板時是十分必要的，因為在 <code>&lt;ul&gt;</code> 元素內只有 <code>&lt;li&gt;</code> 元素會被看作有效內容。這樣做實現的效果與 <code>&lt;todo-item&gt;</code> 相同，但是可以避開一些潛在的瀏覽器解析錯誤。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo-list-example\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"addNewTodo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"new-todo\"</span>&gt;</span>Add a todo<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-model</span>=<span class=\"string\">\"newTodoText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">\"new-todo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">placeholder</span>=<span class=\"string\">\"E.g. Feed the cat\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">is</span>=<span class=\"string\">\"todo-item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"(todo, index) in todos\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"todo.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"todo.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-on:remove</span>=<span class=\"string\">\"todos.splice(index, 1)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v-on-dom-event\"><a href=\"#v-on-dom-event\" class=\"headerlink\" title=\"v-on: dom event\"></a>v-on: dom event</h3><p>用特殊變數 <code>$event</code>訪問原始的 DOM 事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span><br><span class=\"line\">  Submit</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ ...</span></span><br><span class=\"line\"><span class=\"regexp\">methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  warn: function (message, event) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 現在我們可以訪問原生事件物件</span></span><br><span class=\"line\"><span class=\"regexp\">    if (event) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      event.preventDefault()</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    alert(message)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Vue.js 為 <code>v-on</code> 提供了事件修飾符。之前提過，修飾符是由點開頭的指令字尾來表示的。</p>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n<li><code>.passive</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止單擊事件繼續傳播 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再過載頁面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修飾符可以串聯 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只有修飾符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 新增事件監聽器時使用事件捕獲模式 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即內部元素觸發的事件先在此處理，然後才交由內部元素進行處理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只當在 event.target 是當前元素自身時觸發處理函式 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即事件不是從內部元素觸發的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-on-input\"><a href=\"#v-on-input\" class=\"headerlink\" title=\"v-on: input\"></a>v-on: input</h2><p>Vue 允許為 <code>v-on</code> 在監聽鍵盤事件時新增按鍵修飾符：<br>你可以直接將 KeyboardEvent.key 暴露的任意有效按鍵名轉換為 kebab-case 來作為修飾符。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 只有在 `key` 是 `Enter` 時呼叫 `vm.submit()` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.page-down</span>=<span class=\"string\">\"onPageDown\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即使 Alt 或 Shift 被一同按下時也會觸發 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.ctrl</span>=<span class=\"string\">\"onClick\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 有且只有 Ctrl 被按下的時候才觸發 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.ctrl.exact</span>=<span class=\"string\">\"onCtrlClick\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>滑鼠按鈕修飾符</p>\n<ul>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n<li><code>.middle</code></li>\n</ul>\n<h2 id=\"v-model-Input\"><a href=\"#v-model-Input\" class=\"headerlink\" title=\"v-model: Input\"></a>v-model: Input</h2><blockquote>\n<p>這是 Vue 完全贏過 React 的部分</p>\n</blockquote>\n<p>你可以用 <code>v-model</code> 指令在表單 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上建立雙向資料繫結。它會根據控制元件型別自動選取正確的方法來更新元素。儘管有些神奇，但 <code>v-model</code> 本質上不過是語法糖。它負責監聽使用者的輸入事件以更新資料，並對一些極端場景進行一些特殊處理。</p>\n<p><code>v-model</code> 只看binding data的值，會忽略所有表單元素的 value、checked、selected attribute 的初始值</p>\n<p><code>v-model</code> 在內部為不同的輸入元素使用不同的 property 並丟擲不同的事件：</p>\n<ul>\n<li>text 和 textarea 元素使用 value property 和 input 事件；</li>\n<li>checkbox 和 radio 使用 checked property 和 change 事件；</li>\n<li>select 欄位將 value 作為 prop 並將 change 作為事件。<!-- (? need example) -->\n\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchText\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">等價於：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"searchText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"searchText = $event.target.value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- checkbox example --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Checked names: ｛｛ checkedNames ｝｝<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '...',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checkedNames: []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- select example --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>請選擇<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: ｛｛ selected ｝｝<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '...',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    selected: ''</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>v-model</code> 表示式的初始值未能匹配任何選項，<code>&lt;select&gt;</code> 元素將被渲染為“未選中”狀態。在 iOS 中，這會使使用者無法選擇第一個選項。因為這樣的情況下，iOS 不會觸發 <code>change</code> 事件。因此，更推薦像上面這樣提供一個值為空的禁用選項。</p>\n<h3 id=\"input-繫結-variable\"><a href=\"#input-繫結-variable\" class=\"headerlink\" title=\"input 繫結 variable\"></a>input 繫結 variable</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">true-value</span>=<span class=\"string\">\"yes\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">false-value</span>=<span class=\"string\">\"no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">// 當選中時</span><br><span class=\"line\">vm.toggle === 'yes'</span><br><span class=\"line\">// 當沒有選中時</span><br><span class=\"line\">vm.toggle === 'no'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"pick\"</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"a\"</span>&gt;</span></span><br><span class=\"line\">// 當選中時</span><br><span class=\"line\">vm.pick === vm.a</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- v-model as object --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 內聯物件字面量 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"&#123; number: 123 &#125;\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 當選中時</span><br><span class=\"line\">typeof vm.selected // =&gt; 'object'</span><br><span class=\"line\">vm.selected.number // =&gt; 123</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v-model-修飾符\"><a href=\"#v-model-修飾符\" class=\"headerlink\" title=\"v-model: 修飾符\"></a>v-model: 修飾符</h3><p><code>.lazy</code><br>在預設情況下，v-model 在每次 input 事件觸發後將輸入框的值與資料進行同步 (除了上述輸入法組合文字時)。</p>\n<p>新增 lazy 修飾符，等到滑鼠移到輸入框外，觸發 change 事件才更新。</p>\n<p><code>.number</code><br>自動將使用者的輸入值轉為數值型別</p>\n<p><code>&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</code><br>這通常很有用，因為即使在 type=”number” 時，HTML 輸入元素的值也總會返回字串。如果這個值無法被 parseFloat() 解析，則會返回原始的值。</p>\n<p><code>.trim</code><br>如果要自動過濾使用者輸入的首尾空白字元，可以給 v-model 新增 trim 修飾符：</p>\n<h2 id=\"元件-Components\"><a href=\"#元件-Components\" class=\"headerlink\" title=\"元件 Components\"></a>元件 Components</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定義一個名為 button-counter 的新元件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;button v-on:click=\"count++\"&gt;You clicked me ｛｛ count ｝｝ times.&lt;/button&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>元件是可復用的 Vue 例項，且帶有一個名字：在這個例子中是 <code>&lt;button-counter&gt;</code>。我們可以在一個透過 new Vue 建立的 Vue 根例項中，把這個元件作為自定義元素來使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"components-demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因為元件是可復用的 Vue 例項，所以它們與 new Vue 接收相同的選項，例如 data、computed、watch、methods 以及生命週期鉤子等。<strong>僅有的例外是像 el 這樣根例項特有的選項</strong>。</p>\n<p>為了能在模板中使用，這些元件必須先註冊以便 Vue 能夠識別。這裡有兩種元件的註冊型別：全域性註冊和區域性註冊。至此，我們的元件都只是透過 Vue.component 全域性註冊的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component-name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... options ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>全域性註冊的元件可以用在其被註冊之後的任何 (透過 new Vue) 新建立的 Vue 根例項，也包括其元件樹中的所有子元件的模板中。</p>\n<p>而區域性註冊的好處是當你使用的是webpack這樣的構建系統時，如果是用全域性註冊的這種方法註冊的元件，那麼當你不使用某一個元件的時候，它仍然會存在最終的構建結果之中，這就增加的無謂的js下載。</p>\n<h3 id=\"data-是一個函式\"><a href=\"#data-是一個函式\" class=\"headerlink\" title=\"data 是一個函式\"></a>data 是一個函式</h3><p>data 是一個函式，因此每個例項可以維護一份被返回物件的獨立的複製：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>每個元件必須只有一個根元素。你可以將模板的內容包裹在一個父元素內，來修復這個問題，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blog-post\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>｛｛ title ｝｝<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>當元件變得越來越複雜的時候，為每個相關的資訊定義一個 prop 會變得很麻煩：<br>所以是時候重構一下這個 <code>&lt;blog-post&gt;</code> 元件了，讓它變成接受一個單獨的 post prop：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"post in posts\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:content</span>=<span class=\"string\">\"post.content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:publishedAt</span>=<span class=\"string\">\"post.publishedAt\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:comments</span>=<span class=\"string\">\"post.comments\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"post in posts\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:post</span>=<span class=\"string\">\"post\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\">Vue.component('blog-post', &#123;</span><br><span class=\"line\">  props: ['post'],</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blog-post\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>｛｛ post.title ｝｝<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"post.content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- other props --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    `</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>父級元件可以像處理 native DOM 事件一樣透過 <code>v-on</code> 監聽子元件例項的任意事件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">\"postFontSize += 0.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\">同時子元件可以透過呼叫內建的 `$emit` 方法並傳入事件名稱來觸發一個事件：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"$emit('enlarge-text')\"</span>&gt;</span></span><br><span class=\"line\">  Enlarge text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用事件傳遞一個值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"$emit('enlarge-text', 0.1)\"</span>&gt;</span></span><br><span class=\"line\">  Enlarge text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 透過 $event 訪問到被拋出的這個值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">\"postFontSize += $event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>emit input的值使 custom-input 可以更新<code>v-model</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;custom-input v-model=<span class=\"string\">\"searchText\"</span>&gt;&lt;<span class=\"regexp\">/custom-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Vue.component('custom-input', &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['value'],</span></span><br><span class=\"line\"><span class=\"regexp\">  template: `</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;input</span></span><br><span class=\"line\"><span class=\"regexp\">      v-bind:value=\"value\"</span></span><br><span class=\"line\"><span class=\"regexp\">      v-on:input=\"$emit('input', $event.target.value)\"</span></span><br><span class=\"line\"><span class=\"regexp\">    &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  `</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;layout&gt;</span><br><span class=\"line\">    &lt;p slot=<span class=\"string\">\"header\"</span>&gt;這裡可能是一個頁面標題&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;主要內容的一個段落。&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p&gt;另一個主要段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p slot=\"footer\"&gt;這裡有一些聯繫信息&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/layout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'layout'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"container\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;header&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"header\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/header&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;main&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/main&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"footer\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;`</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"動態切換component\"><a href=\"#動態切換component\" class=\"headerlink\" title=\"動態切換component\"></a>動態切換component</h3><p>有的時候，在不同元件之間進行動態切換是非常有用的，比如在一個多標籤的介面裡：</p>\n<p>上述內容可以透過 Vue 的 <code>&lt;component&gt;</code> 元素加一個特殊的 is attribute 來實現：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 元件會在 `currentTabComponent` 改變時改變 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentTabComponent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，currentTabComponent 可以包括已註冊元件的名字，或一個元件的選項物件</p>\n<h3 id=\"解析-DOM-模板時的注意事項\"><a href=\"#解析-DOM-模板時的注意事項\" class=\"headerlink\" title=\"解析 DOM 模板時的注意事項\"></a>解析 DOM 模板時的注意事項</h3><p>有些 HTML 元素，諸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，對於哪些元素可以出現在其內部是有嚴格限制的。而有些元素，諸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出現在其它某些特定的元素內部。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- wrong --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">blog-post-row</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post-row</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- correct --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"blog-post-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是如果我們從以下來源使用模板的話，這條限制是不存在的：</p>\n<ul>\n<li>字串 (例如：template: ‘…’)</li>\n<li>單檔案元件 (.vue)</li>\n<li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li>\n</ul>\n<h3 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL3Byb3RvdHlwaW5nLmh0bWw=\">使用vue cli<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>說回App.vue這個檔案，這是一個檢視（或者說元件和頁面），想像一下我們的index.html中什麼也沒有，只有一個檢視，這個檢視相當於一個容器，然後我們往這個容器中放各種各樣的積木（其他元件或者其他頁面）</p>\n<p>將<code>App.vue</code>放到<code>#app</code>中，然後以<code>&lt;App/&gt;</code>來指代我們的<code>#app</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span><span class=\"comment\">/*引入App這個元件*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span><span class=\"comment\">/*引入路由配置*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,<span class=\"comment\">/*最後效果將會替換頁面中id為app的div元素*/</span></span><br><span class=\"line\">  router,<span class=\"comment\">/*使用路由*/</span></span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span>,<span class=\"comment\">/*告知頁面這個元件用這樣的標籤來包裹著,並且使用它*/</span></span><br><span class=\"line\">  components: &#123; App &#125;<span class=\"comment\">/*告知當前頁面想使用App這個元件*/</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUv\">https://cn.vuejs.org/v2/guide/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZXRlcmhwY2hlbi5naXRodWIuaW8v\">https://peterhpchen.github.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeXRoaWx5YS5naXRodWIuaW8vMjAxNy8xMC8xMS92dWUtY29tcG9uZW50LXNsb3Qv\">https://cythilya.github.io/2017/10/11/vue-component-slot/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "vuejs",
                "javascript"
            ]
        }
    ]
}