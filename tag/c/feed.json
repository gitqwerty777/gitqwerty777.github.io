{
    "version": "https://jsonfeed.org/version/1",
    "title": "QWERTY • All posts by \"c\" tag",
    "description": "Programming | Computer Science | Thought",
    "home_page_url": "http://gitqwerty777.github.io",
    "items": [
        {
            "id": "http://gitqwerty777.github.io/header-file-tips/",
            "url": "http://gitqwerty777.github.io/header-file-tips/",
            "title": "標頭檔(header)與include",
            "date_published": "2015-07-21T04:37:47.000Z",
            "content_html": "<p>本文整理自 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcGx1c3BsdXMuY29tL2ZvcnVtL2FydGljbGVzLzEwNjI3Lw==\">headers and includes: why and how<i class=\"fa fa-external-link-alt\"></i></span></p>\n<a id=\"more\"></a>\n<h2 id=\"Why-we-need-header-files\"><a href=\"#Why-we-need-header-files\" class=\"headerlink\" title=\"Why we need header files\"></a>Why we need header files</h2><ul>\n<li>speeds up compile time<ul>\n<li>if everything is in a single file, then everything must be fully recompiled every time you make any little change</li>\n</ul>\n</li>\n<li>keeps your code more organized<ul>\n<li>easier to find the code you are looking for</li>\n</ul>\n</li>\n<li>allows you to separate interface from implementation<ul>\n<li>make the interface visible to other .cpp files, while keeping the implementation in its own .cpp file</li>\n</ul>\n</li>\n</ul>\n<p>Compile Process  </p>\n<ol>\n<li>compiler generates intermediate files(object file) for each compiled source file<ol>\n<li>compiler will “replace” the #include line with the actual contents of the file you’re including when it compiles the file</li>\n<li>files with header extensions might be ignored by the compiler if you try to compile them</li>\n</ol>\n</li>\n<li>then links all the object files together, which generates the final binary</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in myclass.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> bar;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in myclass.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myclass.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyClass::foo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//in main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myclass.h\"</span>  <span class=\"comment\">// defines MyClass</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  MyClass a; <span class=\"comment\">// no longer produces an error, because MyClass is defined</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Header files should use a .h__ extension (.h / .hpp / .hxx). Which of those you use doesn’t matter</li>\n<li>C++ Source files should use a .c__ extention (.cpp / .cxx / .cc). Which of those you use doesn’t matter</li>\n<li>C Source files should use .c (.c only)</li>\n</ul>\n<blockquote>\n<p>header files are #included and not compiled, whereas source files are compiled and not #included</p>\n</blockquote>\n<p>The one exception is that it is sometimes (although very rarely) useful to include a source file. This scenario has to do with instantiating templates and is outside the scope of this article</p>\n<h2 id=\"Include-guards\"><a href=\"#Include-guards\" class=\"headerlink\" title=\"Include guards\"></a>Include guards</h2><p>include multiple times of the same code would cause error  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// myclass.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoSomething</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myclass.h\"</span>   <span class=\"comment\">// define MyClass</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myclass.h\"</span>   <span class=\"comment\">// Compiler error - MyClass already defined</span></span></span><br></pre></td></tr></table></figure>\n\n<p>There’s an Implicit Example </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// x.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> &#123;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// a.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"x.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> X x; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// b.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"x.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> &#123;</span> X x; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span>  <span class=\"comment\">// also includes \"x.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span>  <span class=\"comment\">// includes x.h again!  ERROR</span></span></span><br></pre></td></tr></table></figure>\n\n<p>Because of this scenario, many people are told not to put #include in header files. However this is bad advice and you should not listen to it, But remember  </p>\n<ol>\n<li>Only #include things you need to include</li>\n<li>Guard against incidental multiple includes with include guards<ol>\n<li>skipping over the entire header if it was already included</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//x.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __X_H_INCLUDED__   <span class=\"comment\">// if x.h hasn't been included yet...</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __X_H_INCLUDED__   <span class=\"comment\">//   #define this so the compiler knows it has been included</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> &#123;</span> &#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-“right-way”-to-include\"><a href=\"#The-“right-way”-to-include\" class=\"headerlink\" title=\"The “right way” to include\"></a>The “right way” to include</h2><p>aware of following dependencies   </p>\n<ol>\n<li>stuff that can be forward declared</li>\n<li>stuff that needs to be #included</li>\n</ol>\n<p>Dedepency that should be used  </p>\n<ul>\n<li>do nothing if<ul>\n<li>A makes no references at all to B</li>\n<li>The only reference to B is in a friend declaration</li>\n</ul>\n</li>\n<li>forward declare B if<ul>\n<li>A <strong>contains</strong> a B <strong>pointer or reference</strong><ul>\n<li>B* myb, B&amp; myb</li>\n</ul>\n</li>\n<li>function has B object/pointer/reference as <strong>parementer or return type</strong><ul>\n<li>B MyFunction(B myb)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>include “b.h” if<ul>\n<li>B is a <strong>parent class</strong> of A</li>\n<li>A <strong>contains</strong> a B object<ul>\n<li>B myb</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">myclass.h</span><br><span class=\"line\"><span class=\"comment\">//=================================</span></span><br><span class=\"line\"><span class=\"comment\">// include guard</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __MYCLASS_H_INCLUDED__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __MYCLASS_H_INCLUDED__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=================================</span></span><br><span class=\"line\"><span class=\"comment\">// forward declared dependencies</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=================================</span></span><br><span class=\"line\"><span class=\"comment\">// included dependencies</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"parent.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//=================================</span></span><br><span class=\"line\"><span class=\"comment\">// the actual class</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> :</span> <span class=\"keyword\">public</span> Parent  <span class=\"comment\">// Parent object, so #include \"parent.h\"</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; avector;    <span class=\"comment\">// vector object, so #include &lt;vector&gt;</span></span><br><span class=\"line\">  Foo* foo;                    <span class=\"comment\">// Foo pointer, so forward declare Foo</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Func</span><span class=\"params\">(Bar&amp; bar)</span></span>;         <span class=\"comment\">// Bar reference, so forward declare Bar</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFriend</span>;</span>       <span class=\"comment\">// friend declaration is not a dependency</span></span><br><span class=\"line\">                               <span class=\"comment\">//   don't do anything about MyFriend</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// __MYCLASS_H_INCLUDED__ </span></span></span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Why that is the <span class=\"string\">\"right way\"</span> to include</span><br><span class=\"line\"></span><br><span class=\"line\">- general idea is that it makes \"myclass.h\" fully self-contained and doesn't require any other area of the program (other than MyClass's implementation/source file) to know how MyClass works internally</span><br><span class=\"line\">\t- If some other <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">needs</span> <span class=\"title\">to</span> <span class=\"title\">use</span> <span class=\"title\">MyClass</span>, <span class=\"title\">it</span> <span class=\"title\">can</span> <span class=\"title\">just</span> #<span class=\"title\">include</span> \"<span class=\"title\">myclass</span>.<span class=\"title\">h</span>\" <span class=\"title\">and</span> <span class=\"title\">be</span> <span class=\"title\">done</span> <span class=\"title\">with</span> <span class=\"title\">it</span>!</span></span><br><span class=\"line\">- Alternative method: #include all of MyClass's dependencies before #including \"myclass.h\" </span><br><span class=\"line\"></span><br><span class=\"line\">``` cpp </span><br><span class=\"line\"><span class=\"comment\">//  I want to use MyClass</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myclass.h\"</span>   <span class=\"comment\">// will always work, no matter what MyClass looks like.</span></span></span><br><span class=\"line\">                       <span class=\"comment\">// You're done</span></span><br><span class=\"line\">               <span class=\"comment\">//  (provided myclass.h follows my outline above and does</span></span><br><span class=\"line\">               <span class=\"comment\">//   not make unnecessary #includes)</span></span><br></pre></td></tr></table></figure>\n\n<p>why alternative method is bad：you should fill out all depency header and maintain it’s order</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  I want to use MyClass</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myclass.h\"</span></span></span><br><span class=\"line\">   <span class=\"comment\">// ERROR 'Parent' undefined</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"parent.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myclass.h\"</span></span></span><br><span class=\"line\">   <span class=\"comment\">// ERROR 'std::vector' undefined </span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"parent.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myclass.h\"</span></span></span><br><span class=\"line\">   <span class=\"comment\">// ERROR 'Support' undefined </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"parent.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"support.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myclass.h\"</span></span></span><br><span class=\"line\">   <span class=\"comment\">// ERROR 'Support' undefined</span></span><br><span class=\"line\">   <span class=\"comment\">// \"parent.h\" uses Support, and therefore you must #include \"support.h\" before \"parent.h\"</span></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">It is all about encapsulation. Files that want to use MyClass don't need to be aware of what MyClass uses in order for it to work, and don't need to #include any MyClass dependencies. It's all very OO friendly, very easy to use, and very easy to maintain</span><br><span class=\"line\"></span><br><span class=\"line\">### Circular Dependencies</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A circular dependency is when <span class=\"title\">two</span> <span class=\"params\">(<span class=\"keyword\">or</span> more)</span> classes depend on each other  </span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\">```cpp</span><br><span class=\"line\"><span class=\"comment\">// a.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span> B* b; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// b.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> &#123;</span> A* a &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>That’s what circular inclusion does</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">The compiler will <span class=\"keyword\">do</span> the following:</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// start compiling a.h</span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// start compiling b.h</span></span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// compilation of a.h skipped because it's guarded</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// resume compiling b.h</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> &#123;</span> A* a &#125;;        <span class=\"comment\">// &lt;--- ERROR, A is undeclared</span></span><br></pre></td></tr></table></figure>\n\n<p>Even though you’re #including “a.h”, the compiler is not seeing A class until B class gets compiled.<br>Solution: forward declare when you’re only using a pointer or reference</p>\n<p>Situation below is conceptually impossible(not logical). The solution is to have one or both classes contain a pointer or reference to the other, rather than a full object</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.h (guarded)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  B b;   <span class=\"comment\">// B is an object, can't be forward declared</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// b.h (guarded)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  A a;   <span class=\"comment\">// A is an object, can't be forward declared</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Function-inlining\"><a href=\"#Function-inlining\" class=\"headerlink\" title=\"Function inlining\"></a>Function inlining</h2><p>Inline Function body needs to exist in every cpp file which calls them, otherwise you get linker errors</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Func</span><span class=\"params\">(<span class=\"keyword\">const</span> A&amp; a)</span>   <span class=\"comment\">// parameter, so forward declare is okay</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    a.DoSomething();      <span class=\"comment\">// but now that we've dereferenced it, it</span></span><br><span class=\"line\">                          <span class=\"comment\">//  becomes an #include dependency</span></span><br><span class=\"line\">               <span class=\"comment\">// = we now have a potential circular inclusion</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>The key is that while inline function need to exist in the header, they <strong>do not need to exist in the class definition itself</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.h  (assume its guarded)</span></span><br><span class=\"line\"><span class=\"comment\">//------------------</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>;</span>  <span class=\"comment\">// forward declared dependency</span></span><br><span class=\"line\"><span class=\"comment\">//------------------</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Func</span><span class=\"params\">(<span class=\"keyword\">const</span> A&amp; a)</span></span>;  <span class=\"comment\">// okay, A is forward declared</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//------------------</span></span><br><span class=\"line\"><span class=\"comment\">//now B is already defined</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span>        <span class=\"comment\">// can use A with include dependency without error</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">B::Func</span><span class=\"params\">(<span class=\"keyword\">const</span> A&amp; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  a.DoSomething();    <span class=\"comment\">// okay!  a.h has been included</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>even if a.h includes b.h, the additional #includes don’t come up until AFTER class B is fully defined, and they are therefore harmless.</p>\n<p>But putting function bodies at the end of my header is ugly. Is there a way to avoid that?</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.h</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// blah blah</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> &#123;</span> <span class=\"comment\">/* blah blah */</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b_inline.h\"</span>  <span class=\"comment\">// or I sometimes use \"b.hpp\" </span></span></span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\">``` cpp</span><br><span class=\"line\"><span class=\"comment\">// b_inline.h (or b.hpp -- whatever)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span>  <span class=\"comment\">// not necessary, but harmless</span></span></span><br><span class=\"line\">                <span class=\"comment\">//  you can do this to make this \"feel\" like a source</span></span><br><span class=\"line\">                <span class=\"comment\">//  file, even though it isn't</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">B::Func</span><span class=\"params\">(<span class=\"keyword\">const</span> A&amp; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  a.DoSomething();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This seperates the interface from the implementation, while still allowing the implementation to be inlined</p>\n<h2 id=\"Forward-declaring-templates\"><a href=\"#Forward-declaring-templates\" class=\"headerlink\" title=\"Forward declaring templates\"></a>Forward declaring templates</h2><p>Forward declaring is pretty straight-forward when it comes to simple classes, but when dealing with template classes, things aren’t so simple</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span> <span class=\"comment\">// included dependencies</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"comment\">// the class template</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">  B b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// class most commonly used with 'int'</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Tem&lt;<span class=\"keyword\">int</span>&gt; A;  <span class=\"comment\">// typedef as 'A' </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.h</span></span><br><span class=\"line\"><span class=\"comment\">// forward declared dependencies</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>;</span>  <span class=\"comment\">// error!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the class</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  A* ptr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Because ‘A’ isn’t really a class, but rather a typedef, the compiler will bark at you<br>we can’t just #include “a.h” here because of a circular dependency problem</p>\n<p>We need to forward typedef A  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tem</span>;</span>  <span class=\"comment\">// forward declare our template</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Tem&lt;<span class=\"keyword\">int</span>&gt; A;               <span class=\"comment\">// then typedef 'A' (forward typedef A instead of forward declare A)</span></span><br></pre></td></tr></table></figure>\n\n<p>A cleaner solution is to create an <strong>alternative header</strong> which has the forward declarations of your templated classes and their typedefs</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"b.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">  B b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">//a_fwd.h</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tem</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Tem&lt;<span class=\"keyword\">int</span>&gt; A;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"a_fwd.h\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">  A* ptr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>This allows B to include a header which forward declares A without including the entire class definition</p>\n",
            "tags": [
                "c",
                "cpp"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/gcc-usage/",
            "url": "http://gitqwerty777.github.io/gcc-usage/",
            "title": "gcc參數介紹",
            "date_published": "2015-02-22T17:01:01.000Z",
            "content_html": "<p>假設已經知道編譯流程<br>[介紹]<br>gcc and g++分別是gnu的c &amp; c++編譯器 gcc/g++在執行編譯工作的時候，總共需要4步<br>1.預處理,生成.i的文件[預處理器cpp]<br>2.將預處理後的文件不轉換成彙編語言,生成文件.s[編譯器egcs]<br>3.有彙編變為目標代碼(機器代碼)生成.o的文件[彙編器as]<br>4.連接目標代碼,生成可執行程序[鏈接器ld]</p>\n<a id=\"more\"></a>\n\n<h2 id=\"常用參數\"><a href=\"#常用參數\" class=\"headerlink\" title=\"常用參數\"></a>常用參數</h2><table>\n<thead>\n<tr>\n<th>參數</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>編譯但不連結，產生.o檔</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>輸出組譯碼</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>顯示預處理(define, macro)的結果</td>\n</tr>\n<tr>\n<td>-o filename</td>\n<td>指定輸出檔名</td>\n</tr>\n<tr>\n<td>-ansi</td>\n<td>只支持 ANSI 標準的 C 語法。這一選項將禁止 GNU C 的某些特色 例如 asm 或 typeof 關鍵詞。</td>\n</tr>\n<tr>\n<td>-Dmacro</td>\n<td>定義指定巨集為有效</td>\n</tr>\n<tr>\n<td>-Dmarco=defn</td>\n<td>定義指定巨集為defn</td>\n</tr>\n<tr>\n<td>-Wa,option</td>\n<td>將選項(option)傳給組譯器</td>\n</tr>\n<tr>\n<td>-wl,option</td>\n<td>將選項(option)傳給連結器</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>增加include header檔案的搜尋路徑</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>增加library檔案的搜尋路徑</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>指定連結的函式庫</td>\n</tr>\n<tr>\n<td>-Wall</td>\n<td>顯示所有的警告訊息</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>編入除錯資訊(使用GDB除錯時用)</td>\n</tr>\n</tbody></table>\n<p>-IDIRECTORY 指定額外的頭文件搜索路徑DIRECTORY。<br>-LDIRECTORY 指定額外的函數庫搜索路徑DIRECTORY。<br>-lLIBRARY 連接時搜索指定的函數庫LIBRARY。<br>-m486 針對 486 進行代碼優化。<br>-shared 生成共享目標文件。通常用在建立共享庫時。<br>-static 禁止使用共享連接。<br>-UMACRO 取消對 MACRO 宏的定義。<br>-w 不生成任何警告信息。<br>-Wall 生成所有警告信息。</p>\n<h2 id=\"最佳化\"><a href=\"#最佳化\" class=\"headerlink\" title=\"最佳化\"></a>最佳化</h2><p>-Os, -O0, -O1, -O2, -O3,</p>\n<p>-O0表示沒有優化,-O1為缺省值，-O3優化級別最高</p>\n<h2 id=\"使用範例\"><a href=\"#使用範例\" class=\"headerlink\" title=\"使用範例\"></a>使用範例</h2><p>與函式庫連結 :<br>另一個常用的選項是 -l, 它以一種特殊方式來指定函式庫. 首先它必須放在命令的最後面, 也就是原始檔檔名之後, 而所有其他的選項是指定在檔名之前. 底下是一個典型的命令 ; 因為輸入檔是目的檔, 所以命令僅僅啟動連結器 :<br>%gcc -o plot main.o plot_line.o -lm</p>\n<p>-lm 選項指定使用數學函式庫. 當你指定 -lname, 系統會到存放標準函式庫的目錄中 (通常位於 /usr/lib) 中去尋找 libname.a 檔案. 所以你所尋找的數學函式庫應該是 /usr/lib/libm.a . 和表頭檔一樣, 函式庫有時也放在非標準路徑的目錄下. 你這時必須以 -L 選項來告訴 gcc 到哪裡去找這函式庫, 例如 :<br>%gcc -o -L/src/local/lib main.o plot_line.o -lm</p>\n<p>它告訴gcc 首先到 /src/local/lib 去找函式庫, 然後才是標準路徑下的函式庫. 假如某人把自己版本的函式庫放到 /src/local/lib 下, 在使用順序上, 他的這個版本將超過 /usr/lib 下的同名函式庫</p>\n<p>///==================另外還有個Os選項==========================<br><span class=\"exturl\" data-url=\"aHR0cDovL2hpLmJhaWR1LmNvbS9haF9fZnUvYmxvZy9pdGVtL2NjOWZkMTliODAxOTQ4YmRjOWVhZjRiMy5odG1s\">http://hi.baidu.com/ah__fu/blog/item/cc9fd19b801948bdc9eaf4b3.html<i class=\"fa fa-external-link-alt\"></i></span><br>在研究編譯驅動的makefile的時候，發現GCC的命令行裡面有一個-Os的優化選項。<br>    遍查GCC文檔，發現了-O0, -O1, -O2, -O3，就是沒有發現-Os。<br>    祭出GOOGLE大法搜了一下，終於發現這篇文章說明了-Os的作用：<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5saW51eGpvdXJuYWwuY29tL2FydGljbGUvNzI2OQ==\">http://www.linuxjournal.com/article/7269<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>   原來-Os相當於-O2.5。是使用了所有-O2的優化選項，但又不縮減代碼尺寸的方法。<br>   詳細的說明如下：<br>Level 2.5 (-Os)<br>The special optimization level (-Os or size) enables all -O2 optimizations that do not increase code size; it puts the emphasis on size over speed. This includes all second-level optimizations, except for the alignment optimizations. The alignment optimizations skip space to align functions, loops, jumps and labels to an address that is a multiple of a power of two, in an architecture-dependent manner. Skipping to these boundaries can increase performance as well as the size of the resulting code and data spaces; therefore, these particular optimizations are disabled. The size optimization level is enabled as:<br>gcc -Os -o test test.c<br>In gcc 3.2.2, reorder-blocks is enabled at -Os, but in gcc 3.3.2 reorder-blocks is disabled.</p>\n<p>==============================<br>補充：在GCC的官方文檔裡又發現了關於-Os的說明：<br><span class=\"exturl\" data-url=\"aHR0cDovL2djYy5nbnUub3JnL29ubGluZWRvY3MvZ2NjLTMuNC42L2djYy9PcHRpbWl6ZS1PcHRpb25zLmh0bWwjT3B0aW1pemUtT3B0aW9ucw==\">http://gcc.gnu.org/onlinedocs/gcc-3.4.6/gcc/Optimize-Options.html#Optimize-Options<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>//=============================================<br><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaXNvbjgxL2FyY2hpdmUvMjAwOS8wNS8wNy80MTU4NTc2LmFzcHg=\">http://blog.csdn.net/ison81/archive/2009/05/07/4158576.aspx<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>backtrace與fomit-frame-pointer選項</p>\n<p>事實上gcc的所有級別的優化（-O, -O2, -O3等）都會打開-fomit-frame-pointer，該選項的功能是函數調用時不保存frame指針，在ARM上就是fp，故我們無法按照APCS中的約定來回溯調用棧。但是GDB中仍然可以使用bt命令看到調用棧，為什麼？得知GDB v6之後都是支持DWARF2的，也就意味著它可以不依賴fp來回溯調用棧（詳見<span class=\"exturl\" data-url=\"aHR0cDovL2djYy5nbnUub3JnL21sL2djYy8yMDAzLTEwL21zZzAwMzIyLmh0bWzvvInjgII=\">http://gcc.gnu.org/ml/gcc/2003-10/msg00322.html）。<i class=\"fa fa-external-link-alt\"></i></span><br>看來想在代碼中動態顯示調用棧而又不希望使用GDB的朋友，只能在編譯時關掉-fomit-frame-pointer了。</p>\n<p>//==================gcc參數大全：===========================</p>\n<p>[參數詳解]<br>-x language filename<br>　設定文件所使用的語言,使後綴名無效,對以後的多個有效.也就是根據約定C語言的後綴名稱是.c的，而C++的後綴名是.C或者.cpp,如果你很個性，決定你的C代碼文件的後綴名是.pig 哈哈，那你就要用這個參數,這個參數對他後面的文件名都起作用，除非到了下一個參數的使用。<br>　　可以使用的參數嗎有下面的這些<br>　　<code>c&#39;,</code>objective-c’, <code>c-header&#39;,</code>c++’, <code>cpp-output&#39;,</code>assembler’, and `assembler-with-cpp’.<br>　　看到英文，應該可以理解的。<br>　　例子用法:<br>　　gcc -x c hello.pig<br>　　<br>-x none filename<br>　　關掉上一個選項，也就是讓gcc根據文件名後綴，自動識別文件類型<br>　　例子用法:<br>　　gcc -x c hello.pig -x none hello2.c<br>　　<br>-c<br>　　只激活預處理,編譯,和彙編,也就是他只把程序做成obj文件<br>　　例子用法:<br>　　gcc -c hello.c<br>　　他將生成.o的obj文件<br>-S<br>　　只激活預處理和編譯，就是指把文件編譯成為彙編代碼。<br>　　例子用法<br>　　gcc -S hello.c<br>　　他將生成.s的彙編代碼，你可以用文本編輯器察看<br>-E<br>　　只激活預處理,這個不生成文件,你需要把它重定向到一個輸出文件裡面.<br>　　例子用法:<br>　　gcc -E hello.c &gt; pianoapan.txt<br>　　gcc -E hello.c | more<br>　　慢慢看吧,一個hello word 也要與處理成800行的代碼<br>-o<br>　　制定目標名稱,缺省的時候,gcc 編譯出來的文件是a.out,很難聽,如果你和我有同感，改掉它,哈哈<br>　　例子用法<br>　　gcc -o hello.exe hello.c (哦,windows用習慣了)<br>　　gcc -o hello.asm -S hello.c<br>-pipe<br>　　使用管道代替編譯中臨時文件,在使用非gnu彙編工具的時候,可能有些問題<br>　　gcc -pipe -o hello.exe hello.c<br>-ansi<br>　　關閉gnu c中與ansi c不兼容的特性,激活ansi c的專有特性(包括禁止一些asm inline typeof關鍵字,以及UNIX,vax等預處理宏,<br>-fno-asm<br>　　此選項實現ansi選項的功能的一部分，它禁止將asm,inline和typeof用作關鍵字。 　　　　<br>-fno-strict-prototype<br>　　只對g++起作用,使用這個選項,g++將對不帶參數的函數,都認為是沒有顯式的對參數的個數和類型說明,而不是沒有參數.<br>　　而gcc無論是否使用這個參數,都將對沒有帶參數的函數,認為城沒有顯式說明的類型<br>　　<br>-fthis-is-varialble<br>　　就是向傳統c++看齊,可以使用this當一般變量使用.<br>　　<br>-fcond-mismatch<br>　　允許條件表達式的第二和第三參數類型不匹配,表達式的值將為void類型<br>　　<br>-funsigned-char<br>-fno-signed-char<br>-fsigned-char<br>-fno-unsigned-char<br>　　這四個參數是對char類型進行設置,決定將char類型設置成unsigned char(前兩個參數)或者 signed char(後兩個參數)<br>　　<br>-include file<br>　　包含某個代碼,簡單來說,就是便以某個文件,需要另一個文件的時候,就可以用它設定,功能就相當於在代碼中使用#include<filename><br>　　例子用法:<br>　　gcc hello.c -include /root/pianopan.h<br>　　<br>-imacros file<br>　　將file文件的宏,擴展到gcc/g++的輸入文件,宏定義本身並不出現在輸入文件中<br>　　<br>-Dmacro<br>　　相當於C語言中的#define macro<br>　　<br>-Dmacro=defn<br>　　相當於C語言中的#define macro=defn<br>　　<br>-Umacro<br>　　相當於C語言中的#undef macro<br>-undef<br>　　取消對任何非標準宏的定義<br>　　<br>-Idir<br>　　在你是用#include”file”的時候,gcc/g++會先在當前目錄查找你所制定的頭文件,如果沒有找到,他回到缺省的頭文件目錄找,如果使用-I制定了目錄,他<br>　　回先在你所制定的目錄查找,然後再按常規的順序去找.<br>　　對於#include<file>,gcc/g++會到-I制定的目錄查找,查找不到,然後將到系統的缺省的頭文件目錄查找<br>　　<br>-I-<br>　　就是取消前一個參數的功能,所以一般在-Idir之後使用<br>　　<br>-idirafter dir<br>　　在-I的目錄裡面查找失敗,講到這個目錄裡面查找.<br>　　<br>-iprefix prefix<br>-iwithprefix dir<br>　　一般一起使用,當-I的目錄查找失敗,會到prefix+dir下查找<br>　　<br>-nostdinc<br>　　使編譯器不再系統缺省的頭文件目錄裡面找頭文件,一般和-I聯合使用,明確限定頭文件的位置<br>　　<br>-nostdin C++<br>　　規定不在g++指定的標準路經中搜索,但仍在其他路徑中搜索,.此選項在創libg++庫使用<br>　　<br>-C<br>　　在預處理的時候,不刪除註釋信息,一般和-E使用,有時候分析程序，用這個很方便的<br>　　<br>-M<br>　　生成文件關聯的信息。包含目標文件所依賴的所有源代碼你可以用gcc -M hello.c來測試一下，很簡單。<br>　　<br>-MM<br>　　和上面的那個一樣，但是它將忽略由#include<file>造成的依賴關係。<br>　　<br>-MD<br>　　和-M相同，但是輸出將導入到.d的文件裡面<br>　　<br>-MMD<br>　　和-MM相同，但是輸出將導入到.d的文件裡面<br>　　<br>-Wa,option<br>　　此選項傳遞option給彙編程序;如果option中間有逗號,就將option分成多個選項,然後傳遞給會彙編程序<br>　　<br>-Wl.option<br>　　此選項傳遞option給連接程序;如果option中間有逗號,就將option分成多個選項,然後傳遞給會連接程序.<br>-llibrary<br>　　制定編譯的時候使用的庫<br>　　例子用法<br>　　gcc -lcurses hello.c<br>　　使用ncurses庫編譯程序<br>　　<br>-Ldir<br>　　制定編譯的時候，搜索庫的路徑。比如你自己的庫，可以用它制定目錄，不然<br>　　編譯器將只在標準庫的目錄找。這個dir就是目錄的名稱。<br>　　<br>-O0<br>-O1<br>-O2<br>-O3<br>　　編譯器的優化選項的4個級別，-O0表示沒有優化,-O1為缺省值，-O3優化級別最高　　 　　<br>-g<br>　　只是編譯器，在編譯的時候，產生調試信息。<br>　　<br>-gstabs<br>　　此選項以stabs格式聲稱調試信息,但是不包括gdb調試信息.<br>　　<br>-gstabs+<br>　　此選項以stabs格式聲稱調試信息,並且包含僅供gdb使用的額外調試信息.<br>　　<br>-ggdb<br>　　此選項將儘可能的生成gdb的可以使用的調試信息.<br>-static<br>　　此選項將禁止使用動態庫，所以，編譯出來的東西，一般都很大，也不需要什麼<br>動態連接庫，就可以運行.<br>-share<br>　　此選項將儘量使用動態庫，所以生成文件比較小，但是需要系統由動態庫.<br>-traditional<br>　　試圖讓編譯器支持傳統的C語言特性</p>\n<p>[參考資料]<br>-Linux/UNIX高級編程<br>　　中科紅旗軟件技術有限公司編著.清華大學出版社出版<br>-Gcc man page \n　　 </p>\n<h2 id=\"其他編譯器\"><a href=\"#其他編譯器\" class=\"headerlink\" title=\"其他編譯器\"></a>其他編譯器</h2><p>Clang</p>\n<p>編譯速度更快、編譯產出更小、出錯提示更友好。尤其是在比較極端的情況下。<br>最後一點，其他同學也有講到，就是Clang採用的是BSD協議。這是蘋果資助LLVM、FreeBSD淘汰GCC換用Clang的一個重要原因。</p>\n<p>從代碼上說，clang結構更簡單。因為clang只需要完成詞法和語法分析，代碼優化和機器代碼的生成工作由llvm完成。所以和全部由自己包下的gcc比起來，clang可以更專注地做好一件事。<br>這種結構也使clang可以被單獨拿出來用在其他的程序裡。比如vim的clang_complete插件就是利用clang進行語法分析後給出精確的自動補全和語法錯誤</p>\n<p>llvm是一個底層虛擬機平台，提供了經過最佳化的IF代碼，也就是有個中間層，在這個中間層可以做很多的事情，比如優化和提供給編譯器更多的信息，理論上可以支持幾乎任何編程語言。llvm默認的前端是clang，當然也可以用gcc做前端。<br>llvm用c++寫的，模塊化做的很好，因此可以很好的和clang，gcc等等更多的東西合作，能為ide提供更全的有用信息。而gcc則包含的比較全面，整一個是一個宏結構，沒有模塊化設計，用c寫的，對ide也不太友好(實際上linux社區裡似乎對ide一直不感冒)。不過c++版的gcc正在重寫中，為了與llvm/clang更好的競爭，而且gcc從5.0開始打算進行模塊化設計，所以，以後gcc內部可能會分出很多部分。<br>就現在來看，gcc大體等同於llvm+clang所提供的功能。<br>很多人特別羨慕clang那強大的錯誤診斷信息，其實gcc4.8部分信息診斷能力已經超過它了，比它更準確，所以競爭真的很好，我們可以用到好的東西了。gcc目前的問題就是缺乏模塊化設計，這是暫時落後於llvm的地方。<br>freebsd不用gcc是因為gpl協議，llvm/clang的協議更加自由，但llvm/clang目前的兼容性和參數優化等等方面和gcc還有不小差距，雖然編譯後的體積更小了(架構領先優勢)，但在性能優化方面相比gcc還有很多事情要做。</p>\n<p>======<br>Several of the -f code generation options are interesting:</p>\n<p>The -ftrapv function will cause the program to abort on signed integer overflow (formally “undefined behaviour” in C).<br>-fverbose-asm is useful if you’re compiling with -S to examine the assembly output - it adds some informative comments.<br>-finstrument-functions adds code to call user-supplied profiling functions at every function entry and exit point.<br><span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMzc1Njk3L3VzZWZ1bC1nY2MtZmxhZ3MtZm9yLWM=\">http://stackoverflow.com/questions/3375697/useful-gcc-flags-for-c<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>===============================</p>\n<h3 id=\"pkg-config-的功能與用法\"><a href=\"#pkg-config-的功能與用法\" class=\"headerlink\" title=\"pkg-config 的功能與用法\"></a>pkg-config 的功能與用法</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL2NhbGFtYXJ5c2hvcC5ibG9nc3BvdC5jb20vMjAxMS8xMS9wa2ctY29uZmlnLmh0bWw=\">http://calamaryshop.blogspot.com/2011/11/pkg-config.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>當開發C程式時經常使會用到許多系統已安裝的library所提供的function，來加速對程式的開發。在程式中會將含有這些library提供的function宣告的header file加到程式中，但最頭痛的是在compile程式時加上額外的設定來告訴編譯器該去系統中的何處找尋所要使用的header file以及所使用的library file被安裝在何處。所以Linux系統上有個非常好用的工具pkg-config可以查詢library的header file以及library的所在位置及資訊，以及在編譯程式時該使用的編譯參數為何。</p>\n<p>這個程式主要讀取系統中位於 /usr/lib/pkgconfig 目錄或是環境變數 PKG_CONFIG_PATH 所設定的路徑中的副檔名為 .pc 的檔案，這些檔案包含系統安裝的library的相關資訊，包括：安裝的目錄、程式編譯的參數等等。<br>使用方法:<br>pkg-config –cflags library-name-with-version 就可以得到編譯程式時 pre-processing 動作必須加上的參數設定。<br>執行 pkg-config –cflags glib-2.0，其結果為-I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include。<br>pkg-config –libs library-name-with-version就可以得到 linking時所必須傳給編譯器的參數。<br>執行 pkg-config –libs glib-2.0 得到-lglib-2.0。<br>另外，我們還可以利用 pkg-config 來簡化 Makefile 的撰寫。<br>在Makefile中，原來寫在編譯器之後的參數，改成 pkg-config –cflags –libs library-name-with-version 即可。<br>例如：將Makefile中的這一行<br>gcc -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -lglib-2.0 program.c<br>替換成<br>gcc pkg-config –cflags –libs glib-2.0 program.c</p>\n<p>pkg-config 簡單用法</p>\n<ol>\n<li>pkg-config –list-all<br>列出所有可使用的連結庫，位置在 /usr/lib/pkgconfig 及 /usr/local/lib/pkgconfig 裏面的 xxx.pc 檔，新軟體一般都會安裝 .pc 檔，沒有可以自己建立，並且設定環境變數 PKG_CONFIG_PATH 供 pkg-config 尋找 .pc 檔路徑。</li>\n<li>pkg-config –cflags xxxx<br>取得該連結庫的 CFLAGS 參數。(Cflags)</li>\n<li>pkg-config –libs xxxx<br>取得該連結庫的 LDFLAGS 參數。(Libs)</li>\n<li>pkg-config –static xxxx<br>取得該連結庫供靜態連結的 LDFLAGS 參數。(Libs.private)</li>\n<li>pkg-config –version<br>取得 pkg-config 版本號。</li>\n<li>pkg-config –modversion xxxxx<br>取得連結庫的版本號。(Version)</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jb2RlbG9va2VyLmNvbS9kZmlsZWMvNzgyNmJvb2tEVkQzL1Rob25nc29jdWFHY2MucGRm\">Gcc参数.txt<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY2MuZ251Lm9yZy9vbmxpbmVkb2NzL2djYy02LjMuMC9nY2MvaW5kZXguaHRtbA==\">gcc官方文件<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzU5OGI3MDk0YjhjMQ==\">安裝 LLVM + Clang<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "gcc",
                "linux",
                "c",
                "compile"
            ]
        }
    ]
}