<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://gitqwerty777.github.io</id>
    <title>QWERTY • Posts by &#34;compile&#34; tag</title>
    <link href="http://gitqwerty777.github.io" />
    <updated>2015-02-22T17:01:01.000Z</updated>
    <category term="C#" />
    <category term="CodingStyle" />
    <category term="Emacs" />
    <category term="編輯器" />
    <category term="CFR" />
    <category term="電腦對局理論" />
    <category term="指令" />
    <category term="機器學習" />
    <category term="perceptron" />
    <category term="readme" />
    <category term="文件" />
    <category term="github" />
    <category term="artificial intelligence" />
    <category term="search" />
    <category term="First-Order Logic" />
    <category term="大數" />
    <category term="程式" />
    <category term="C++" />
    <category term="Hexo" />
    <category term="網誌" />
    <category term="Markdown" />
    <category term="CleanCode" />
    <category term="重構" />
    <category term="TDD" />
    <category term="設計模式" />
    <category term="CMake" />
    <category term="Makefile" />
    <category term="Linux" />
    <category term="Todo" />
    <category term="註解" />
    <category term="經濟學" />
    <category term="策略" />
    <category term="競爭" />
    <category term="博弈論" />
    <category term="計算機結構" />
    <category term="人工智慧" />
    <category term="圍棋" />
    <category term="象棋" />
    <category term="蒙地卡羅" />
    <category term="Alpha-Beta搜尋" />
    <category term="強化學習" />
    <category term="計算機網路" />
    <category term="boost" />
    <category term="函式庫" />
    <category term="編譯" />
    <category term="gcc" />
    <category term="g++" />
    <category term="clang" />
    <category term="最佳化" />
    <category term="推薦系統" />
    <category term="FM" />
    <category term="FFM" />
    <category term="SVM" />
    <category term="Embedding" />
    <category term="自然語言處理" />
    <category term="外國用語" />
    <category term="萌典" />
    <category term="opencc" />
    <category term="PTT" />
    <category term="vuejs" />
    <category term="linux" />
    <category term="c" />
    <category term="compile" />
    <category term="gdb" />
    <category term="c語言" />
    <category term="cpp" />
    <category term="除錯" />
    <category term="git" />
    <category term="VMWare" />
    <category term="虛擬機" />
    <category term="IFTTT" />
    <category term="自動化" />
    <category term="備份" />
    <category term="webhook" />
    <category term="簡報" />
    <category term="軟體" />
    <category term="PowerPoint" />
    <category term="Latex" />
    <category term="JavaScript" />
    <category term="CSS" />
    <category term="Unity" />
    <category term="fcitx" />
    <category term="嘸蝦米" />
    <category term="輸入法" />
    <category term="硬碟" />
    <category term="記憶體" />
    <category term="效能" />
    <category term="錯誤" />
    <category term="makefile" />
    <category term="備忘錄" />
    <category term="存檔" />
    <category term="統計" />
    <category term="byobu" />
    <category term="screen" />
    <category term="tmux" />
    <category term="reactjs" />
    <category term="javascript" />
    <category term="WideAndDeep" />
    <category term="Google" />
    <category term="觀察者" />
    <category term="訂閱" />
    <category term="委託" />
    <category term="正規表示式(RegExp)" />
    <category term="上下文無關文法(CFG)" />
    <category term="hexo" />
    <category term="blog" />
    <category term="theme" />
    <category term="feature" />
    <category term="revealJS" />
    <category term="markdown" />
    <category term="rss" />
    <category term="facebook" />
    <category term="youtube" />
    <category term="ptt" />
    <category term="bilibili" />
    <category term="pixiv" />
    <category term="crawler" />
    <category term="SEO" />
    <category term="google" />
    <category term="html" />
    <category term="amazon" />
    <category term="webhost" />
    <category term="ssl" />
    <category term="漢字" />
    <category term="中文" />
    <category term="異體字" />
    <category term="unicode" />
    <category term="unity" />
    <category term="演算法" />
    <category term="隨機排序" />
    <category term="洗牌" />
    <category term="Fisher-Yates" />
    <category term="證明" />
    <category term="python" />
    <entry>
        <id>http://gitqwerty777.github.io/gcc-usage/</id>
        <title>gcc參數介紹</title>
        <link rel="alternate" href="http://gitqwerty777.github.io/gcc-usage/"/>
        <content type="html">&lt;p&gt;假設已經知道編譯流程&lt;br&gt;[介紹]&lt;br&gt;gcc and g++分別是gnu的c &amp;amp; c++編譯器 gcc/g++在執行編譯工作的時候，總共需要4步&lt;br&gt;1.預處理,生成.i的文件[預處理器cpp]&lt;br&gt;2.將預處理後的文件不轉換成彙編語言,生成文件.s[編譯器egcs]&lt;br&gt;3.有彙編變為目標代碼(機器代碼)生成.o的文件[彙編器as]&lt;br&gt;4.連接目標代碼,生成可執行程序[鏈接器ld]&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h2 id=&#34;常用參數&#34;&gt;&lt;a href=&#34;#常用參數&#34; class=&#34;headerlink&#34; title=&#34;常用參數&#34;&gt;&lt;/a&gt;常用參數&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;參數&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;-c&lt;/td&gt;
&lt;td&gt;編譯但不連結，產生.o檔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-S&lt;/td&gt;
&lt;td&gt;輸出組譯碼&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-E&lt;/td&gt;
&lt;td&gt;顯示預處理(define, macro)的結果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-o filename&lt;/td&gt;
&lt;td&gt;指定輸出檔名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-ansi&lt;/td&gt;
&lt;td&gt;只支持 ANSI 標準的 C 語法。這一選項將禁止 GNU C 的某些特色 例如 asm 或 typeof 關鍵詞。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-Dmacro&lt;/td&gt;
&lt;td&gt;定義指定巨集為有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-Dmarco=defn&lt;/td&gt;
&lt;td&gt;定義指定巨集為defn&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-Wa,option&lt;/td&gt;
&lt;td&gt;將選項(option)傳給組譯器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-wl,option&lt;/td&gt;
&lt;td&gt;將選項(option)傳給連結器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-I&lt;/td&gt;
&lt;td&gt;增加include header檔案的搜尋路徑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-L&lt;/td&gt;
&lt;td&gt;增加library檔案的搜尋路徑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-l&lt;/td&gt;
&lt;td&gt;指定連結的函式庫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-Wall&lt;/td&gt;
&lt;td&gt;顯示所有的警告訊息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-g&lt;/td&gt;
&lt;td&gt;編入除錯資訊(使用GDB除錯時用)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;-IDIRECTORY 指定額外的頭文件搜索路徑DIRECTORY。&lt;br&gt;-LDIRECTORY 指定額外的函數庫搜索路徑DIRECTORY。&lt;br&gt;-lLIBRARY 連接時搜索指定的函數庫LIBRARY。&lt;br&gt;-m486 針對 486 進行代碼優化。&lt;br&gt;-shared 生成共享目標文件。通常用在建立共享庫時。&lt;br&gt;-static 禁止使用共享連接。&lt;br&gt;-UMACRO 取消對 MACRO 宏的定義。&lt;br&gt;-w 不生成任何警告信息。&lt;br&gt;-Wall 生成所有警告信息。&lt;/p&gt;
&lt;h2 id=&#34;最佳化&#34;&gt;&lt;a href=&#34;#最佳化&#34; class=&#34;headerlink&#34; title=&#34;最佳化&#34;&gt;&lt;/a&gt;最佳化&lt;/h2&gt;&lt;p&gt;-Os, -O0, -O1, -O2, -O3,&lt;/p&gt;
&lt;p&gt;-O0表示沒有優化,-O1為缺省值，-O3優化級別最高&lt;/p&gt;
&lt;h2 id=&#34;使用範例&#34;&gt;&lt;a href=&#34;#使用範例&#34; class=&#34;headerlink&#34; title=&#34;使用範例&#34;&gt;&lt;/a&gt;使用範例&lt;/h2&gt;&lt;p&gt;與函式庫連結 :&lt;br&gt;另一個常用的選項是 -l, 它以一種特殊方式來指定函式庫. 首先它必須放在命令的最後面, 也就是原始檔檔名之後, 而所有其他的選項是指定在檔名之前. 底下是一個典型的命令 ; 因為輸入檔是目的檔, 所以命令僅僅啟動連結器 :&lt;br&gt;%gcc -o plot main.o plot_line.o -lm&lt;/p&gt;
&lt;p&gt;-lm 選項指定使用數學函式庫. 當你指定 -lname, 系統會到存放標準函式庫的目錄中 (通常位於 /usr/lib) 中去尋找 libname.a 檔案. 所以你所尋找的數學函式庫應該是 /usr/lib/libm.a . 和表頭檔一樣, 函式庫有時也放在非標準路徑的目錄下. 你這時必須以 -L 選項來告訴 gcc 到哪裡去找這函式庫, 例如 :&lt;br&gt;%gcc -o -L/src/local/lib main.o plot_line.o -lm&lt;/p&gt;
&lt;p&gt;它告訴gcc 首先到 /src/local/lib 去找函式庫, 然後才是標準路徑下的函式庫. 假如某人把自己版本的函式庫放到 /src/local/lib 下, 在使用順序上, 他的這個版本將超過 /usr/lib 下的同名函式庫&lt;/p&gt;
&lt;p&gt;///==================另外還有個Os選項==========================&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2hpLmJhaWR1LmNvbS9haF9fZnUvYmxvZy9pdGVtL2NjOWZkMTliODAxOTQ4YmRjOWVhZjRiMy5odG1s&#34;&gt;http://hi.baidu.com/ah__fu/blog/item/cc9fd19b801948bdc9eaf4b3.html&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;在研究編譯驅動的makefile的時候，發現GCC的命令行裡面有一個-Os的優化選項。&lt;br&gt;    遍查GCC文檔，發現了-O0, -O1, -O2, -O3，就是沒有發現-Os。&lt;br&gt;    祭出GOOGLE大法搜了一下，終於發現這篇文章說明了-Os的作用：&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5saW51eGpvdXJuYWwuY29tL2FydGljbGUvNzI2OQ==&#34;&gt;http://www.linuxjournal.com/article/7269&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   原來-Os相當於-O2.5。是使用了所有-O2的優化選項，但又不縮減代碼尺寸的方法。&lt;br&gt;   詳細的說明如下：&lt;br&gt;Level 2.5 (-Os)&lt;br&gt;The special optimization level (-Os or size) enables all -O2 optimizations that do not increase code size; it puts the emphasis on size over speed. This includes all second-level optimizations, except for the alignment optimizations. The alignment optimizations skip space to align functions, loops, jumps and labels to an address that is a multiple of a power of two, in an architecture-dependent manner. Skipping to these boundaries can increase performance as well as the size of the resulting code and data spaces; therefore, these particular optimizations are disabled. The size optimization level is enabled as:&lt;br&gt;gcc -Os -o test test.c&lt;br&gt;In gcc 3.2.2, reorder-blocks is enabled at -Os, but in gcc 3.3.2 reorder-blocks is disabled.&lt;/p&gt;
&lt;p&gt;==============================&lt;br&gt;補充：在GCC的官方文檔裡又發現了關於-Os的說明：&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2djYy5nbnUub3JnL29ubGluZWRvY3MvZ2NjLTMuNC42L2djYy9PcHRpbWl6ZS1PcHRpb25zLmh0bWwjT3B0aW1pemUtT3B0aW9ucw==&#34;&gt;http://gcc.gnu.org/onlinedocs/gcc-3.4.6/gcc/Optimize-Options.html#Optimize-Options&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;//=============================================&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaXNvbjgxL2FyY2hpdmUvMjAwOS8wNS8wNy80MTU4NTc2LmFzcHg=&#34;&gt;http://blog.csdn.net/ison81/archive/2009/05/07/4158576.aspx&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;backtrace與fomit-frame-pointer選項&lt;/p&gt;
&lt;p&gt;事實上gcc的所有級別的優化（-O, -O2, -O3等）都會打開-fomit-frame-pointer，該選項的功能是函數調用時不保存frame指針，在ARM上就是fp，故我們無法按照APCS中的約定來回溯調用棧。但是GDB中仍然可以使用bt命令看到調用棧，為什麼？得知GDB v6之後都是支持DWARF2的，也就意味著它可以不依賴fp來回溯調用棧（詳見&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2djYy5nbnUub3JnL21sL2djYy8yMDAzLTEwL21zZzAwMzIyLmh0bWzvvInjgII=&#34;&gt;http://gcc.gnu.org/ml/gcc/2003-10/msg00322.html）。&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;看來想在代碼中動態顯示調用棧而又不希望使用GDB的朋友，只能在編譯時關掉-fomit-frame-pointer了。&lt;/p&gt;
&lt;p&gt;//==================gcc參數大全：===========================&lt;/p&gt;
&lt;p&gt;[參數詳解]&lt;br&gt;-x language filename&lt;br&gt;　設定文件所使用的語言,使後綴名無效,對以後的多個有效.也就是根據約定C語言的後綴名稱是.c的，而C++的後綴名是.C或者.cpp,如果你很個性，決定你的C代碼文件的後綴名是.pig 哈哈，那你就要用這個參數,這個參數對他後面的文件名都起作用，除非到了下一個參數的使用。&lt;br&gt;　　可以使用的參數嗎有下面的這些&lt;br&gt;　　&lt;code&gt;c&amp;#39;,&lt;/code&gt;objective-c’, &lt;code&gt;c-header&amp;#39;,&lt;/code&gt;c++’, &lt;code&gt;cpp-output&amp;#39;,&lt;/code&gt;assembler’, and `assembler-with-cpp’.&lt;br&gt;　　看到英文，應該可以理解的。&lt;br&gt;　　例子用法:&lt;br&gt;　　gcc -x c hello.pig&lt;br&gt;　　&lt;br&gt;-x none filename&lt;br&gt;　　關掉上一個選項，也就是讓gcc根據文件名後綴，自動識別文件類型&lt;br&gt;　　例子用法:&lt;br&gt;　　gcc -x c hello.pig -x none hello2.c&lt;br&gt;　　&lt;br&gt;-c&lt;br&gt;　　只激活預處理,編譯,和彙編,也就是他只把程序做成obj文件&lt;br&gt;　　例子用法:&lt;br&gt;　　gcc -c hello.c&lt;br&gt;　　他將生成.o的obj文件&lt;br&gt;-S&lt;br&gt;　　只激活預處理和編譯，就是指把文件編譯成為彙編代碼。&lt;br&gt;　　例子用法&lt;br&gt;　　gcc -S hello.c&lt;br&gt;　　他將生成.s的彙編代碼，你可以用文本編輯器察看&lt;br&gt;-E&lt;br&gt;　　只激活預處理,這個不生成文件,你需要把它重定向到一個輸出文件裡面.&lt;br&gt;　　例子用法:&lt;br&gt;　　gcc -E hello.c &amp;gt; pianoapan.txt&lt;br&gt;　　gcc -E hello.c | more&lt;br&gt;　　慢慢看吧,一個hello word 也要與處理成800行的代碼&lt;br&gt;-o&lt;br&gt;　　制定目標名稱,缺省的時候,gcc 編譯出來的文件是a.out,很難聽,如果你和我有同感，改掉它,哈哈&lt;br&gt;　　例子用法&lt;br&gt;　　gcc -o hello.exe hello.c (哦,windows用習慣了)&lt;br&gt;　　gcc -o hello.asm -S hello.c&lt;br&gt;-pipe&lt;br&gt;　　使用管道代替編譯中臨時文件,在使用非gnu彙編工具的時候,可能有些問題&lt;br&gt;　　gcc -pipe -o hello.exe hello.c&lt;br&gt;-ansi&lt;br&gt;　　關閉gnu c中與ansi c不兼容的特性,激活ansi c的專有特性(包括禁止一些asm inline typeof關鍵字,以及UNIX,vax等預處理宏,&lt;br&gt;-fno-asm&lt;br&gt;　　此選項實現ansi選項的功能的一部分，它禁止將asm,inline和typeof用作關鍵字。 　　　　&lt;br&gt;-fno-strict-prototype&lt;br&gt;　　只對g++起作用,使用這個選項,g++將對不帶參數的函數,都認為是沒有顯式的對參數的個數和類型說明,而不是沒有參數.&lt;br&gt;　　而gcc無論是否使用這個參數,都將對沒有帶參數的函數,認為城沒有顯式說明的類型&lt;br&gt;　　&lt;br&gt;-fthis-is-varialble&lt;br&gt;　　就是向傳統c++看齊,可以使用this當一般變量使用.&lt;br&gt;　　&lt;br&gt;-fcond-mismatch&lt;br&gt;　　允許條件表達式的第二和第三參數類型不匹配,表達式的值將為void類型&lt;br&gt;　　&lt;br&gt;-funsigned-char&lt;br&gt;-fno-signed-char&lt;br&gt;-fsigned-char&lt;br&gt;-fno-unsigned-char&lt;br&gt;　　這四個參數是對char類型進行設置,決定將char類型設置成unsigned char(前兩個參數)或者 signed char(後兩個參數)&lt;br&gt;　　&lt;br&gt;-include file&lt;br&gt;　　包含某個代碼,簡單來說,就是便以某個文件,需要另一個文件的時候,就可以用它設定,功能就相當於在代碼中使用#include&lt;filename&gt;&lt;br&gt;　　例子用法:&lt;br&gt;　　gcc hello.c -include /root/pianopan.h&lt;br&gt;　　&lt;br&gt;-imacros file&lt;br&gt;　　將file文件的宏,擴展到gcc/g++的輸入文件,宏定義本身並不出現在輸入文件中&lt;br&gt;　　&lt;br&gt;-Dmacro&lt;br&gt;　　相當於C語言中的#define macro&lt;br&gt;　　&lt;br&gt;-Dmacro=defn&lt;br&gt;　　相當於C語言中的#define macro=defn&lt;br&gt;　　&lt;br&gt;-Umacro&lt;br&gt;　　相當於C語言中的#undef macro&lt;br&gt;-undef&lt;br&gt;　　取消對任何非標準宏的定義&lt;br&gt;　　&lt;br&gt;-Idir&lt;br&gt;　　在你是用#include”file”的時候,gcc/g++會先在當前目錄查找你所制定的頭文件,如果沒有找到,他回到缺省的頭文件目錄找,如果使用-I制定了目錄,他&lt;br&gt;　　回先在你所制定的目錄查找,然後再按常規的順序去找.&lt;br&gt;　　對於#include&lt;file&gt;,gcc/g++會到-I制定的目錄查找,查找不到,然後將到系統的缺省的頭文件目錄查找&lt;br&gt;　　&lt;br&gt;-I-&lt;br&gt;　　就是取消前一個參數的功能,所以一般在-Idir之後使用&lt;br&gt;　　&lt;br&gt;-idirafter dir&lt;br&gt;　　在-I的目錄裡面查找失敗,講到這個目錄裡面查找.&lt;br&gt;　　&lt;br&gt;-iprefix prefix&lt;br&gt;-iwithprefix dir&lt;br&gt;　　一般一起使用,當-I的目錄查找失敗,會到prefix+dir下查找&lt;br&gt;　　&lt;br&gt;-nostdinc&lt;br&gt;　　使編譯器不再系統缺省的頭文件目錄裡面找頭文件,一般和-I聯合使用,明確限定頭文件的位置&lt;br&gt;　　&lt;br&gt;-nostdin C++&lt;br&gt;　　規定不在g++指定的標準路經中搜索,但仍在其他路徑中搜索,.此選項在創libg++庫使用&lt;br&gt;　　&lt;br&gt;-C&lt;br&gt;　　在預處理的時候,不刪除註釋信息,一般和-E使用,有時候分析程序，用這個很方便的&lt;br&gt;　　&lt;br&gt;-M&lt;br&gt;　　生成文件關聯的信息。包含目標文件所依賴的所有源代碼你可以用gcc -M hello.c來測試一下，很簡單。&lt;br&gt;　　&lt;br&gt;-MM&lt;br&gt;　　和上面的那個一樣，但是它將忽略由#include&lt;file&gt;造成的依賴關係。&lt;br&gt;　　&lt;br&gt;-MD&lt;br&gt;　　和-M相同，但是輸出將導入到.d的文件裡面&lt;br&gt;　　&lt;br&gt;-MMD&lt;br&gt;　　和-MM相同，但是輸出將導入到.d的文件裡面&lt;br&gt;　　&lt;br&gt;-Wa,option&lt;br&gt;　　此選項傳遞option給彙編程序;如果option中間有逗號,就將option分成多個選項,然後傳遞給會彙編程序&lt;br&gt;　　&lt;br&gt;-Wl.option&lt;br&gt;　　此選項傳遞option給連接程序;如果option中間有逗號,就將option分成多個選項,然後傳遞給會連接程序.&lt;br&gt;-llibrary&lt;br&gt;　　制定編譯的時候使用的庫&lt;br&gt;　　例子用法&lt;br&gt;　　gcc -lcurses hello.c&lt;br&gt;　　使用ncurses庫編譯程序&lt;br&gt;　　&lt;br&gt;-Ldir&lt;br&gt;　　制定編譯的時候，搜索庫的路徑。比如你自己的庫，可以用它制定目錄，不然&lt;br&gt;　　編譯器將只在標準庫的目錄找。這個dir就是目錄的名稱。&lt;br&gt;　　&lt;br&gt;-O0&lt;br&gt;-O1&lt;br&gt;-O2&lt;br&gt;-O3&lt;br&gt;　　編譯器的優化選項的4個級別，-O0表示沒有優化,-O1為缺省值，-O3優化級別最高　　 　　&lt;br&gt;-g&lt;br&gt;　　只是編譯器，在編譯的時候，產生調試信息。&lt;br&gt;　　&lt;br&gt;-gstabs&lt;br&gt;　　此選項以stabs格式聲稱調試信息,但是不包括gdb調試信息.&lt;br&gt;　　&lt;br&gt;-gstabs+&lt;br&gt;　　此選項以stabs格式聲稱調試信息,並且包含僅供gdb使用的額外調試信息.&lt;br&gt;　　&lt;br&gt;-ggdb&lt;br&gt;　　此選項將儘可能的生成gdb的可以使用的調試信息.&lt;br&gt;-static&lt;br&gt;　　此選項將禁止使用動態庫，所以，編譯出來的東西，一般都很大，也不需要什麼&lt;br&gt;動態連接庫，就可以運行.&lt;br&gt;-share&lt;br&gt;　　此選項將儘量使用動態庫，所以生成文件比較小，但是需要系統由動態庫.&lt;br&gt;-traditional&lt;br&gt;　　試圖讓編譯器支持傳統的C語言特性&lt;/p&gt;
&lt;p&gt;[參考資料]&lt;br&gt;-Linux/UNIX高級編程&lt;br&gt;　　中科紅旗軟件技術有限公司編著.清華大學出版社出版&lt;br&gt;-Gcc man page 
　　 &lt;/p&gt;
&lt;h2 id=&#34;其他編譯器&#34;&gt;&lt;a href=&#34;#其他編譯器&#34; class=&#34;headerlink&#34; title=&#34;其他編譯器&#34;&gt;&lt;/a&gt;其他編譯器&lt;/h2&gt;&lt;p&gt;Clang&lt;/p&gt;
&lt;p&gt;編譯速度更快、編譯產出更小、出錯提示更友好。尤其是在比較極端的情況下。&lt;br&gt;最後一點，其他同學也有講到，就是Clang採用的是BSD協議。這是蘋果資助LLVM、FreeBSD淘汰GCC換用Clang的一個重要原因。&lt;/p&gt;
&lt;p&gt;從代碼上說，clang結構更簡單。因為clang只需要完成詞法和語法分析，代碼優化和機器代碼的生成工作由llvm完成。所以和全部由自己包下的gcc比起來，clang可以更專注地做好一件事。&lt;br&gt;這種結構也使clang可以被單獨拿出來用在其他的程序裡。比如vim的clang_complete插件就是利用clang進行語法分析後給出精確的自動補全和語法錯誤&lt;/p&gt;
&lt;p&gt;llvm是一個底層虛擬機平台，提供了經過最佳化的IF代碼，也就是有個中間層，在這個中間層可以做很多的事情，比如優化和提供給編譯器更多的信息，理論上可以支持幾乎任何編程語言。llvm默認的前端是clang，當然也可以用gcc做前端。&lt;br&gt;llvm用c++寫的，模塊化做的很好，因此可以很好的和clang，gcc等等更多的東西合作，能為ide提供更全的有用信息。而gcc則包含的比較全面，整一個是一個宏結構，沒有模塊化設計，用c寫的，對ide也不太友好(實際上linux社區裡似乎對ide一直不感冒)。不過c++版的gcc正在重寫中，為了與llvm/clang更好的競爭，而且gcc從5.0開始打算進行模塊化設計，所以，以後gcc內部可能會分出很多部分。&lt;br&gt;就現在來看，gcc大體等同於llvm+clang所提供的功能。&lt;br&gt;很多人特別羨慕clang那強大的錯誤診斷信息，其實gcc4.8部分信息診斷能力已經超過它了，比它更準確，所以競爭真的很好，我們可以用到好的東西了。gcc目前的問題就是缺乏模塊化設計，這是暫時落後於llvm的地方。&lt;br&gt;freebsd不用gcc是因為gpl協議，llvm/clang的協議更加自由，但llvm/clang目前的兼容性和參數優化等等方面和gcc還有不小差距，雖然編譯後的體積更小了(架構領先優勢)，但在性能優化方面相比gcc還有很多事情要做。&lt;/p&gt;
&lt;p&gt;======&lt;br&gt;Several of the -f code generation options are interesting:&lt;/p&gt;
&lt;p&gt;The -ftrapv function will cause the program to abort on signed integer overflow (formally “undefined behaviour” in C).&lt;br&gt;-fverbose-asm is useful if you’re compiling with -S to examine the assembly output - it adds some informative comments.&lt;br&gt;-finstrument-functions adds code to call user-supplied profiling functions at every function entry and exit point.&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMzc1Njk3L3VzZWZ1bC1nY2MtZmxhZ3MtZm9yLWM=&#34;&gt;http://stackoverflow.com/questions/3375697/useful-gcc-flags-for-c&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;===============================&lt;/p&gt;
&lt;h3 id=&#34;pkg-config-的功能與用法&#34;&gt;&lt;a href=&#34;#pkg-config-的功能與用法&#34; class=&#34;headerlink&#34; title=&#34;pkg-config 的功能與用法&#34;&gt;&lt;/a&gt;pkg-config 的功能與用法&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NhbGFtYXJ5c2hvcC5ibG9nc3BvdC5jb20vMjAxMS8xMS9wa2ctY29uZmlnLmh0bWw=&#34;&gt;http://calamaryshop.blogspot.com/2011/11/pkg-config.html&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;當開發C程式時經常使會用到許多系統已安裝的library所提供的function，來加速對程式的開發。在程式中會將含有這些library提供的function宣告的header file加到程式中，但最頭痛的是在compile程式時加上額外的設定來告訴編譯器該去系統中的何處找尋所要使用的header file以及所使用的library file被安裝在何處。所以Linux系統上有個非常好用的工具pkg-config可以查詢library的header file以及library的所在位置及資訊，以及在編譯程式時該使用的編譯參數為何。&lt;/p&gt;
&lt;p&gt;這個程式主要讀取系統中位於 /usr/lib/pkgconfig 目錄或是環境變數 PKG_CONFIG_PATH 所設定的路徑中的副檔名為 .pc 的檔案，這些檔案包含系統安裝的library的相關資訊，包括：安裝的目錄、程式編譯的參數等等。&lt;br&gt;使用方法:&lt;br&gt;pkg-config –cflags library-name-with-version 就可以得到編譯程式時 pre-processing 動作必須加上的參數設定。&lt;br&gt;執行 pkg-config –cflags glib-2.0，其結果為-I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include。&lt;br&gt;pkg-config –libs library-name-with-version就可以得到 linking時所必須傳給編譯器的參數。&lt;br&gt;執行 pkg-config –libs glib-2.0 得到-lglib-2.0。&lt;br&gt;另外，我們還可以利用 pkg-config 來簡化 Makefile 的撰寫。&lt;br&gt;在Makefile中，原來寫在編譯器之後的參數，改成 pkg-config –cflags –libs library-name-with-version 即可。&lt;br&gt;例如：將Makefile中的這一行&lt;br&gt;gcc -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -lglib-2.0 program.c&lt;br&gt;替換成&lt;br&gt;gcc pkg-config –cflags –libs glib-2.0 program.c&lt;/p&gt;
&lt;p&gt;pkg-config 簡單用法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pkg-config –list-all&lt;br&gt;列出所有可使用的連結庫，位置在 /usr/lib/pkgconfig 及 /usr/local/lib/pkgconfig 裏面的 xxx.pc 檔，新軟體一般都會安裝 .pc 檔，沒有可以自己建立，並且設定環境變數 PKG_CONFIG_PATH 供 pkg-config 尋找 .pc 檔路徑。&lt;/li&gt;
&lt;li&gt;pkg-config –cflags xxxx&lt;br&gt;取得該連結庫的 CFLAGS 參數。(Cflags)&lt;/li&gt;
&lt;li&gt;pkg-config –libs xxxx&lt;br&gt;取得該連結庫的 LDFLAGS 參數。(Libs)&lt;/li&gt;
&lt;li&gt;pkg-config –static xxxx&lt;br&gt;取得該連結庫供靜態連結的 LDFLAGS 參數。(Libs.private)&lt;/li&gt;
&lt;li&gt;pkg-config –version&lt;br&gt;取得 pkg-config 版本號。&lt;/li&gt;
&lt;li&gt;pkg-config –modversion xxxxx&lt;br&gt;取得連結庫的版本號。(Version)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Reference&#34;&gt;&lt;a href=&#34;#Reference&#34; class=&#34;headerlink&#34; title=&#34;Reference&#34;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5jb2RlbG9va2VyLmNvbS9kZmlsZWMvNzgyNmJvb2tEVkQzL1Rob25nc29jdWFHY2MucGRm&#34;&gt;Gcc参数.txt&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9nY2MuZ251Lm9yZy9vbmxpbmVkb2NzL2djYy02LjMuMC9nY2MvaW5kZXguaHRtbA==&#34;&gt;gcc官方文件&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzU5OGI3MDk0YjhjMQ==&#34;&gt;安裝 LLVM + Clang&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="gcc" />
        <category term="linux" />
        <category term="c" />
        <category term="compile" />
        <updated>2015-02-22T17:01:01.000Z</updated>
    </entry>
</feed>
