{
    "version": "https://jsonfeed.org/version/1",
    "title": "QWERTY • All posts by \"計算機網路\" tag",
    "description": "Programming | Computer Science | Thought",
    "home_page_url": "http://gitqwerty777.github.io",
    "items": [
        {
            "id": "http://gitqwerty777.github.io/computer-network2/",
            "url": "http://gitqwerty777.github.io/computer-network2/",
            "title": "計算機網路(下)",
            "date_published": "2015-01-12T13:34:59.000Z",
            "content_html": "<!-- RENEW: -->\n\n<h2 id=\"Chap04-Network-Layer\"><a href=\"#Chap04-Network-Layer\" class=\"headerlink\" title=\"Chap04 Network Layer\"></a>Chap04 Network Layer</h2><p>transport layer: between two processes<br>network layer: between two hosts and router (may also involve intervening routers in case of VCs)</p>\n<a id=\"more\"></a>\n<ul>\n<li>routing protocols<ul>\n<li>path selection</li>\n<li>RIP, OSPF, BGP</li>\n</ul>\n</li>\n<li>IP protocol<ul>\n<li>addressing conventions</li>\n<li>datagram format</li>\n<li>packet handling conventions</li>\n</ul>\n</li>\n<li>ICMP protocol<ul>\n<li>error reporting</li>\n<li>router </li>\n<li>signaling</li>\n</ul>\n</li>\n</ul>\n<p>routing: 決定packet傳送的路徑<br>forwarding: 實際傳送<br>router has forwarding table </p>\n<p>Different from TCP/UDP(transport layer protocol)</p>\n<ol>\n<li>service:host-to-host</li>\n<li>no choice:network provides one or the other</li>\n<li>implemented in network core</li>\n</ol>\n<h3 id=\"network-layer-service\"><a href=\"#network-layer-service\" class=\"headerlink\" title=\"network layer service\"></a>network layer service</h3><p>datagram network: network-layer connectionless service<br>virtual-circuit network: network-layer connection service</p>\n<ol>\n<li>Virtual-Circuit Networks<ol start=\"3\">\n<li>包含<ul>\n<li>路徑</li>\n<li>VC number</li>\n<li>路徑上所有router的forwarding table index</li>\n</ul>\n</li>\n<li>performance-wise</li>\n<li>三個階段:  <ol>\n<li>VC建立:傳送端的傳輸層會聯繫網路層，指定接收端的位址，並等待網路建立 VC。網路層會決定傳送端到接收端之間的路徑，也會為路徑上所有的連結決定其VC編號，在路徑每一台router的轉送表中都加入一筆項目。</li>\n<li>資料傳輸</li>\n<li>VC斷線</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Datagram Networks(資料封包網路)          <ul>\n<li>using destination address(IP)</li>\n<li>longest prefix matching: goto longest address prefix that matches destination address <ul>\n<li>110010000001011100010<strong><strong>****</strong></strong> -&gt; send to 1 </li>\n<li>1100100000010111000100001<strong>****</strong> -&gt; send to 2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>比較  <ul>\n<li>Internet (datagram)<ul>\n<li>no setup, routers do not remember state</li>\n<li>“elastic” service, no strict timing request</li>\n<li>many link types: uniform service difficult</li>\n<li>“smart” end systems (computers)<ul>\n<li>can adapt, perform control, error recovery</li>\n<li>simple inside network, complexity at “edge”</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ATM (VC)<ul>\n<li>human conversation: strict timing, reliability requirements</li>\n<li>need for guaranteed service</li>\n<li>“dumb” end systems<ul>\n<li>telephones</li>\n<li>complexity inside network</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Router-architecture\"><a href=\"#Router-architecture\" class=\"headerlink\" title=\"Router architecture\"></a>Router architecture</h3><p>Usage  </p>\n<ol>\n<li>routing protocol (RIP, OSPF, BGP)(software)</li>\n<li>forwarding datagrams(hardware)</li>\n</ol>\n<p>Structure</p>\n<ol>\n<li>Input Ports<ul>\n<li>physical layer(bit level)</li>\n<li>datalink layer(Ethernet)(receive)</li>\n<li>decentralized switching</li>\n</ul>\n</li>\n<li>Switching Fabric<ul>\n<li>transfer packet from input buffer to appropriate output buffer  </li>\n<li>router內部的網路</li>\n<li>實作<ol>\n<li>memory(慢):查詢轉送表，找出適當的輸出埠，然後將該封包複製到該輸出埠的緩衝區</li>\n<li>bus:同一時間內只能傳輸一個封包</li>\n<li>crossbar(棋盤式):2N bus，將n格輸入埠連接到n個輸出埠</li>\n<li><img data-src=\"\" alt=\"crossbar\"></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Output Ports: input port反過來</li>\n<li>Queue Management:<br>佇列前端攔阻(Head-of-the-line (HOL) blocking): </li>\n</ol>\n<p>Total overhead = 20 bytes of TCP + 20 bytes of IP + app layer overhead</p>\n<h3 id=\"IP-Internet-Protocol\"><a href=\"#IP-Internet-Protocol\" class=\"headerlink\" title=\"IP: Internet Protocol\"></a>IP: Internet Protocol</h3><h4 id=\"IPV4\"><a href=\"#IPV4\" class=\"headerlink\" title=\"IPV4\"></a>IPV4</h4><ol>\n<li>標頭<ul>\n<li>標頭長度(HEADER LENGTH)</li>\n<li>協定(protocol):只有當ip資料段達到最後目的端時，才會使用這個欄位，值為TCP或UDP。</li>\n<li>標頭檢查(Header checksum)</li>\n<li>TTL(Time-to-live):確保資料封包不會在網路中無窮循環，每經過一個router，TTL的值就會遞減1</li>\n</ul>\n</li>\n<li>Datagram Fragmentation<ul>\n<li>MTU(maximum transfer size): 控制IP的封包長度  <ul>\n<li>Ex. 4000 byte datagram, MTU = 1500 bytes, real data = 1480bytes -&gt; 1480 + 1480 + 11xx  </li>\n</ul>\n</li>\n<li>be “reassembled” only at final destination</li>\n</ul>\n</li>\n<li>IPv4 Addressing <ul>\n<li>address為host/router和physical layer的連接</li>\n<li>Subnet: 高位元相同的ip集合，不用router就可以連接 <ul>\n<li><img data-src=\"\" alt=\"subnets\"></li>\n</ul>\n</li>\n<li>CIDR(Classless InterDomain Routing)<ul>\n<li>Ex. 11001000 ,00010111 ,0001000 | 0, 00000000</li>\n<li>200.23.16.0/23(23 is number of subnet bits)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Get IP address<ul>\n<li>ISP向ICANN(Internet Corporation for Assigned Names and Numbers)申請IP address, 記錄domain name至DNS上</li>\n<li>hard-coded by system admin in a file<ul>\n<li>Windows: control-panel-&gt;network-&gt;configuration-&gt;tcp/ip-&gt;properties</li>\n<li>UNIX: /etc/rc.config</li>\n</ul>\n</li>\n<li>DHCP(Dynamic Host Configuration Protocol)<ul>\n<li>IP address的分配 </li>\n<li>get address while connected on<ul>\n<li>sent to DHCP: 255.255.255.255, 67</li>\n<li>listen from DHCP: 255.255.255.255, 68</li>\n</ul>\n</li>\n<li>四階段<ul>\n<li>host broadcasts “DHCP discover” [optional]</li>\n<li>DHCP server responds with “DHCP offer” [optional]</li>\n<li>host requests IP address: “DHCP request”</li>\n<li>DHCP server sends address: “DHCP ack”</li>\n</ul>\n</li>\n<li>DHCP server can also return useful information<ul>\n<li>address of first-hop router for client</li>\n<li>name and IP address of DNS sever</li>\n<li>network mask (indicating network versus host portion of address)</li>\n</ul>\n</li>\n<li>Real action<ul>\n<li>DHCP request encapsulated in UDP, encapsulated in IP, encapsulated in 802.1 Ethernet</li>\n<li>Ethernet frame broadcast (dest: FFFFFFFFFFFF) on LAN</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>NAT(Network Address Translation)(網路位址轉譯)<ul>\n<li>產生local network, 可自定義ip address, 再交由NAT轉譯成正確IP</li>\n<li>可避免攻擊，便於管理。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcy5uY2N1LmVkdS50dy9+bGllbi9Xcml0aW5nL05HTi9maXJld2FsbC5odG0=\">http://www.cs.nccu.edu.tw/~lien/Writing/NGN/firewall.htm<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>violates end-to-end argument</li>\n<li>NAT traversal problem: 在外面的user如何連到未知(不知道ip)的server<ol>\n<li>固定ip(失去保護作用)</li>\n<li>UPnP(通用型隨插即用）: 應用程式將獲得共用的Public IP地址及Port做點對點的傳輸。</li>\n<li>relaying (used in Skype) <ul>\n<li>以relay server 作為 bridge</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>NAT possibility must be taken into account by app designers, e.g., P2P applications</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>ICMP: 回報錯誤</li>\n</ol>\n<h4 id=\"IPv6\"><a href=\"#IPv6\" class=\"headerlink\" title=\"IPv6\"></a>IPv6</h4><ol>\n<li>簡介<ul>\n<li>因應大量的IP位址空間需求<ul>\n<li>IP位址長度從32位元增加到128位元</li>\n</ul>\n</li>\n<li>新的位址型態: 任意點位址(anycast adress)，它允許含有任意點位址的資料段，可以傳送到一群主機中的任一台主機</li>\n<li>固定長度的40個位元組標頭, 加快資料處理</li>\n<li>no fragmentation allowed</li>\n<li>資料流標記和優先權</li>\n</ul>\n</li>\n<li>IPv6 Datagram 格式<ul>\n<li>版本號碼(Version): ip的版本號碼</li>\n<li>轉送次數限制(Hop limit):每當路由器轉送資料段後，就會將資料段此欄位的內容遞減1。如果hop limit計數減到0時，就會捨棄這個資料段</li>\n<li>checksum: removed in IPV6 to reduce processing time</li>\n<li>ICMPv6:new version of ICMP</li>\n</ul>\n</li>\n<li>從 IPv4 到 IPv6<ol>\n<li>雙堆疊(dual-stack)法:其中的ipv6節點也實作了完整的ipv4，也就是這種結點能夠傳送和接收ipv6及ipv4兩種的資料段。<br>ipv6/ipv4節點必須同時擁有ipv6和ipv4的位址，也需要能夠決定其它結點是否可以執行ipv6的功能。這個問題可以使用DNS解決，如果結點名稱解析為可使用IPV6功能，則它會傳回IPV6位址;否則它會傳回IPV4位址。    在雙堆疊法中，如果傳送端或接收端其中一方只能使用IPV4功能，則必須使用IPV4資料段，有可能會發生兩個可以執行ipv6功能的節點不使用ipv6，而是彼此送出ipv4資料段。這會造成IPV6的資料欄位在轉換成IPV4的型式時發生欄位遺失，最後在傳送到目的地時，不會是原始的ipv6    資料段的所有欄位。</li>\n<li>建立通道(tunneling): 中間有中介的ipv4路由器，稱為通道(tunnel)。通道傳送端的將整個ipv6資料(含標頭檔)放入ipv4，當作資料傳送。起點和終點均為ipv6 router</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Routing-Algorithm\"><a href=\"#Routing-Algorithm\" class=\"headerlink\" title=\"Routing Algorithm\"></a>Routing Algorithm</h3><ol>\n<li>Link-State (LS)<ul>\n<li>global: all routers have complete topology, link cost info  </li>\n<li>Dijkstra: 放入想算的點U至N，找!N距U最近，將其放入N，LOOP<ul>\n<li>!N: 若經過[最新放入的N值的點]走更近，更新值</li>\n<li>O(nlogn)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Distance-Vector (DV)<ul>\n<li><img data-src=\"\" alt=\"\"></li>\n<li>decentralized: router only knows link costs to neighbors </li>\n<li>each node maintains distance vector</li>\n<li>When link cost changes: update, if DV change, notify neighbors<ul>\n<li>bad news travels slow</li>\n<li>Poisoned reverse<ul>\n<li>防止路由迴圈(Routing loop)出現</li>\n<li>If Z routes through Y to get to X(use time much over than expect) : Z tells Y its (Z’s) distance to X is infinite (so Y won’t route to X via Z) </li>\n<li>當Router A發現Network X的中斷後, 將其跳躍數Hop count變更為Maximum+1, 其他router收到更新時會立刻知道Network X為Inaccessible，加快網絡收斂的速度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Bellman-Ford equation<ul>\n<li>dx(y) = argmin(v) {c(x,v) + dv(y)} </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>比較<ul>\n<li>speed of convergence<ul>\n<li>LS:O(n) algorithm requires O(nE) msgs<ul>\n<li>may have oscillations<ul>\n<li>若經過的封包愈多，花費愈高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DV:convergence time varies<ul>\n<li>may be routing loops</li>\n<li>count-to-infinity problem(??)</li>\n<li>惡意router散播假消息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Hierachical Routing<ul>\n<li>aggregate routers into regions,“autonomous systems”(AS)</li>\n<li>AS(Autonomous System)：一群路由器在一位管理者之下, 使用IGPs去互相傳送封包的系統</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Routing-Protocols\"><a href=\"#Routing-Protocols\" class=\"headerlink\" title=\"Routing Protocols\"></a>Routing Protocols</h3><ul>\n<li>IGP(interior gateway protocols): use in same AS(“intra-AS”)<ul>\n<li>RIP(Routing Information Protocol): DV<ul>\n<li>Included in BSD-UNIX Distribution in 1982</li>\n<li>對自己的neighbor要求Routing Table，並計錄最短的。<ul>\n<li>use route-d (application level) to manage, sent in UDP packets</li>\n<li>用hop為路徑的選擇量度。最大為15 hops</li>\n<li>RIP每次更新預設為30sec</li>\n</ul>\n</li>\n<li>if no advertisement heard after 180 sec –&gt; assume neighbor/link declared dead -&gt; invalidate route from this neighbor</li>\n</ul>\n</li>\n<li>OSPF(Open Shortest Path First): LS<ul>\n<li>透過一套演算公式，所以它的路由效率會比較好些</li>\n<li>Shortest path first</li>\n<li>Dijkstra’s algorithm</li>\n<li>features not in RIP<ul>\n<li>multiple same-cost paths</li>\n<li>security: all OSPF messages authenticated</li>\n</ul>\n</li>\n<li>Hierarchical OSPF(分層)<ul>\n<li>each nodes know full of local area, and shortest path to other areas</li>\n<li>saves table size, reduced update traffic</li>\n<li><img data-src=\"\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>BGP((Border Gateway Protocol)): between different AS(“inter-AS”)<ul>\n<li>information from neighbors(BGP會談(BGP session))</li>\n<li>使用port179的半永久性TCP連線來交換資訊 </li>\n<li>iBGPs(Interior Gateway Protocols), eBGPs(Exterior Gateway protocols)</li>\n<li>Prefix + attributes = “route”<ul>\n<li>BGP attributes<ul>\n<li>AS-path：表示到達某一AS所必須經過的路由</li>\n<li>Next-hop ：specific internal-AS router to next AS</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>BGP Route Selection(按順序)<ol>\n<li>local preference(當本地AS中有多個路由可以到達某一AS，則路由選擇的優先權於與最近路由器相連接之AS開始。偏好原則)</li>\n<li>shortest AS-PATH(經過最少AS)</li>\n<li>closest NEXT-HOP router: hot potato routing(經過最少internal router)</li>\n<li>additional criteria(其他)</li>\n</ol>\n</li>\n<li>Routing Policy: do not want to provide informations not relevalent to its own customer</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"broadcast-and-multicast-routing\"><a href=\"#broadcast-and-multicast-routing\" class=\"headerlink\" title=\"broadcast and multicast routing\"></a>broadcast and multicast routing</h3><p> Source-duplication<br>in-network duplication: enefficient, do not know send to whom<br>2. flooding: 當節點接到一個廣播封包,他會複製該封包在傳送給相鄰節點<br>3. RPF(reversed path forwarding):<br>    1.<br>        if (datagram received on incoming link on shortest path back to center)<br>        then flood datagram onto all outgoing links<br>        else ignore datagram<br>3. Spanning Tree<br>方法：定義集結點。節點以單點傳播送至集結點,定義出樹的分支<br>4. IGMP (Internet Group Management Protocol): Soft State<br>運作於主機和其直接連結的router間<br>換句話說,我們可以將直接連結的router,當成到達區域網路外部任何其他主機的路徑上第一站轉送router或是到達該主機的任意路徑上最後一站轉送router<br>5. DVMRP(Distance-Vector Multicast Routing Protocol) vs. PIM(Protocol-Independent Multicast)</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>宅學習(輔大)</p>\n",
            "tags": [
                "計算機網路"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/computer-network1/",
            "url": "http://gitqwerty777.github.io/computer-network1/",
            "title": "計算機網路(上)",
            "date_published": "2014-09-24T13:43:59.000Z",
            "content_html": "<!-- RENEW: -->\n\n<h2 id=\"Chap01-Introduction\"><a href=\"#Chap01-Introduction\" class=\"headerlink\" title=\"Chap01 Introduction\"></a>Chap01 Introduction</h2><h3 id=\"Terminologies\"><a href=\"#Terminologies\" class=\"headerlink\" title=\"Terminologies\"></a>Terminologies</h3><p>connected computing devices     </p>\n<ul>\n<li>hosts: end systems<ul>\n<li>running network apps</li>\n<li>sends packets of data</li>\n<li>breaks message into smaller chunks, known as packets     </li>\n</ul>\n</li>\n<li>bandwidth: transmission rate<ul>\n<li>link capacity(maximum rate)</li>\n<li>link bandwidth(available rate)</li>\n</ul>\n</li>\n<li>Packet switches: forward packets(chunks of data) by routers and switches</li>\n<li><strong>protocols</strong>: define format, order of messages sent and received and actions taken on message transmission and receive<ul>\n<li>TCP, IP, HTTP, Skype, 802.11</li>\n</ul>\n</li>\n<li>Internet standards<ul>\n<li>RFC: Request for comments</li>\n<li>IETF: Internet Engineering Task Force<br><img data-src=\"/img/CN/UHFBvAO.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>Internet<ul>\n<li><strong>network of networks</strong>  </li>\n<li><strong>Interconnected ISPs</strong>  </li>\n<li><strong>Infrastructure that provides services to applications</strong><ul>\n<li>Web, VoIP, email, games…  </li>\n</ul>\n</li>\n<li><strong>provides programming interface to apps</strong></li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"Network-Structure\"><a href=\"#Network-Structure\" class=\"headerlink\" title=\"Network Structure\"></a>Network Structure</h3><ul>\n<li>network edge<ul>\n<li>hosts: clients and servers(often in data centers)</li>\n</ul>\n</li>\n<li>network core<ul>\n<li>interconnected routers, network of networks  </li>\n</ul>\n</li>\n<li>access networks, physical media<ul>\n<li>wired, wireless communication links</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Access-Network\"><a href=\"#Access-Network\" class=\"headerlink\" title=\"Access Network\"></a>Access Network</h3><h4 id=\"digital-subscriber-line-DSL\"><a href=\"#digital-subscriber-line-DSL\" class=\"headerlink\" title=\"digital subscriber line (DSL)\"></a>digital subscriber line (DSL)</h4><p>DSL透過電話線的附加頻段在話音訊帶上傳送大量資料<br>typically (&lt; 1 Mbps/&lt; 10 Mbps)<br><img data-src=\"/img/CN/7kYoUyA.png\" alt=\"\">    </p>\n<h4 id=\"cable-network\"><a href=\"#cable-network\" class=\"headerlink\" title=\"cable network\"></a>cable network</h4><p>unlike DSL, which has dedicated access to central offic<br><img data-src=\"/img/CN/wonLAB8.png\" alt=\"\"><br>frequency division multiplexing: different channels transmitted<br>in different frequency bands<br>將多路基頻訊號調製到不同頻率載波上再進行疊加形成一個複合訊號<br><img data-src=\"/img/CN/H5z9oXy.png\" alt=\"\"><br>HFC: hybrid fiber coax(混合式光纖同軸電纜)<br>其主幹是光纖（Fiber）網路(fiber attaches homes to ISP router)，末端枝幹是雙向同軸電纜線（Coaxial Cable）<br>在主幹網路上，每條光纖採用環狀結構連接，確保一條網路斷線時，另外一條網路仍能傳遞資料，以光波傳輸訊號，傳輸距離長，提供高速連接至光纖節點（Fiber node），由光接收機將光訊號轉為電視訊號，再改經同軸電纜傳送至用戶終端。HFC 網路的頻寬達750MHz，以6MHz來劃分整體的頻道，可容納高達110個類比視訊頻道，或1000個數位節目。</p>\n<p>asymmetric: up to 30Mbps/2 Mbps<br>homes share access network to cable headend</p>\n<h4 id=\"home-network\"><a href=\"#home-network\" class=\"headerlink\" title=\"home network\"></a>home network</h4><p><img data-src=\"/img/CN/oIEjJsN.png\" alt=\"\"></p>\n<h4 id=\"Enterprise-access-networks-Ethernet\"><a href=\"#Enterprise-access-networks-Ethernet\" class=\"headerlink\" title=\"Enterprise access networks (Ethernet)\"></a>Enterprise access networks (Ethernet)</h4><p><img data-src=\"/img/CN/LebfyMI.png\" alt=\"\"></p>\n<ul>\n<li>一種電腦區域網路組網技術(IEEE 802.3)，它規定了包括實體層的連線、電訊號和介質存取層協定的內容</li>\n<li>typically used in companies, universities</li>\n<li>today, end systems typically connect into Ethernet switch</li>\n</ul>\n<h4 id=\"Wireless-access-networks\"><a href=\"#Wireless-access-networks\" class=\"headerlink\" title=\"Wireless access networks\"></a>Wireless access networks</h4><p>connect via base station aka “access point”</p>\n<ul>\n<li>wireless LANs:<ul>\n<li>within building (100 ft)</li>\n<li>802.11b/g (WiFi): 11/54 Mbps transmission rate</li>\n</ul>\n</li>\n<li>wide-area wireless access<ul>\n<li>provided by telco (cellular蜂巢式) operator, 10’s km and 1~10 Mbps  </li>\n<li>3G, 4G(速度，範圍): LTE</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Physical-media\"><a href=\"#Physical-media\" class=\"headerlink\" title=\"Physical media\"></a>Physical media</h3><ul>\n<li>twisted pair (TP, 雙絞線): two insulated copper wires<br>Category 5: 100 Mbps, 1 Gpbs Ethernet<br>Category 6: 10Gbps<br>是由兩條相互絕緣的導線按照規格互相纏繞在一起而製成，屬於資訊通訊網路傳輸介質。</li>\n<li>coaxial cable(同軸電纜):<ul>\n<li>two concentric(同心) copper conductors  </li>\n<li>bidirectional   </li>\n<li>broadband(寬帶): multiple channels on cable</li>\n</ul>\n</li>\n<li>HFC　Hybrid Fiber Coaxial(as above)    </li>\n<li>fiber optic cable: glass fiber carrying light pulses  <ul>\n<li>high-speed(10’s-100’s Gpbs) point-to-point transmission   </li>\n<li>low error rate: immune to electromagnetic noise</li>\n</ul>\n</li>\n<li>radio<ul>\n<li>no physical wire , bidirectional</li>\n<li>propagation(傳播) environment effects:<ul>\n<li>reflection </li>\n<li>obstruction(妨礙) by objects</li>\n<li>interference</li>\n</ul>\n</li>\n<li>radio link types:<ul>\n<li>terrestrial(地面波) microwave - up to 45 Mbps channels</li>\n<li>LAN (e.g., WiFi) - 11Mbps, 54 Mbps</li>\n<li>wide-area (e.g., cellular) - 3G cellular: ~ few Mbps</li>\n<li>satellite - Kbps to 45Mbps channel (or multiple smaller channels) <ul>\n<li>270 msec end-end delay</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"The-network-core-interconnected-routers\"><a href=\"#The-network-core-interconnected-routers\" class=\"headerlink\" title=\"The network core: interconnected routers\"></a>The network core: interconnected routers</h3><p>packet-switching: hosts break <strong>application-layer messages</strong> into packets    </p>\n<p>forward packets from one router to the next, across links on path from source to destination</p>\n<h4 id=\"Two-key-network-core-functions\"><a href=\"#Two-key-network-core-functions\" class=\"headerlink\" title=\"Two key network-core functions\"></a>Two key network-core functions</h4><p>routing: <strong>determines source-destination route</strong> taken by packets<br>routing algorithms<br>forwarding: <strong>move packets</strong> from router’s input to appropriate router output</p>\n<h4 id=\"circuit-switching\"><a href=\"#circuit-switching\" class=\"headerlink\" title=\"circuit switching\"></a>circuit switching</h4><p>電路交換要求必須首先在通信雙方之間建立連接通道。在連接建立成功之後，雙方的通信活動才能開始。<br>通信活動的過程中，連接將始終佔用著通信系統分配給它的資源（通道、頻寬、時隙、碼字等等）(no sharing)<br>circuit segment idle if not used by call (no sharing)<br>Commonly used in traditional telephone networks<br>多工：FDM &amp; TDM<br><img data-src=\"/img/CN/AyQHQy9.png\" alt=\"\"></p>\n<h4 id=\"packet-switching\"><a href=\"#packet-switching\" class=\"headerlink\" title=\"packet switching\"></a>packet switching</h4><p>封包在節點間單獨路由，不需要在傳輸前先建立通訊路徑<br>store and forward: entire packet must arrive at router before it can be transmitted on next link<br>If arrival rate exceeds transmission rate of link:</p>\n<ol>\n<li>packets will queue, wait to be transmitted on link </li>\n<li>packets will be lost if memory(buffer) fills up</li>\n</ol>\n<h4 id=\"why-packet-switching-better-than-circuit-switching\"><a href=\"#why-packet-switching-better-than-circuit-switching\" class=\"headerlink\" title=\"why packet switching better than circuit switching\"></a>why packet switching better than circuit switching</h4><ol>\n<li>packet switching allows more users to use network!<br>Ex.<br>1 Mb/s link<br>each user is [100 kb/s when “active”] and [active 10% of time]<br>with 35 users, probability &gt; 10 active at same time is less than .0004(計算的機率)</li>\n<li>great for bursty data(resource sharing)</li>\n<li>excessive congestion possible: packet delay and loss<ul>\n<li>need protocols needed for reliable data transfer, congestion control</li>\n</ul>\n</li>\n</ol>\n<p>Q: How to provide circuit-like behavior?<br>bandwidth guarantees needed for audio/video apps</p>\n<h3 id=\"Internet-structure-network-of-networks\"><a href=\"#Internet-structure-network-of-networks\" class=\"headerlink\" title=\"Internet structure: network of networks\"></a>Internet structure: network of networks</h3><p>End systems connect to Internet via access ISPs (Internet Service Providers)<br>ISPs must be interconnected</p>\n<p><img data-src=\"/img/CN/WB7uwMH.png\" alt=\"\"><br><img data-src=\"/img/CN/BeFXQC2.png\" alt=\"\"><br>IXP Internet exchange point</p>\n<p><img data-src=\"/img/CN/u2H7X7p.png\" alt=\"\"><br>“tier-1” commercial ISPs (e.g., Level 3, Sprint, AT&amp;T, NTT), national &amp; international coverage<br>content provider network (e.g, Google): private network that connects it data centers to Internet, often bypassing tier-1, regional ISPs</p>\n<h3 id=\"packet-delay\"><a href=\"#packet-delay\" class=\"headerlink\" title=\"packet delay\"></a>packet delay</h3><h4 id=\"Four-sources-of-packet-delay\"><a href=\"#Four-sources-of-packet-delay\" class=\"headerlink\" title=\"Four sources of packet delay\"></a>Four sources of packet delay</h4><p><img data-src=\"/img/CN/RifdgHR.png\" alt=\"\"><br>dproc: noda processing<br>check bit errors<br>determine output link<br>typically &lt; msec</p>\n<p>dqueue: queueing delay<br><img data-src=\"/img/CN/7r4M1Q5.png\" alt=\"\"><br>dtrans: transmission delay(檔案傳輸)(受限於頻寬，一次只能傳送一定大小)<br>L: packet length (bits)<br>R: link bandwidth (bps)<br>dtrans = L/R</p>\n<p>dprop: propagation delay(傳輸速度(約光速))<br>d: length of physical link<br>s: propagation speed in medium (~2x108 m/sec)<br>dprop = d/s</p>\n<p>traceroute program: provides delay measurement from source to router along end-end Internet path towards destination</p>\n<p>throughput: rate (bits/time unit) at which bits transferred between sender/receiver<br>instantaneous: rate at given point in time<br>average: rate over longer period of time<br>link on end-end path that constrains  end-end throughput(被最慢的部分限制)</p>\n<h3 id=\"Protocol-“layers”\"><a href=\"#Protocol-“layers”\" class=\"headerlink\" title=\"Protocol “layers”\"></a>Protocol “layers”</h3><p><img data-src=\"/img/CN/AfKoIko.png\" alt=\"AIR TRAVEL\"></p>\n<p>layers: each layer implements a service<br>via its own internal-layer actions<br>relying on services provided by layer below</p>\n<ol>\n<li>explicit structure allows identification, relationship of complex system’s pieces</li>\n<li>modularization eases maintenance, updating of system<br>change of implementation of layer’s service transparent to rest of system(不互相影響)<br>e.g., change in gate procedure doesn’t affect rest of system</li>\n</ol>\n<p><img data-src=\"/img/CN/pYLYYrA.png\" alt=\"layer model\"><br><strong>Layer Model</strong>  </p>\n<ul>\n<li>application: supporting network applications<ul>\n<li>FTP, SMTP, HTTP</li>\n</ul>\n</li>\n<li>transport: process-process data transfer<ul>\n<li>TCP, UDP</li>\n</ul>\n</li>\n<li>network: routing of datagrams from source to destination<ul>\n<li>IP, routing protocols</li>\n</ul>\n</li>\n<li>link: data transfer between neighboring  network elements<ul>\n<li>Ethernet, 802.11 (WiFi), PPP</li>\n</ul>\n</li>\n<li>physical: bits “on the wire”</li>\n</ul>\n<p><img data-src=\"/img/CN/delHpJN.png\" alt=\"iso layer model\"><br><strong>ISO/OSI layer model (7 layers)</strong><br>additional 2 layers  </p>\n<ul>\n<li>presentation: allow applications to interpret meaning of data<ul>\n<li>encryption, compression, machine-specific conventions</li>\n</ul>\n</li>\n<li>session: synchronization, checkpointing, recovery of data exchange</li>\n</ul>\n<p>Internet stack “missing” these layers!<br>these services, <strong>if needed</strong>, must be implemented in application</p>\n<h3 id=\"Encapsulation\"><a href=\"#Encapsulation\" class=\"headerlink\" title=\"Encapsulation\"></a>Encapsulation</h3><p>包裝好(加上header)，運送，再拆封包<br><img data-src=\"/img/CN/\" alt=\"Encapsulation\"></p>\n<h3 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h3><p>網路本無考慮安全性<br>本來的想法： 「互相相信的使用者組成的透明網路」</p>\n<p>Bad guys: put malware into hosts via Internet</p>\n<ul>\n<li>virus: self-replicating infection by receiving/executing object (e.g., e-mail attachment)<ul>\n<li>會感染其他檔案，其他人</li>\n<li>須人為開啟</li>\n</ul>\n</li>\n<li>worm: self-replicating infection by passively receiving object that gets itself executed<ul>\n<li>找作業系統或是特定程式的漏洞來鑽</li>\n<li>可自行傳播(不須做特定動作)</li>\n</ul>\n</li>\n<li>spyware: can record keystrokes, web sites visited, upload info to collection site</li>\n</ul>\n<p>被感染的電腦可當作botnet(彊屍電腦)，用來寄垃圾郵件，或進行DDoS攻擊</p>\n<p>Denial of Service (DoS): 控制多台電腦，持續提出要求，使伺服器癱瘓<br>attackers make resources (server, bandwidth) unavailable to legitimate traffic by overwhelming resource with bogus traffic</p>\n<p>packet “sniffing ”(追蹤)<br>從 broadcast media (shared ethernet, wireless) 拿取目的地非自己的封包，以獲得資訊。(正常情況：丟棄)</p>\n<p>IP spoofing(謊報)<br>send packet with false source address(假造他人名義送出封包)</p>\n<h3 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h3><p>1961-1972: Early packet-switching principles<br>1972:<br>NCP (Network Control Protocol) first host-host protocol<br>first e-mail program<br>ARPAnet has 15 nodes</p>\n<p>1974:Cerf and Kahn - architecture for interconnecting networks<br>Cerf and Kahn’s internetworking principles define today’s Internet architecture:</p>\n<ul>\n<li>minimalism, autonomy - no internal changes required to interconnect networks</li>\n<li>best effort service model</li>\n<li>stateless routers</li>\n<li>decentralized control</li>\n</ul>\n<p>1983:deployment of TCP/IP<br>1983:DNS defined for name-to-IP-address translation<br>1985:ftp protocol defined</p>\n<p>early 1990s:Web<br>hypertext [Bush 1945, Nelson 1960’s]<br>HTML, HTTP: Berners-Lee<br>1994: Mosaic, later Netscape</p>\n<p>late 1990’s: commercializationof the Web<br>instant messaging, P2P file sharing<br>network security to forefront</p>\n<p>2005-present<br>Service providers (Google, Microsoft) create their own networks<br>Bypass Internet, providing “instantaneous”access to search, emai, etc.</p>\n<h2 id=\"Chap02-Application-Layer\"><a href=\"#Chap02-Application-Layer\" class=\"headerlink\" title=\"Chap02 Application Layer\"></a>Chap02 Application Layer</h2><p><img data-src=\"/img/CN/proto.png\" alt=\"protocol\"></p>\n<p>使程式更加好寫<br>不需要從網路核心開始實作，直接call function</p>\n<p>優勢：<br>可在不同裝置(end-system)上運行<br>網路通訊  </p>\n<p>註：網路核心程式不會主動執行</p>\n<h3 id=\"structure\"><a href=\"#structure\" class=\"headerlink\" title=\"structure\"></a>structure</h3><p>client-server structure  </p>\n<ul>\n<li><p>server:</p>\n<ul>\n<li>always-on host</li>\n<li>permanent IP address</li>\n<li>data centers for scaling</li>\n</ul>\n</li>\n<li><p>clients:</p>\n<ul>\n<li>communicate with server</li>\n<li>may have dynamic IP addresses</li>\n<li>do not communicate directly with each other(client間互相不知道)<br>peer-to-peer (P2P) structure  </li>\n</ul>\n</li>\n<li><p>no always-on server</p>\n<ul>\n<li><strong>arbitrary end systems directly communicate</strong></li>\n</ul>\n</li>\n<li><p>peers both request services and provide services</p>\n</li>\n<li><p>self scalability(可擴展) – new peers bring new service capacity, as well as new service demands(愈多人加入，service功能相對應愈強)</p>\n</li>\n<li><p><strong>complex management</strong>(not easy to implement)</p>\n</li>\n</ul>\n<h3 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h3><ul>\n<li>process sends/receives messages to/from its socket, by transport infrastructure</li>\n<li><img data-src=\"/img/CN/socket.png\" alt=\"\"></li>\n</ul>\n<p>Addressing processes<br>host device has unique 32-bit IP address<br>identifier (IP address and port numbers)<br>example port numbers:<br>HTTP server: 80<br>mail server: 25</p>\n<h3 id=\"Application-layer-protocol\"><a href=\"#Application-layer-protocol\" class=\"headerlink\" title=\"Application layer protocol\"></a>Application layer protocol</h3><p>define: when and how processes transfer messages</p>\n<ul>\n<li>types of messages exchanged: e.g., request, response</li>\n<li>message syntax: fields(欄位) in messages</li>\n<li>message semantics: meaning of information in fields  </li>\n</ul>\n<p>Ex. HTTP, SMTP, Skype</p>\n<p>transport service  </p>\n<ul>\n<li>data integrity(file transfer)</li>\n<li>timing</li>\n<li>throughput<ul>\n<li>multimedia vs elastic(有彈性的) apps</li>\n</ul>\n</li>\n<li>security</li>\n</ul>\n<h3 id=\"transport-protocols-services\"><a href=\"#transport-protocols-services\" class=\"headerlink\" title=\"transport protocols services\"></a>transport protocols services</h3><p>TCP(transport layer)</p>\n<ul>\n<li>reliable transport</li>\n<li>flow control: sender won’t overwhelm receiver</li>\n<li>congestion control(擁塞控制, 網路處理過多封包):throttle sender when network overloaded</li>\n<li>connection-oriented(須先建立連接):setup required between client and server processes<br>does not provide:<br>timing, throughput, security , </li>\n</ul>\n<p>UDP(transport layer)</p>\n<ul>\n<li>does not provide all of the service,  </li>\n<li>far faster than TCP</li>\n<li>used in multimedia, internet telephone</li>\n</ul>\n<p>SSL(app layer) </p>\n<ul>\n<li>encrypted TCP connection</li>\n<li>data integrity</li>\n<li>end-point authentication</li>\n<li>SSL socket API</li>\n</ul>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><ul>\n<li>hypertext transfer protocol</li>\n<li>客戶端終端（用戶）和伺服器端（網站）請求和應答的標準,使用Web瀏覽器、網路爬蟲或者其它的工具  </li>\n<li>each object is addressable by a URL, include host name and path name  </li>\n<li>use TCP to send HTTP messages</li>\n<li>stateless: server maintain no information about client</li>\n<li>RTT(Round-trip delay time): time for a small packet to travel from client to server and back(來回時間)</li>\n<li>non-persistent HTTP: one TCP connection send at most one object, connection close right after server responsed<ul>\n<li>one RTT build TCP connection + one RTT for HTTP request + file transmission time</li>\n</ul>\n</li>\n<li>persistent HTTP: send multiple object at one TCP connection<ul>\n<li>one RTT build TCP connection + one RTT for request x N files + file transmission time</li>\n</ul>\n</li>\n</ul>\n<p>HTTP Request message format<br><img data-src=\"/img/CN/2-1.png\" alt=\"http message\"></p>\n<ul>\n<li>request line(method, URL, version..)<ul>\n<li>method field</li>\n<li><code>POST</code>: modify file in specified URL</li>\n<li><code>URL</code>: use <code>GET</code></li>\n<li><code>GET</code>: get file content in specified URL</li>\n<li><code>PUT</code>: replace file in specified URL</li>\n<li><code>HEAD</code>: get information about a resource</li>\n</ul>\n</li>\n<li>header lines(fields) </li>\n<li>body(context)</li>\n</ul>\n<p>HTTP Response message format<br><img data-src=\"/img/CN/2-2.png\" alt=\"reponse\"></p>\n<ul>\n<li>status line<ul>\n<li>protocol </li>\n<li>status code</li>\n<li>status phrase</li>\n</ul>\n</li>\n</ul>\n<p>status code</p>\n<ul>\n<li>200 OK</li>\n<li>301 Moved Permanently<ul>\n<li>requested object moved, new location will send later in this msg (Location:)(重定向)</li>\n</ul>\n</li>\n<li>400 Bad Request<ul>\n<li>request msg not understood by server</li>\n</ul>\n</li>\n<li>404 Not Found<ul>\n<li>requested document not found</li>\n</ul>\n</li>\n<li>505 HTTP Version Not Supported</li>\n</ul>\n<p>try connect HTTP</p>\n<pre><code>telnet [host name] 80\nGET [path name] HTTP/1.1</code></pre><h4 id=\"User-server-state-cookies\"><a href=\"#User-server-state-cookies\" class=\"headerlink\" title=\"User-server state: cookies\"></a>User-server state: cookies</h4><p>help server keep states  </p>\n<p>Ex.<br>when initial HTTP requests arrives at site, site creates:<br>unique ID<br>entry in backend database for ID<br>cookie file kept on user’s host</p>\n<p>Help for interaction<br><span class=\"exturl\" data-url=\"aHR0cDovL3poLndpa2lwZWRpYS5vcmcvd2lraS9Db29raWUjLkU3Ljk0LkE4LkU5LjgwLjk0\">cookie<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"cache-for-proxy-server\"><a href=\"#cache-for-proxy-server\" class=\"headerlink\" title=\"cache for proxy server\"></a>cache for proxy server</h4><p>for any request, check it is in cache or not,<br>if it is, return cache</p>\n<p>typically cache is installed by ISP (university, company, residential ISP)<br>reduce response time and traffic</p>\n<p>Conditional GET: if client has up-to-update object, no need to send again<br>client send request: if-modified-since:<date></p>\n<h3 id=\"FTP\"><a href=\"#FTP\" class=\"headerlink\" title=\"FTP\"></a>FTP</h3><p>file transfer protocol<br>using TCP<br>ftp: RFC 959<br>(1)control connection：(port 21)<br>(2)data connection：(port 20)<br>Out-of-band (頻帶外)Control  </p>\n<p>server receives file transfer command, server opens 2nd TCP data connection (for file) to client<br>after transferring one file, server closes data connection</p>\n<p>maintain state: current directory and earlier authentication</p>\n<p>FTP 命令(Command)與回應(Reply)</p>\n<p>(1).命令(command)：從Client端到Server端</p>\n<p>常見命令如下:</p>\n<p> USER username :把使用者代號傳給伺服器<br> PASS password :把使用者密碼傳給伺服器<br> LIST :要求server傳回目前遠端目錄下的檔案列表 此檔案列表會透過資料連線(新建立且non-persistent) 而非control connection連線來傳送<br> RETR filename : 用來擷取遠端主機目前目錄下的某個檔案 此命令會使遠端主機開一筆data connection傳送請求的檔案<br> STOR filename : 把某個檔案存到遠端主機目前目錄下<br>(2).回應(Reply)：從Server端到Client端</p>\n<p>常見回應如下:</p>\n<p>331 Username OK,password require<br>125 Data connection already open;transfer starting<br>425 Can’t open data connection<br>452 Error writing file<br>(3)<br>不管是Command或Reply都會送出7-bit ASCII值的control connection</p>\n<h3 id=\"EMAIL\"><a href=\"#EMAIL\" class=\"headerlink\" title=\"EMAIL\"></a>EMAIL</h3><ol>\n<li>SMTP(Simple Mail Transfer Protocol) </li>\n</ol>\n<p>mail agent, mail box(in), message queue(out)</p>\n<p>The client SMTP will establish a TCP connection to port 25 at the server SMTP.<br>persistent connections</p>\n<p>three phases of transfer</p>\n<ul>\n<li>handshaking (greeting)</li>\n<li>transfer of messages</li>\n<li>closure</li>\n</ul>\n<p>commands:ASCII text<br>response:status code and phrase<br>messages must be in 7-bit ASCI</p>\n<p>SMTP是push protocol,即TCP連線是由想要送出檔案的主機所建立<br>HTTP是pull protocol,即TCP連線是由想要接收檔案的主機所建立</p>\n<pre><code>telnet URL 25\nS: 220 hamburger.edu\nC: HELO crepes.fr\nS: 250 Hello crepes.fr, pleased to meet you\nC: MAIL FROM: &lt;alice@crepes.fr&gt;\nS: 250 alice@crepes.fr... Sender ok\nC: RCPT TO: &lt;bob@hamburger.edu&gt;\nS: 250 bob@hamburger.edu ... Recipient ok\nC: DATA\nS: 354 Enter mail, end with &quot;.&quot; on a line by itself\nC: Do you like ketchup?\nC: How about pickles?\nC: .\nS: 250 Message accepted for delivery\nC: QUIT\nS: 221 hamburger.edu closing connection</code></pre><p>RFC 822: standard for text message format</p>\n<p><img data-src=\"/img/CN/2-3.png\" alt=\"header body\"><br>header lines, e.g.,<br>To:<br>From:<br>Subject:<br>Body: the “message”<br>ASCII characters only</p>\n<p>mail access protocol: get mail from user</p>\n<p>POP:Post Office Protocol [RFC 1939]<br>authorization + download<br>authorization phase + transaction phase<br>download and keep</p>\n<p>IMAP:Internet Mail Access Protocol [RFC 1730]:<br>  比POP更進一步,除了download郵件外還可以在server上管理目錄,可以做更多的動作,<br>  像郵件目錄的搬移等都得靠IMAP<br>keep all message at server<br>keep state</p>\n<p>HTTP:gmail, Hotmail, Yahoo! Mail, etc.</p>\n<h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>DNS(domain name system)，透過 DNS，我們不需要知道主機的 IP ，只要知道該主機的名稱就能連線</p>\n<p>distributed hierarchical database 樹狀查詢<br>DNS 將主機名稱的管理分配在不同層級的 DNS 伺服器當中，有 IP 異動時也容易修改，而不用透過上層 ISP 的維護。</p>\n<p>IPv4 已經接近發送完畢的階段，因此已逐漸拓展到 128bits 的 IPv6 。可以透過主機名稱就解析到 IP 的 DNS 服務，此外，目前全世界的 WWW 主機名稱也都是透過 DNS 系統在處理 IP 的對應，所以，當 DNS 掛點時，我們將無法透過主機名稱來連線，那就幾乎相當於沒有 Internet 了。</p>\n<ol>\n<li>DNS (domain name system)服務:nslookup</li>\n</ol>\n<p><img data-src=\"/img/CN/2-4.png\" alt=\"tree like\"><br>服務:把主機名稱轉成ip位置<br>Host aliasing(主機別名):一台主機可有多個別名(當然也有正規主機名稱canonical hostname 通常不好記)<br>dns可用別名查詢得到正規主機名稱及ip<br>Mail server aliasing<br>Load distribution:一個網站可能有多台伺服器 每個伺服器的ip和主機名稱不同 有要求傳送過來時 dns會一直改變回傳的伺服器的主機名稱及ip 這樣就不會有許多要求都由同一伺服器回應 可達到分配效果</p>\n<ol start=\"2\">\n<li>DNS伺服器架構<br>root DNS servers: 13 (labeled A through M)<br>Top-level domain (TLD) servers: 負責Top-level domain 如com, org, net, edu 也負責國家級的Top-level domain如uk, fr, ca, jp<br>Authoritative DNS servers: organization’s own DNS server</li>\n</ol>\n<p>Local DNSname server<br>not strictly belong to hierarchy<br>each ISP (residential ISP, company, university) has one<br>also called “default name server”<br>when host makes DNS query, query is sent to its local DNS server<br>has local cache of recent name-to-address translation pairs (but may be out of date!)<br>acts as proxy, forwards query into hierarchy</p>\n<p>iterated query:<br>“I don’t know this name, but ask this server”<br><img data-src=\"/img/CN/2-5.png\" alt=\"asking\"><br>recursive query<br>don’t temperaly return to local DNS server<br><img data-src=\"/img/CN/2-6.png\" alt=\"\"></p>\n<p>cache entries timeout (disappear) after some time (TTL)<br>TLD servers typically cached in local name servers<br>   thus root name servers not often visited<br>cached entries may be out-of-date</p>\n<p>record<br>resource records (RR) 格式: (name, value, type, TTL)</p>\n<p>TTL(time to live)<br>欄位中name和value由type決定<br>Type=A :<br>name 是正規主機名稱 , value 是正規主機名稱為name的IP address<br>ex:(relay1.bar.foo.com , 145.37.9.126 , A)</p>\n<p>Type=CNAME :<br>name 是主機別名 , value 是別名為name的正規主機名稱<br>ex:(foo.com , relay1.bar.foo.com ,CNAME)</p>\n<p>Type=NS :<br>name 是 domain(網域名稱), value 是 domain 為name的Authoritative(官方) DNS server 名稱,此Authoritative(官方) DNS server會去取得該網域內的主機ip位置<br>ex:(foo.com , dns.foo.com , NS)</p>\n<p>Type=MX : name 是主機別名 ,value 是主機別名為 name 的 mail server正規名稱<br>ex:(foo.com , mail.bar.foo.com , MX) </p>\n<p>DNS registrar(網域販賣商)</p>\n<p>queryand replymessages, both with same message format</p>\n<ol start=\"5\">\n<li>DNS Vulnerabilities(弱點)</li>\n</ol>\n<p>DDoS:發出大量的DNS查詢(ex ICMP ping) 使封包多到塞滿link 讓大多數使用者發出的合法DNS查詢因ink塞滿得不到答案 服務無法被使用<br>Not useful in root server(cache in TLD), but useful at TLD</p>\n<p>DoS(Denial-of-Service) 為一種網路攻擊 讓網路 主機等 無法被合法使用者使用</p>\n<p>man-in-the-middle attack<br>DNS poisoning – send incorrect file to DNS server, which cache</p>\n<h3 id=\"P2P\"><a href=\"#P2P\" class=\"headerlink\" title=\"P2P\"></a>P2P</h3><p>p2p &gt; client server when there are a lot of user<br><img data-src=\"/img/CN/2-7.png\" alt=\"p2pgraph\"></p>\n<p>(1) Client-server archtecture</p>\n<p>設一個server要傳給n個client 檔案大小為f 上傳速度為us</p>\n<p>上傳給n個點每個點一份f 故上傳時間為 nf/us</p>\n<p>dmin 為n台電腦中下載速度最小的  故下載時間最多為f/dmin</p>\n<p>distribution time &gt;= MAX{nf/us , f/dmin} 只要N夠大 則時間會隨著N的數量線性增加</p>\n<p>(2) P2P architecture</p>\n<p>設一個server要傳給n個client 檔案大小為f 上傳速度為us<br>只有伺服器有檔案 伺服器必須把檔案放入LINK中一次 最低上傳時間為 f/us</p>\n<p>同Client-server archtecture , dmin 為n台電腦中下載速度最小的  故下載時間最多為f/dmin</p>\n<p>整個系統上傳總容量為us(第一個點)+u1+u2+….+un  上傳給n個對等點  共上傳nf   時間為nf/(us(第一個點)+u1+u2+….+un )</p>\n<p>distribution time &gt;= MAX{f/us , f/dmin , nf/(us+u1+u2+….+un)} </p>\n<h4 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h4><p>file divided into 256Kb chunks<br><strong>peers</strong> in torrent send/receive file chunks</p>\n<p>tracker:tracks peers<br>participating in torrent</p>\n<p>torrent:group of peers exchanging chunks of a file</p>\n<p>peer joining torrent registers with tracker to get list of peers, connects to subset of peers (“neighbors”)</p>\n<p>churn(流失):peers may come and go</p>\n<p>requests missing chunks from peers, rarest first<br>sending chunks: tit-for-tat</p>\n<p>Alice sends top four peers which send to her.<br>other peers are choked by Alice every 30 seconds(receive only one chunk from her)<br>re-evaluate top 4 every10 secs</p>\n<p>想要獲得更快的下載速度，就應該先將檔案分享給別人。Optimistic Unchoking是說，每個人每30秒就挑網路中任意一個人，將檔案上傳給他。這麼作的用意是發掘網路上未知的潛力檔案提供者：假如A與K之前並未有檔案的往來，但其實這兩個人住得很近，網路互傳的速度比其他人快。今天A透過Optimistic Unchoking隨機給K上傳了一些檔案片段，讓K驚覺A的上傳速度很快，進而允許A從K處下載檔案片段。如果A與K之間的連線速度很慢，那麼過30秒之後，A會停止提供檔案給K，而去別處尋找下一個候選人</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21tZGF5cy5jb20vMjAwNy8wNC8wNi9idDEv\">http://mmdays.com/2007/04/06/bt1/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>Distributed Hash Table<br>(key, value)<br>key: movie title value: IP address</p>\n<p>put (key,value) pair in the peer that is closest(successor) to the key</p>\n<p>Circular DHT with shortcuts<br>possible to design shortcuts so O(log N) neighbors, O(log N) messages in query<br>建捷徑於與目前key差一個bit的數- &gt; =&gt; 一次至少可以縮短一半的距離<br><img data-src=\"/img/CN/2-8.png\" alt=\"circular DHT\"></p>\n<p>each peer knows address of its two successors<br>each peer periodically pings its two successors to check aliveness<br>if immediate successor leaves, choose next successor as new immediate successor</p>\n<h2 id=\"Chap03-Transport-Layer\"><a href=\"#Chap03-Transport-Layer\" class=\"headerlink\" title=\"Chap03 Transport Layer\"></a>Chap03 Transport Layer</h2><p>transport layer: logical communication between processes<br>=&gt; breaks app messages into segments, passes to network layer  </p>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><ul>\n<li>streaming multimedia apps (loss tolerant, rate sensitive)</li>\n<li>DNS</li>\n<li>SNMP</li>\n</ul>\n<p>small header size<br>no congestion control: UDP can blast away as fast as desired</p>\n<p>reliable transfer over UDP<br>add reliability at <strong>application layer</strong> to get application-specific error recovery</p>\n<p>no connection establishment (which can add delay)</p>\n<ul>\n<li>simple: no connection state at sender, receiver</li>\n<li>small header size</li>\n<li>no congestion control: UDP can blast away as fast as desired</li>\n</ul>\n<p>UDP segment format</p>\n<p>source port , dest port<br>length checksum<br>data</p>\n<p>use checksum to detect error<br><img data-src=\"/img/CN/3-1.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Reliable-data-transfer\"><a href=\"#Reliable-data-transfer\" class=\"headerlink\" title=\"Reliable data transfer\"></a>Reliable data transfer</h3><p>top-10 important network topic<br>=&gt; <strong>unreliable channel</strong> with <strong>reliable data transfer(RDT) protocol</strong></p>\n<p><img data-src=\"\" alt=\"using unreliable data transfer channel\"></p>\n<p>RDT 2.0: bit error -&gt; use ctrl msgs<br>checksum to detect bit errors<br>acknowledgements (ACKs), negative acknowledgements (NAKs)</p>\n<p>RDT 2.1: ctrl msg error -&gt; use seq number<br>seq number prevent duplicate data, resend when corrupt<br>two seq (0,1) is enough</p>\n<p>RDT 2.2: no NAK, resend when ACKs with the same seq num</p>\n<p>RDT 3.0: lose packet -&gt; add wait time, resend when timeout<br><img data-src=\"\" alt=\"3.0 sender\"></p>\n<p>rdt3.0雖然確保了資料的可靠性，可是它採用Stop-and-Wait機制，效能很低<br>utilization of sender = 0.008(transmit time) / 30.008(transmit time+RTT) = 0.00027</p>\n<h3 id=\"Pipelined-Protocol\"><a href=\"#Pipelined-Protocol\" class=\"headerlink\" title=\"Pipelined Protocol\"></a>Pipelined Protocol</h3><p>可以讓傳送端同時傳送多個封包不需等待確認。必須增加封包的暫存空間與序列號碼。<br>暫存的區域中存在著窗格大小(Window Size)，存放著各種封包(已確認、已送出但未收到ACK、未送出的封包等等)</p>\n<h4 id=\"Go-Back-N-GBN\"><a href=\"#Go-Back-N-GBN\" class=\"headerlink\" title=\"Go-Back-N(GBN)\"></a>Go-Back-N(GBN)</h4><p><img data-src=\"\" alt=\"type\"><br><img data-src=\"\" alt=\"gbn\"><br><img data-src=\"\" alt=\"gbn sender\"><br>SENDER:  </p>\n<ol>\n<li>nothing when receive corrupt response</li>\n<li>move window when receive ACK response</li>\n<li>send all packets in window when oldest packet in window timeout </li>\n</ol>\n<p><img data-src=\"\" alt=\"gbn receiver\"><br>RECEIVER: </p>\n<ol>\n<li>永遠送出ACK，為目前收到的最高序號</li>\n<li>只收比目前收到的最高序號多一號的packet</li>\n</ol>\n<h4 id=\"Selective-Repeat-SR\"><a href=\"#Selective-Repeat-SR\" class=\"headerlink\" title=\"Selective Repeat(SR)\"></a>Selective Repeat(SR)</h4><p><img data-src=\"\" alt=\"SR\"><br>每個packet各自傳送，各自有timer  </p>\n<p>max seq# = window size * 2<br>假想有限序號0,1,2,3 窗格大小為3, 接收端收到0,1,2, 所以接收端的觀點應為：0,1,2,[3,0,1],2 當接收端回傳給傳送端的ACK遺失時, 將導致傳送端逾時而重送0,1,2 然而接收端想要的是第二批的0,1 而傳送端所傳送的封包卻是第一批的0,1。</p>\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><ul>\n<li>reliable, in-order byte steam<ul>\n<li>no “message boundaries”</li>\n</ul>\n</li>\n<li>pipelined</li>\n<li>congestion and flow control<ul>\n<li>決定 window size</li>\n</ul>\n</li>\n<li>full duplex data(雙方皆可傳)</li>\n<li>MSS(maximum segment size): 傳送的segment最大長度</li>\n<li>connection-oriented<ul>\n<li>handshaking (exchange of control msgs) </li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"\" alt=\"segment\"><br>sequence numbers(Seq): 送過去的packet的起始編號(0, 1)<br>acknowledge number(ACK): 預期對方會送來的編號<br><img data-src=\"\" alt=\"telnet \"><br>對A來講前一個收到B傳回來的資料Seq為78,下一個期待收到的為79,所以傳回ACK=79,而data為’C’這和ACK,Seq都沒關聯<br>A所傳的Seq是42,對B來講下一個應該要收到43,於是傳回ACK=43,而A在ACK=79中告訴B下一個應該送79過去,於是B傳Seq=79</p>\n<ul>\n<li>TCP傳送端  <ul>\n<li>逾時重送封包  </li>\n<li><img data-src=\"\" alt=\"cumulative ACK\">  </li>\n<li><img data-src=\"\" alt=\"TCP sender\"></li>\n</ul>\n</li>\n<li>TCP接收端<ul>\n<li>預期封包抵達事件<ul>\n<li>回傳期望下一次收到的封包之序號ACK</li>\n</ul>\n</li>\n<li>非預期封包抵達事件<ul>\n<li>暫存封包, 送出期望收到的封包之序號ACK</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Estimate-best-timeout-value\"><a href=\"#Estimate-best-timeout-value\" class=\"headerlink\" title=\"Estimate best timeout value\"></a>Estimate best timeout value</h4><p>SampleRTT: record the time of last transmission<br>exponential weighted average let value smoother<br>EstimatedRTT = (1- a) x EstimatedRTT + a x SampleRTT (typical a = 0.125)  </p>\n<p><img data-src=\"\" alt=\"devrtt\"><br>將變異數納入考慮: TimeoutInterval = EstimatedRTT + 4*DevRTT</p>\n<p>TCP fast retransmit: 收到三次相同ACK，傳送端就會立刻傳送接收端所預期的封包  </p>\n<p>Flow Control (流量控制): 讓reiceiver buffer不致overflow<br>記錄buffer剩餘的空間有多少(rcvWindow)<br>當rcvWindow=0時，傳送端會持續傳送一個1byte的區段給接收端以確認緩衝區可否繼續接收資料</p>\n<h4 id=\"TCP-Connection-Management-連線管理\"><a href=\"#TCP-Connection-Management-連線管理\" class=\"headerlink\" title=\"TCP Connection Management (連線管理)\"></a>TCP Connection Management (連線管理)</h4><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy1zb3AuaW5yaWEuZnIvbWVtYmVycy9WaW5jZW56by5NYW5jdXNvL1JldGVJbnRlcm5ldC8wNl90Y3BfcGFydDIucGRm\">http://www-sop.inria.fr/members/Vincenzo.Mancuso/ReteInternet/06_tcp_part2.pdf<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>防止delay duplicate problem</p>\n<p>3-way handshake:(open connection)<br>一方傳SYN, 另一方回傳ACK/SYN, 一方回傳ACK。</p>\n<p>4-way handshake:(close connection)<br>一方傳FIN, 另一方回傳ACK。另一方傳FIN, 一方回傳ACK。(可以handle同時想結束的情形)</p>\n<h4 id=\"congestion-control-擁塞控制\"><a href=\"#congestion-control-擁塞控制\" class=\"headerlink\" title=\"congestion control(擁塞控制)\"></a>congestion control(擁塞控制)</h4><p>保持在網路上的封包數量，不讓整體效能下降(buffer overflow, queueing in router)  </p>\n<ul>\n<li>End-to-End (implicit)<ul>\n<li>依據往返延遲時間來降低視窗大小  </li>\n<li>TCP採用此種方式     </li>\n</ul>\n</li>\n<li>Network-assisted (explicit) <ul>\n<li>Router會依據網路壅塞情況，提供傳送端明確的網路壅塞狀態且回報  </li>\n<li>回饋傳送給傳送端 或 在封包中的某個欄位記錄</li>\n</ul>\n</li>\n</ul>\n<p>cwnd(send window size)  </p>\n<ol>\n<li>AIMD (Additive-Increase, Multiplicative-Decrease): cwnd一次增加一定(+1)值，loss時成比例減少(/2)</li>\n<li>Slow Start: cwnd呈次方成長(*2)</li>\n</ol>\n<h4 id=\"TCP-Sender-Congestion-Control\"><a href=\"#TCP-Sender-Congestion-Control\" class=\"headerlink\" title=\"TCP Sender Congestion Control\"></a>TCP Sender Congestion Control</h4><p>grows by slowstart to <strong>threshold</strong>, then grows linearly  </p>\n<ul>\n<li>loss by timeout <ul>\n<li>cwnd = 1</li>\n</ul>\n</li>\n<li>loss by 3 duplicate ACKs: <ul>\n<li>TCP Tahoe - cwnd = 1</li>\n<li>TCP RENO - cwnd /= 2, threshold = cwnd   </li>\n</ul>\n</li>\n</ul>\n<p>Average throughout = (1 + 0.5)/2 = 0.75W/RTT</p>\n<h4 id=\"TCP-Fairness\"><a href=\"#TCP-Fairness\" class=\"headerlink\" title=\"TCP Fairness\"></a>TCP Fairness</h4><p>有相同需求的兩端會在bandwidth share附近震盪兩邊互相影響下是公平的</p>\n<p>但是UDP在的話就不太公平了,如多媒體。現在像youtube會在UDP上加上一些TCP friendly</p>\n<p>開多個TCP connection: 速度加快…</p>\n<p><strong>Summary</strong>  </p>\n<ul>\n<li>TCP creates rdt service on top of IP’s unreliable service<ul>\n<li>pipelined segments</li>\n<li>cumulative acks</li>\n<li>single retransmission timer</li>\n</ul>\n</li>\n<li>retransmissions triggered by<ul>\n<li>timeout events</li>\n<li>duplicate acks</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>CFChou講義</p>\n",
            "tags": [
                "計算機網路"
            ]
        }
    ]
}