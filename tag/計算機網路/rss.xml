<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>QWERTY • Posts by &#34;計算機網路&#34; tag</title>
        <link>http://gitqwerty777.github.io</link>
        <description>Programming | Computer Science | Thought</description>
        <language>zh-TW</language>
        <pubDate>Mon, 12 Jan 2015 21:34:59 +0800</pubDate>
        <lastBuildDate>Mon, 12 Jan 2015 21:34:59 +0800</lastBuildDate>
        <category>C#</category>
        <category>CodingStyle</category>
        <category>Emacs</category>
        <category>編輯器</category>
        <category>CFR</category>
        <category>電腦對局理論</category>
        <category>指令</category>
        <category>機器學習</category>
        <category>perceptron</category>
        <category>readme</category>
        <category>文件</category>
        <category>github</category>
        <category>artificial intelligence</category>
        <category>search</category>
        <category>First-Order Logic</category>
        <category>大數</category>
        <category>程式</category>
        <category>C++</category>
        <category>Hexo</category>
        <category>網誌</category>
        <category>Markdown</category>
        <category>CleanCode</category>
        <category>重構</category>
        <category>TDD</category>
        <category>設計模式</category>
        <category>CMake</category>
        <category>Makefile</category>
        <category>Linux</category>
        <category>Todo</category>
        <category>註解</category>
        <category>經濟學</category>
        <category>策略</category>
        <category>競爭</category>
        <category>博弈論</category>
        <category>計算機結構</category>
        <category>人工智慧</category>
        <category>圍棋</category>
        <category>象棋</category>
        <category>蒙地卡羅</category>
        <category>Alpha-Beta搜尋</category>
        <category>強化學習</category>
        <category>計算機網路</category>
        <category>boost</category>
        <category>函式庫</category>
        <category>編譯</category>
        <category>gcc</category>
        <category>g++</category>
        <category>clang</category>
        <category>最佳化</category>
        <category>推薦系統</category>
        <category>FM</category>
        <category>FFM</category>
        <category>SVM</category>
        <category>Embedding</category>
        <category>自然語言處理</category>
        <category>外國用語</category>
        <category>萌典</category>
        <category>opencc</category>
        <category>PTT</category>
        <category>vuejs</category>
        <category>linux</category>
        <category>c</category>
        <category>compile</category>
        <category>gdb</category>
        <category>c語言</category>
        <category>cpp</category>
        <category>除錯</category>
        <category>git</category>
        <category>VMWare</category>
        <category>虛擬機</category>
        <category>IFTTT</category>
        <category>自動化</category>
        <category>備份</category>
        <category>webhook</category>
        <category>簡報</category>
        <category>軟體</category>
        <category>PowerPoint</category>
        <category>Latex</category>
        <category>JavaScript</category>
        <category>CSS</category>
        <category>Unity</category>
        <category>fcitx</category>
        <category>嘸蝦米</category>
        <category>輸入法</category>
        <category>硬碟</category>
        <category>記憶體</category>
        <category>效能</category>
        <category>錯誤</category>
        <category>makefile</category>
        <category>備忘錄</category>
        <category>存檔</category>
        <category>統計</category>
        <category>byobu</category>
        <category>screen</category>
        <category>tmux</category>
        <category>reactjs</category>
        <category>javascript</category>
        <category>WideAndDeep</category>
        <category>Google</category>
        <category>觀察者</category>
        <category>訂閱</category>
        <category>委託</category>
        <category>正規表示式(RegExp)</category>
        <category>上下文無關文法(CFG)</category>
        <category>hexo</category>
        <category>blog</category>
        <category>theme</category>
        <category>feature</category>
        <category>revealJS</category>
        <category>markdown</category>
        <category>rss</category>
        <category>facebook</category>
        <category>youtube</category>
        <category>ptt</category>
        <category>bilibili</category>
        <category>pixiv</category>
        <category>crawler</category>
        <category>SEO</category>
        <category>google</category>
        <category>html</category>
        <category>amazon</category>
        <category>webhost</category>
        <category>ssl</category>
        <category>漢字</category>
        <category>中文</category>
        <category>異體字</category>
        <category>unicode</category>
        <category>unity</category>
        <category>演算法</category>
        <category>隨機排序</category>
        <category>洗牌</category>
        <category>Fisher-Yates</category>
        <category>證明</category>
        <category>python</category>
        <item>
            <guid isPermalink="true">http://gitqwerty777.github.io/computer-network2/</guid>
            <title>計算機網路(下)</title>
            <link>http://gitqwerty777.github.io/computer-network2/</link>
            <category>計算機網路</category>
            <pubDate>Mon, 12 Jan 2015 21:34:59 +0800</pubDate>
            <description><![CDATA[ &lt;!-- RENEW: --&gt;

&lt;h2 id=&#34;Chap04-Network-Layer&#34;&gt;&lt;a href=&#34;#Chap04-Network-Layer&#34; class=&#34;headerlink&#34; title=&#34;Chap04 Network Layer&#34;&gt;&lt;/a&gt;Chap04 Network Layer&lt;/h2&gt;&lt;p&gt;transport layer: between two processes&lt;br&gt;network layer: between two hosts and router (may also involve intervening routers in case of VCs)&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;routing protocols&lt;ul&gt;
&lt;li&gt;path selection&lt;/li&gt;
&lt;li&gt;RIP, OSPF, BGP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP protocol&lt;ul&gt;
&lt;li&gt;addressing conventions&lt;/li&gt;
&lt;li&gt;datagram format&lt;/li&gt;
&lt;li&gt;packet handling conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICMP protocol&lt;ul&gt;
&lt;li&gt;error reporting&lt;/li&gt;
&lt;li&gt;router &lt;/li&gt;
&lt;li&gt;signaling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;routing: 決定packet傳送的路徑&lt;br&gt;forwarding: 實際傳送&lt;br&gt;router has forwarding table &lt;/p&gt;
&lt;p&gt;Different from TCP/UDP(transport layer protocol)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;service:host-to-host&lt;/li&gt;
&lt;li&gt;no choice:network provides one or the other&lt;/li&gt;
&lt;li&gt;implemented in network core&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;network-layer-service&#34;&gt;&lt;a href=&#34;#network-layer-service&#34; class=&#34;headerlink&#34; title=&#34;network layer service&#34;&gt;&lt;/a&gt;network layer service&lt;/h3&gt;&lt;p&gt;datagram network: network-layer connectionless service&lt;br&gt;virtual-circuit network: network-layer connection service&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Virtual-Circuit Networks&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;包含&lt;ul&gt;
&lt;li&gt;路徑&lt;/li&gt;
&lt;li&gt;VC number&lt;/li&gt;
&lt;li&gt;路徑上所有router的forwarding table index&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;performance-wise&lt;/li&gt;
&lt;li&gt;三個階段:  &lt;ol&gt;
&lt;li&gt;VC建立:傳送端的傳輸層會聯繫網路層，指定接收端的位址，並等待網路建立 VC。網路層會決定傳送端到接收端之間的路徑，也會為路徑上所有的連結決定其VC編號，在路徑每一台router的轉送表中都加入一筆項目。&lt;/li&gt;
&lt;li&gt;資料傳輸&lt;/li&gt;
&lt;li&gt;VC斷線&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Datagram Networks(資料封包網路)          &lt;ul&gt;
&lt;li&gt;using destination address(IP)&lt;/li&gt;
&lt;li&gt;longest prefix matching: goto longest address prefix that matches destination address &lt;ul&gt;
&lt;li&gt;110010000001011100010&lt;strong&gt;&lt;strong&gt;****&lt;/strong&gt;&lt;/strong&gt; -&amp;gt; send to 1 &lt;/li&gt;
&lt;li&gt;1100100000010111000100001&lt;strong&gt;****&lt;/strong&gt; -&amp;gt; send to 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比較  &lt;ul&gt;
&lt;li&gt;Internet (datagram)&lt;ul&gt;
&lt;li&gt;no setup, routers do not remember state&lt;/li&gt;
&lt;li&gt;“elastic” service, no strict timing request&lt;/li&gt;
&lt;li&gt;many link types: uniform service difficult&lt;/li&gt;
&lt;li&gt;“smart” end systems (computers)&lt;ul&gt;
&lt;li&gt;can adapt, perform control, error recovery&lt;/li&gt;
&lt;li&gt;simple inside network, complexity at “edge”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ATM (VC)&lt;ul&gt;
&lt;li&gt;human conversation: strict timing, reliability requirements&lt;/li&gt;
&lt;li&gt;need for guaranteed service&lt;/li&gt;
&lt;li&gt;“dumb” end systems&lt;ul&gt;
&lt;li&gt;telephones&lt;/li&gt;
&lt;li&gt;complexity inside network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Router-architecture&#34;&gt;&lt;a href=&#34;#Router-architecture&#34; class=&#34;headerlink&#34; title=&#34;Router architecture&#34;&gt;&lt;/a&gt;Router architecture&lt;/h3&gt;&lt;p&gt;Usage  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;routing protocol (RIP, OSPF, BGP)(software)&lt;/li&gt;
&lt;li&gt;forwarding datagrams(hardware)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Structure&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Input Ports&lt;ul&gt;
&lt;li&gt;physical layer(bit level)&lt;/li&gt;
&lt;li&gt;datalink layer(Ethernet)(receive)&lt;/li&gt;
&lt;li&gt;decentralized switching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switching Fabric&lt;ul&gt;
&lt;li&gt;transfer packet from input buffer to appropriate output buffer  &lt;/li&gt;
&lt;li&gt;router內部的網路&lt;/li&gt;
&lt;li&gt;實作&lt;ol&gt;
&lt;li&gt;memory(慢):查詢轉送表，找出適當的輸出埠，然後將該封包複製到該輸出埠的緩衝區&lt;/li&gt;
&lt;li&gt;bus:同一時間內只能傳輸一個封包&lt;/li&gt;
&lt;li&gt;crossbar(棋盤式):2N bus，將n格輸入埠連接到n個輸出埠&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;&#34; alt=&#34;crossbar&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Output Ports: input port反過來&lt;/li&gt;
&lt;li&gt;Queue Management:&lt;br&gt;佇列前端攔阻(Head-of-the-line (HOL) blocking): &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Total overhead = 20 bytes of TCP + 20 bytes of IP + app layer overhead&lt;/p&gt;
&lt;h3 id=&#34;IP-Internet-Protocol&#34;&gt;&lt;a href=&#34;#IP-Internet-Protocol&#34; class=&#34;headerlink&#34; title=&#34;IP: Internet Protocol&#34;&gt;&lt;/a&gt;IP: Internet Protocol&lt;/h3&gt;&lt;h4 id=&#34;IPV4&#34;&gt;&lt;a href=&#34;#IPV4&#34; class=&#34;headerlink&#34; title=&#34;IPV4&#34;&gt;&lt;/a&gt;IPV4&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;標頭&lt;ul&gt;
&lt;li&gt;標頭長度(HEADER LENGTH)&lt;/li&gt;
&lt;li&gt;協定(protocol):只有當ip資料段達到最後目的端時，才會使用這個欄位，值為TCP或UDP。&lt;/li&gt;
&lt;li&gt;標頭檢查(Header checksum)&lt;/li&gt;
&lt;li&gt;TTL(Time-to-live):確保資料封包不會在網路中無窮循環，每經過一個router，TTL的值就會遞減1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datagram Fragmentation&lt;ul&gt;
&lt;li&gt;MTU(maximum transfer size): 控制IP的封包長度  &lt;ul&gt;
&lt;li&gt;Ex. 4000 byte datagram, MTU = 1500 bytes, real data = 1480bytes -&amp;gt; 1480 + 1480 + 11xx  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;be “reassembled” only at final destination&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPv4 Addressing &lt;ul&gt;
&lt;li&gt;address為host/router和physical layer的連接&lt;/li&gt;
&lt;li&gt;Subnet: 高位元相同的ip集合，不用router就可以連接 &lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;&#34; alt=&#34;subnets&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CIDR(Classless InterDomain Routing)&lt;ul&gt;
&lt;li&gt;Ex. 11001000 ,00010111 ,0001000 | 0, 00000000&lt;/li&gt;
&lt;li&gt;200.23.16.0/23(23 is number of subnet bits)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get IP address&lt;ul&gt;
&lt;li&gt;ISP向ICANN(Internet Corporation for Assigned Names and Numbers)申請IP address, 記錄domain name至DNS上&lt;/li&gt;
&lt;li&gt;hard-coded by system admin in a file&lt;ul&gt;
&lt;li&gt;Windows: control-panel-&amp;gt;network-&amp;gt;configuration-&amp;gt;tcp/ip-&amp;gt;properties&lt;/li&gt;
&lt;li&gt;UNIX: /etc/rc.config&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DHCP(Dynamic Host Configuration Protocol)&lt;ul&gt;
&lt;li&gt;IP address的分配 &lt;/li&gt;
&lt;li&gt;get address while connected on&lt;ul&gt;
&lt;li&gt;sent to DHCP: 255.255.255.255, 67&lt;/li&gt;
&lt;li&gt;listen from DHCP: 255.255.255.255, 68&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;四階段&lt;ul&gt;
&lt;li&gt;host broadcasts “DHCP discover” [optional]&lt;/li&gt;
&lt;li&gt;DHCP server responds with “DHCP offer” [optional]&lt;/li&gt;
&lt;li&gt;host requests IP address: “DHCP request”&lt;/li&gt;
&lt;li&gt;DHCP server sends address: “DHCP ack”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DHCP server can also return useful information&lt;ul&gt;
&lt;li&gt;address of first-hop router for client&lt;/li&gt;
&lt;li&gt;name and IP address of DNS sever&lt;/li&gt;
&lt;li&gt;network mask (indicating network versus host portion of address)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Real action&lt;ul&gt;
&lt;li&gt;DHCP request encapsulated in UDP, encapsulated in IP, encapsulated in 802.1 Ethernet&lt;/li&gt;
&lt;li&gt;Ethernet frame broadcast (dest: FFFFFFFFFFFF) on LAN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;NAT(Network Address Translation)(網路位址轉譯)&lt;ul&gt;
&lt;li&gt;產生local network, 可自定義ip address, 再交由NAT轉譯成正確IP&lt;/li&gt;
&lt;li&gt;可避免攻擊，便於管理。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5jcy5uY2N1LmVkdS50dy9+bGllbi9Xcml0aW5nL05HTi9maXJld2FsbC5odG0=&#34;&gt;http://www.cs.nccu.edu.tw/~lien/Writing/NGN/firewall.htm&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;violates end-to-end argument&lt;/li&gt;
&lt;li&gt;NAT traversal problem: 在外面的user如何連到未知(不知道ip)的server&lt;ol&gt;
&lt;li&gt;固定ip(失去保護作用)&lt;/li&gt;
&lt;li&gt;UPnP(通用型隨插即用）: 應用程式將獲得共用的Public IP地址及Port做點對點的傳輸。&lt;/li&gt;
&lt;li&gt;relaying (used in Skype) &lt;ul&gt;
&lt;li&gt;以relay server 作為 bridge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;NAT possibility must be taken into account by app designers, e.g., P2P applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;ICMP: 回報錯誤&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;IPv6&#34;&gt;&lt;a href=&#34;#IPv6&#34; class=&#34;headerlink&#34; title=&#34;IPv6&#34;&gt;&lt;/a&gt;IPv6&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;簡介&lt;ul&gt;
&lt;li&gt;因應大量的IP位址空間需求&lt;ul&gt;
&lt;li&gt;IP位址長度從32位元增加到128位元&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新的位址型態: 任意點位址(anycast adress)，它允許含有任意點位址的資料段，可以傳送到一群主機中的任一台主機&lt;/li&gt;
&lt;li&gt;固定長度的40個位元組標頭, 加快資料處理&lt;/li&gt;
&lt;li&gt;no fragmentation allowed&lt;/li&gt;
&lt;li&gt;資料流標記和優先權&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPv6 Datagram 格式&lt;ul&gt;
&lt;li&gt;版本號碼(Version): ip的版本號碼&lt;/li&gt;
&lt;li&gt;轉送次數限制(Hop limit):每當路由器轉送資料段後，就會將資料段此欄位的內容遞減1。如果hop limit計數減到0時，就會捨棄這個資料段&lt;/li&gt;
&lt;li&gt;checksum: removed in IPV6 to reduce processing time&lt;/li&gt;
&lt;li&gt;ICMPv6:new version of ICMP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;從 IPv4 到 IPv6&lt;ol&gt;
&lt;li&gt;雙堆疊(dual-stack)法:其中的ipv6節點也實作了完整的ipv4，也就是這種結點能夠傳送和接收ipv6及ipv4兩種的資料段。&lt;br&gt;ipv6/ipv4節點必須同時擁有ipv6和ipv4的位址，也需要能夠決定其它結點是否可以執行ipv6的功能。這個問題可以使用DNS解決，如果結點名稱解析為可使用IPV6功能，則它會傳回IPV6位址;否則它會傳回IPV4位址。    在雙堆疊法中，如果傳送端或接收端其中一方只能使用IPV4功能，則必須使用IPV4資料段，有可能會發生兩個可以執行ipv6功能的節點不使用ipv6，而是彼此送出ipv4資料段。這會造成IPV6的資料欄位在轉換成IPV4的型式時發生欄位遺失，最後在傳送到目的地時，不會是原始的ipv6    資料段的所有欄位。&lt;/li&gt;
&lt;li&gt;建立通道(tunneling): 中間有中介的ipv4路由器，稱為通道(tunnel)。通道傳送端的將整個ipv6資料(含標頭檔)放入ipv4，當作資料傳送。起點和終點均為ipv6 router&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Routing-Algorithm&#34;&gt;&lt;a href=&#34;#Routing-Algorithm&#34; class=&#34;headerlink&#34; title=&#34;Routing Algorithm&#34;&gt;&lt;/a&gt;Routing Algorithm&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Link-State (LS)&lt;ul&gt;
&lt;li&gt;global: all routers have complete topology, link cost info  &lt;/li&gt;
&lt;li&gt;Dijkstra: 放入想算的點U至N，找!N距U最近，將其放入N，LOOP&lt;ul&gt;
&lt;li&gt;!N: 若經過[最新放入的N值的點]走更近，更新值&lt;/li&gt;
&lt;li&gt;O(nlogn)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distance-Vector (DV)&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;decentralized: router only knows link costs to neighbors &lt;/li&gt;
&lt;li&gt;each node maintains distance vector&lt;/li&gt;
&lt;li&gt;When link cost changes: update, if DV change, notify neighbors&lt;ul&gt;
&lt;li&gt;bad news travels slow&lt;/li&gt;
&lt;li&gt;Poisoned reverse&lt;ul&gt;
&lt;li&gt;防止路由迴圈(Routing loop)出現&lt;/li&gt;
&lt;li&gt;If Z routes through Y to get to X(use time much over than expect) : Z tells Y its (Z’s) distance to X is infinite (so Y won’t route to X via Z) &lt;/li&gt;
&lt;li&gt;當Router A發現Network X的中斷後, 將其跳躍數Hop count變更為Maximum+1, 其他router收到更新時會立刻知道Network X為Inaccessible，加快網絡收斂的速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bellman-Ford equation&lt;ul&gt;
&lt;li&gt;dx(y) = argmin(v) {c(x,v) + dv(y)} &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比較&lt;ul&gt;
&lt;li&gt;speed of convergence&lt;ul&gt;
&lt;li&gt;LS:O(n) algorithm requires O(nE) msgs&lt;ul&gt;
&lt;li&gt;may have oscillations&lt;ul&gt;
&lt;li&gt;若經過的封包愈多，花費愈高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DV:convergence time varies&lt;ul&gt;
&lt;li&gt;may be routing loops&lt;/li&gt;
&lt;li&gt;count-to-infinity problem(??)&lt;/li&gt;
&lt;li&gt;惡意router散播假消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hierachical Routing&lt;ul&gt;
&lt;li&gt;aggregate routers into regions,“autonomous systems”(AS)&lt;/li&gt;
&lt;li&gt;AS(Autonomous System)：一群路由器在一位管理者之下, 使用IGPs去互相傳送封包的系統&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Routing-Protocols&#34;&gt;&lt;a href=&#34;#Routing-Protocols&#34; class=&#34;headerlink&#34; title=&#34;Routing Protocols&#34;&gt;&lt;/a&gt;Routing Protocols&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IGP(interior gateway protocols): use in same AS(“intra-AS”)&lt;ul&gt;
&lt;li&gt;RIP(Routing Information Protocol): DV&lt;ul&gt;
&lt;li&gt;Included in BSD-UNIX Distribution in 1982&lt;/li&gt;
&lt;li&gt;對自己的neighbor要求Routing Table，並計錄最短的。&lt;ul&gt;
&lt;li&gt;use route-d (application level) to manage, sent in UDP packets&lt;/li&gt;
&lt;li&gt;用hop為路徑的選擇量度。最大為15 hops&lt;/li&gt;
&lt;li&gt;RIP每次更新預設為30sec&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;if no advertisement heard after 180 sec –&amp;gt; assume neighbor/link declared dead -&amp;gt; invalidate route from this neighbor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OSPF(Open Shortest Path First): LS&lt;ul&gt;
&lt;li&gt;透過一套演算公式，所以它的路由效率會比較好些&lt;/li&gt;
&lt;li&gt;Shortest path first&lt;/li&gt;
&lt;li&gt;Dijkstra’s algorithm&lt;/li&gt;
&lt;li&gt;features not in RIP&lt;ul&gt;
&lt;li&gt;multiple same-cost paths&lt;/li&gt;
&lt;li&gt;security: all OSPF messages authenticated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hierarchical OSPF(分層)&lt;ul&gt;
&lt;li&gt;each nodes know full of local area, and shortest path to other areas&lt;/li&gt;
&lt;li&gt;saves table size, reduced update traffic&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BGP((Border Gateway Protocol)): between different AS(“inter-AS”)&lt;ul&gt;
&lt;li&gt;information from neighbors(BGP會談(BGP session))&lt;/li&gt;
&lt;li&gt;使用port179的半永久性TCP連線來交換資訊 &lt;/li&gt;
&lt;li&gt;iBGPs(Interior Gateway Protocols), eBGPs(Exterior Gateway protocols)&lt;/li&gt;
&lt;li&gt;Prefix + attributes = “route”&lt;ul&gt;
&lt;li&gt;BGP attributes&lt;ul&gt;
&lt;li&gt;AS-path：表示到達某一AS所必須經過的路由&lt;/li&gt;
&lt;li&gt;Next-hop ：specific internal-AS router to next AS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BGP Route Selection(按順序)&lt;ol&gt;
&lt;li&gt;local preference(當本地AS中有多個路由可以到達某一AS，則路由選擇的優先權於與最近路由器相連接之AS開始。偏好原則)&lt;/li&gt;
&lt;li&gt;shortest AS-PATH(經過最少AS)&lt;/li&gt;
&lt;li&gt;closest NEXT-HOP router: hot potato routing(經過最少internal router)&lt;/li&gt;
&lt;li&gt;additional criteria(其他)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Routing Policy: do not want to provide informations not relevalent to its own customer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;broadcast-and-multicast-routing&#34;&gt;&lt;a href=&#34;#broadcast-and-multicast-routing&#34; class=&#34;headerlink&#34; title=&#34;broadcast and multicast routing&#34;&gt;&lt;/a&gt;broadcast and multicast routing&lt;/h3&gt;&lt;p&gt; Source-duplication&lt;br&gt;in-network duplication: enefficient, do not know send to whom&lt;br&gt;2. flooding: 當節點接到一個廣播封包,他會複製該封包在傳送給相鄰節點&lt;br&gt;3. RPF(reversed path forwarding):&lt;br&gt;    1.&lt;br&gt;        if (datagram received on incoming link on shortest path back to center)&lt;br&gt;        then flood datagram onto all outgoing links&lt;br&gt;        else ignore datagram&lt;br&gt;3. Spanning Tree&lt;br&gt;方法：定義集結點。節點以單點傳播送至集結點,定義出樹的分支&lt;br&gt;4. IGMP (Internet Group Management Protocol): Soft State&lt;br&gt;運作於主機和其直接連結的router間&lt;br&gt;換句話說,我們可以將直接連結的router,當成到達區域網路外部任何其他主機的路徑上第一站轉送router或是到達該主機的任意路徑上最後一站轉送router&lt;br&gt;5. DVMRP(Distance-Vector Multicast Routing Protocol) vs. PIM(Protocol-Independent Multicast)&lt;/p&gt;
&lt;h2 id=&#34;Reference&#34;&gt;&lt;a href=&#34;#Reference&#34; class=&#34;headerlink&#34; title=&#34;Reference&#34;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;宅學習(輔大)&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://gitqwerty777.github.io/computer-network1/</guid>
            <title>計算機網路(上)</title>
            <link>http://gitqwerty777.github.io/computer-network1/</link>
            <category>計算機網路</category>
            <pubDate>Wed, 24 Sep 2014 21:43:59 +0800</pubDate>
            <description><![CDATA[ &lt;!-- RENEW: --&gt;

&lt;h2 id=&#34;Chap01-Introduction&#34;&gt;&lt;a href=&#34;#Chap01-Introduction&#34; class=&#34;headerlink&#34; title=&#34;Chap01 Introduction&#34;&gt;&lt;/a&gt;Chap01 Introduction&lt;/h2&gt;&lt;h3 id=&#34;Terminologies&#34;&gt;&lt;a href=&#34;#Terminologies&#34; class=&#34;headerlink&#34; title=&#34;Terminologies&#34;&gt;&lt;/a&gt;Terminologies&lt;/h3&gt;&lt;p&gt;connected computing devices     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hosts: end systems&lt;ul&gt;
&lt;li&gt;running network apps&lt;/li&gt;
&lt;li&gt;sends packets of data&lt;/li&gt;
&lt;li&gt;breaks message into smaller chunks, known as packets     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bandwidth: transmission rate&lt;ul&gt;
&lt;li&gt;link capacity(maximum rate)&lt;/li&gt;
&lt;li&gt;link bandwidth(available rate)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packet switches: forward packets(chunks of data) by routers and switches&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;protocols&lt;/strong&gt;: define format, order of messages sent and received and actions taken on message transmission and receive&lt;ul&gt;
&lt;li&gt;TCP, IP, HTTP, Skype, 802.11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Internet standards&lt;ul&gt;
&lt;li&gt;RFC: Request for comments&lt;/li&gt;
&lt;li&gt;IETF: Internet Engineering Task Force&lt;br&gt;&lt;img data-src=&#34;/img/CN/UHFBvAO.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Internet&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;network of networks&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interconnected ISPs&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Infrastructure that provides services to applications&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Web, VoIP, email, games…  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;provides programming interface to apps&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;h3 id=&#34;Network-Structure&#34;&gt;&lt;a href=&#34;#Network-Structure&#34; class=&#34;headerlink&#34; title=&#34;Network Structure&#34;&gt;&lt;/a&gt;Network Structure&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;network edge&lt;ul&gt;
&lt;li&gt;hosts: clients and servers(often in data centers)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;network core&lt;ul&gt;
&lt;li&gt;interconnected routers, network of networks  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;access networks, physical media&lt;ul&gt;
&lt;li&gt;wired, wireless communication links&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Access-Network&#34;&gt;&lt;a href=&#34;#Access-Network&#34; class=&#34;headerlink&#34; title=&#34;Access Network&#34;&gt;&lt;/a&gt;Access Network&lt;/h3&gt;&lt;h4 id=&#34;digital-subscriber-line-DSL&#34;&gt;&lt;a href=&#34;#digital-subscriber-line-DSL&#34; class=&#34;headerlink&#34; title=&#34;digital subscriber line (DSL)&#34;&gt;&lt;/a&gt;digital subscriber line (DSL)&lt;/h4&gt;&lt;p&gt;DSL透過電話線的附加頻段在話音訊帶上傳送大量資料&lt;br&gt;typically (&amp;lt; 1 Mbps/&amp;lt; 10 Mbps)&lt;br&gt;&lt;img data-src=&#34;/img/CN/7kYoUyA.png&#34; alt=&#34;&#34;&gt;    &lt;/p&gt;
&lt;h4 id=&#34;cable-network&#34;&gt;&lt;a href=&#34;#cable-network&#34; class=&#34;headerlink&#34; title=&#34;cable network&#34;&gt;&lt;/a&gt;cable network&lt;/h4&gt;&lt;p&gt;unlike DSL, which has dedicated access to central offic&lt;br&gt;&lt;img data-src=&#34;/img/CN/wonLAB8.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;frequency division multiplexing: different channels transmitted&lt;br&gt;in different frequency bands&lt;br&gt;將多路基頻訊號調製到不同頻率載波上再進行疊加形成一個複合訊號&lt;br&gt;&lt;img data-src=&#34;/img/CN/H5z9oXy.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;HFC: hybrid fiber coax(混合式光纖同軸電纜)&lt;br&gt;其主幹是光纖（Fiber）網路(fiber attaches homes to ISP router)，末端枝幹是雙向同軸電纜線（Coaxial Cable）&lt;br&gt;在主幹網路上，每條光纖採用環狀結構連接，確保一條網路斷線時，另外一條網路仍能傳遞資料，以光波傳輸訊號，傳輸距離長，提供高速連接至光纖節點（Fiber node），由光接收機將光訊號轉為電視訊號，再改經同軸電纜傳送至用戶終端。HFC 網路的頻寬達750MHz，以6MHz來劃分整體的頻道，可容納高達110個類比視訊頻道，或1000個數位節目。&lt;/p&gt;
&lt;p&gt;asymmetric: up to 30Mbps/2 Mbps&lt;br&gt;homes share access network to cable headend&lt;/p&gt;
&lt;h4 id=&#34;home-network&#34;&gt;&lt;a href=&#34;#home-network&#34; class=&#34;headerlink&#34; title=&#34;home network&#34;&gt;&lt;/a&gt;home network&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CN/oIEjJsN.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Enterprise-access-networks-Ethernet&#34;&gt;&lt;a href=&#34;#Enterprise-access-networks-Ethernet&#34; class=&#34;headerlink&#34; title=&#34;Enterprise access networks (Ethernet)&#34;&gt;&lt;/a&gt;Enterprise access networks (Ethernet)&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CN/LebfyMI.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一種電腦區域網路組網技術(IEEE 802.3)，它規定了包括實體層的連線、電訊號和介質存取層協定的內容&lt;/li&gt;
&lt;li&gt;typically used in companies, universities&lt;/li&gt;
&lt;li&gt;today, end systems typically connect into Ethernet switch&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Wireless-access-networks&#34;&gt;&lt;a href=&#34;#Wireless-access-networks&#34; class=&#34;headerlink&#34; title=&#34;Wireless access networks&#34;&gt;&lt;/a&gt;Wireless access networks&lt;/h4&gt;&lt;p&gt;connect via base station aka “access point”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wireless LANs:&lt;ul&gt;
&lt;li&gt;within building (100 ft)&lt;/li&gt;
&lt;li&gt;802.11b/g (WiFi): 11/54 Mbps transmission rate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;wide-area wireless access&lt;ul&gt;
&lt;li&gt;provided by telco (cellular蜂巢式) operator, 10’s km and 1~10 Mbps  &lt;/li&gt;
&lt;li&gt;3G, 4G(速度，範圍): LTE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Physical-media&#34;&gt;&lt;a href=&#34;#Physical-media&#34; class=&#34;headerlink&#34; title=&#34;Physical media&#34;&gt;&lt;/a&gt;Physical media&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;twisted pair (TP, 雙絞線): two insulated copper wires&lt;br&gt;Category 5: 100 Mbps, 1 Gpbs Ethernet&lt;br&gt;Category 6: 10Gbps&lt;br&gt;是由兩條相互絕緣的導線按照規格互相纏繞在一起而製成，屬於資訊通訊網路傳輸介質。&lt;/li&gt;
&lt;li&gt;coaxial cable(同軸電纜):&lt;ul&gt;
&lt;li&gt;two concentric(同心) copper conductors  &lt;/li&gt;
&lt;li&gt;bidirectional   &lt;/li&gt;
&lt;li&gt;broadband(寬帶): multiple channels on cable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HFC　Hybrid Fiber Coaxial(as above)    &lt;/li&gt;
&lt;li&gt;fiber optic cable: glass fiber carrying light pulses  &lt;ul&gt;
&lt;li&gt;high-speed(10’s-100’s Gpbs) point-to-point transmission   &lt;/li&gt;
&lt;li&gt;low error rate: immune to electromagnetic noise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;radio&lt;ul&gt;
&lt;li&gt;no physical wire , bidirectional&lt;/li&gt;
&lt;li&gt;propagation(傳播) environment effects:&lt;ul&gt;
&lt;li&gt;reflection &lt;/li&gt;
&lt;li&gt;obstruction(妨礙) by objects&lt;/li&gt;
&lt;li&gt;interference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;radio link types:&lt;ul&gt;
&lt;li&gt;terrestrial(地面波) microwave - up to 45 Mbps channels&lt;/li&gt;
&lt;li&gt;LAN (e.g., WiFi) - 11Mbps, 54 Mbps&lt;/li&gt;
&lt;li&gt;wide-area (e.g., cellular) - 3G cellular: ~ few Mbps&lt;/li&gt;
&lt;li&gt;satellite - Kbps to 45Mbps channel (or multiple smaller channels) &lt;ul&gt;
&lt;li&gt;270 msec end-end delay&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;The-network-core-interconnected-routers&#34;&gt;&lt;a href=&#34;#The-network-core-interconnected-routers&#34; class=&#34;headerlink&#34; title=&#34;The network core: interconnected routers&#34;&gt;&lt;/a&gt;The network core: interconnected routers&lt;/h3&gt;&lt;p&gt;packet-switching: hosts break &lt;strong&gt;application-layer messages&lt;/strong&gt; into packets    &lt;/p&gt;
&lt;p&gt;forward packets from one router to the next, across links on path from source to destination&lt;/p&gt;
&lt;h4 id=&#34;Two-key-network-core-functions&#34;&gt;&lt;a href=&#34;#Two-key-network-core-functions&#34; class=&#34;headerlink&#34; title=&#34;Two key network-core functions&#34;&gt;&lt;/a&gt;Two key network-core functions&lt;/h4&gt;&lt;p&gt;routing: &lt;strong&gt;determines source-destination route&lt;/strong&gt; taken by packets&lt;br&gt;routing algorithms&lt;br&gt;forwarding: &lt;strong&gt;move packets&lt;/strong&gt; from router’s input to appropriate router output&lt;/p&gt;
&lt;h4 id=&#34;circuit-switching&#34;&gt;&lt;a href=&#34;#circuit-switching&#34; class=&#34;headerlink&#34; title=&#34;circuit switching&#34;&gt;&lt;/a&gt;circuit switching&lt;/h4&gt;&lt;p&gt;電路交換要求必須首先在通信雙方之間建立連接通道。在連接建立成功之後，雙方的通信活動才能開始。&lt;br&gt;通信活動的過程中，連接將始終佔用著通信系統分配給它的資源（通道、頻寬、時隙、碼字等等）(no sharing)&lt;br&gt;circuit segment idle if not used by call (no sharing)&lt;br&gt;Commonly used in traditional telephone networks&lt;br&gt;多工：FDM &amp;amp; TDM&lt;br&gt;&lt;img data-src=&#34;/img/CN/AyQHQy9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;packet-switching&#34;&gt;&lt;a href=&#34;#packet-switching&#34; class=&#34;headerlink&#34; title=&#34;packet switching&#34;&gt;&lt;/a&gt;packet switching&lt;/h4&gt;&lt;p&gt;封包在節點間單獨路由，不需要在傳輸前先建立通訊路徑&lt;br&gt;store and forward: entire packet must arrive at router before it can be transmitted on next link&lt;br&gt;If arrival rate exceeds transmission rate of link:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;packets will queue, wait to be transmitted on link &lt;/li&gt;
&lt;li&gt;packets will be lost if memory(buffer) fills up&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;why-packet-switching-better-than-circuit-switching&#34;&gt;&lt;a href=&#34;#why-packet-switching-better-than-circuit-switching&#34; class=&#34;headerlink&#34; title=&#34;why packet switching better than circuit switching&#34;&gt;&lt;/a&gt;why packet switching better than circuit switching&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;packet switching allows more users to use network!&lt;br&gt;Ex.&lt;br&gt;1 Mb/s link&lt;br&gt;each user is [100 kb/s when “active”] and [active 10% of time]&lt;br&gt;with 35 users, probability &amp;gt; 10 active at same time is less than .0004(計算的機率)&lt;/li&gt;
&lt;li&gt;great for bursty data(resource sharing)&lt;/li&gt;
&lt;li&gt;excessive congestion possible: packet delay and loss&lt;ul&gt;
&lt;li&gt;need protocols needed for reliable data transfer, congestion control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Q: How to provide circuit-like behavior?&lt;br&gt;bandwidth guarantees needed for audio/video apps&lt;/p&gt;
&lt;h3 id=&#34;Internet-structure-network-of-networks&#34;&gt;&lt;a href=&#34;#Internet-structure-network-of-networks&#34; class=&#34;headerlink&#34; title=&#34;Internet structure: network of networks&#34;&gt;&lt;/a&gt;Internet structure: network of networks&lt;/h3&gt;&lt;p&gt;End systems connect to Internet via access ISPs (Internet Service Providers)&lt;br&gt;ISPs must be interconnected&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CN/WB7uwMH.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CN/BeFXQC2.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;IXP Internet exchange point&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CN/u2H7X7p.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;“tier-1” commercial ISPs (e.g., Level 3, Sprint, AT&amp;amp;T, NTT), national &amp;amp; international coverage&lt;br&gt;content provider network (e.g, Google): private network that connects it data centers to Internet, often bypassing tier-1, regional ISPs&lt;/p&gt;
&lt;h3 id=&#34;packet-delay&#34;&gt;&lt;a href=&#34;#packet-delay&#34; class=&#34;headerlink&#34; title=&#34;packet delay&#34;&gt;&lt;/a&gt;packet delay&lt;/h3&gt;&lt;h4 id=&#34;Four-sources-of-packet-delay&#34;&gt;&lt;a href=&#34;#Four-sources-of-packet-delay&#34; class=&#34;headerlink&#34; title=&#34;Four sources of packet delay&#34;&gt;&lt;/a&gt;Four sources of packet delay&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CN/RifdgHR.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;dproc: noda processing&lt;br&gt;check bit errors&lt;br&gt;determine output link&lt;br&gt;typically &amp;lt; msec&lt;/p&gt;
&lt;p&gt;dqueue: queueing delay&lt;br&gt;&lt;img data-src=&#34;/img/CN/7r4M1Q5.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;dtrans: transmission delay(檔案傳輸)(受限於頻寬，一次只能傳送一定大小)&lt;br&gt;L: packet length (bits)&lt;br&gt;R: link bandwidth (bps)&lt;br&gt;dtrans = L/R&lt;/p&gt;
&lt;p&gt;dprop: propagation delay(傳輸速度(約光速))&lt;br&gt;d: length of physical link&lt;br&gt;s: propagation speed in medium (~2x108 m/sec)&lt;br&gt;dprop = d/s&lt;/p&gt;
&lt;p&gt;traceroute program: provides delay measurement from source to router along end-end Internet path towards destination&lt;/p&gt;
&lt;p&gt;throughput: rate (bits/time unit) at which bits transferred between sender/receiver&lt;br&gt;instantaneous: rate at given point in time&lt;br&gt;average: rate over longer period of time&lt;br&gt;link on end-end path that constrains  end-end throughput(被最慢的部分限制)&lt;/p&gt;
&lt;h3 id=&#34;Protocol-“layers”&#34;&gt;&lt;a href=&#34;#Protocol-“layers”&#34; class=&#34;headerlink&#34; title=&#34;Protocol “layers”&#34;&gt;&lt;/a&gt;Protocol “layers”&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CN/AfKoIko.png&#34; alt=&#34;AIR TRAVEL&#34;&gt;&lt;/p&gt;
&lt;p&gt;layers: each layer implements a service&lt;br&gt;via its own internal-layer actions&lt;br&gt;relying on services provided by layer below&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;explicit structure allows identification, relationship of complex system’s pieces&lt;/li&gt;
&lt;li&gt;modularization eases maintenance, updating of system&lt;br&gt;change of implementation of layer’s service transparent to rest of system(不互相影響)&lt;br&gt;e.g., change in gate procedure doesn’t affect rest of system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CN/pYLYYrA.png&#34; alt=&#34;layer model&#34;&gt;&lt;br&gt;&lt;strong&gt;Layer Model&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application: supporting network applications&lt;ul&gt;
&lt;li&gt;FTP, SMTP, HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;transport: process-process data transfer&lt;ul&gt;
&lt;li&gt;TCP, UDP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;network: routing of datagrams from source to destination&lt;ul&gt;
&lt;li&gt;IP, routing protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;link: data transfer between neighboring  network elements&lt;ul&gt;
&lt;li&gt;Ethernet, 802.11 (WiFi), PPP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;physical: bits “on the wire”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CN/delHpJN.png&#34; alt=&#34;iso layer model&#34;&gt;&lt;br&gt;&lt;strong&gt;ISO/OSI layer model (7 layers)&lt;/strong&gt;&lt;br&gt;additional 2 layers  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;presentation: allow applications to interpret meaning of data&lt;ul&gt;
&lt;li&gt;encryption, compression, machine-specific conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;session: synchronization, checkpointing, recovery of data exchange&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Internet stack “missing” these layers!&lt;br&gt;these services, &lt;strong&gt;if needed&lt;/strong&gt;, must be implemented in application&lt;/p&gt;
&lt;h3 id=&#34;Encapsulation&#34;&gt;&lt;a href=&#34;#Encapsulation&#34; class=&#34;headerlink&#34; title=&#34;Encapsulation&#34;&gt;&lt;/a&gt;Encapsulation&lt;/h3&gt;&lt;p&gt;包裝好(加上header)，運送，再拆封包&lt;br&gt;&lt;img data-src=&#34;/img/CN/&#34; alt=&#34;Encapsulation&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Security&#34;&gt;&lt;a href=&#34;#Security&#34; class=&#34;headerlink&#34; title=&#34;Security&#34;&gt;&lt;/a&gt;Security&lt;/h3&gt;&lt;p&gt;網路本無考慮安全性&lt;br&gt;本來的想法： 「互相相信的使用者組成的透明網路」&lt;/p&gt;
&lt;p&gt;Bad guys: put malware into hosts via Internet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;virus: self-replicating infection by receiving/executing object (e.g., e-mail attachment)&lt;ul&gt;
&lt;li&gt;會感染其他檔案，其他人&lt;/li&gt;
&lt;li&gt;須人為開啟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;worm: self-replicating infection by passively receiving object that gets itself executed&lt;ul&gt;
&lt;li&gt;找作業系統或是特定程式的漏洞來鑽&lt;/li&gt;
&lt;li&gt;可自行傳播(不須做特定動作)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;spyware: can record keystrokes, web sites visited, upload info to collection site&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;被感染的電腦可當作botnet(彊屍電腦)，用來寄垃圾郵件，或進行DDoS攻擊&lt;/p&gt;
&lt;p&gt;Denial of Service (DoS): 控制多台電腦，持續提出要求，使伺服器癱瘓&lt;br&gt;attackers make resources (server, bandwidth) unavailable to legitimate traffic by overwhelming resource with bogus traffic&lt;/p&gt;
&lt;p&gt;packet “sniffing ”(追蹤)&lt;br&gt;從 broadcast media (shared ethernet, wireless) 拿取目的地非自己的封包，以獲得資訊。(正常情況：丟棄)&lt;/p&gt;
&lt;p&gt;IP spoofing(謊報)&lt;br&gt;send packet with false source address(假造他人名義送出封包)&lt;/p&gt;
&lt;h3 id=&#34;History&#34;&gt;&lt;a href=&#34;#History&#34; class=&#34;headerlink&#34; title=&#34;History&#34;&gt;&lt;/a&gt;History&lt;/h3&gt;&lt;p&gt;1961-1972: Early packet-switching principles&lt;br&gt;1972:&lt;br&gt;NCP (Network Control Protocol) first host-host protocol&lt;br&gt;first e-mail program&lt;br&gt;ARPAnet has 15 nodes&lt;/p&gt;
&lt;p&gt;1974:Cerf and Kahn - architecture for interconnecting networks&lt;br&gt;Cerf and Kahn’s internetworking principles define today’s Internet architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimalism, autonomy - no internal changes required to interconnect networks&lt;/li&gt;
&lt;li&gt;best effort service model&lt;/li&gt;
&lt;li&gt;stateless routers&lt;/li&gt;
&lt;li&gt;decentralized control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1983:deployment of TCP/IP&lt;br&gt;1983:DNS defined for name-to-IP-address translation&lt;br&gt;1985:ftp protocol defined&lt;/p&gt;
&lt;p&gt;early 1990s:Web&lt;br&gt;hypertext [Bush 1945, Nelson 1960’s]&lt;br&gt;HTML, HTTP: Berners-Lee&lt;br&gt;1994: Mosaic, later Netscape&lt;/p&gt;
&lt;p&gt;late 1990’s: commercializationof the Web&lt;br&gt;instant messaging, P2P file sharing&lt;br&gt;network security to forefront&lt;/p&gt;
&lt;p&gt;2005-present&lt;br&gt;Service providers (Google, Microsoft) create their own networks&lt;br&gt;Bypass Internet, providing “instantaneous”access to search, emai, etc.&lt;/p&gt;
&lt;h2 id=&#34;Chap02-Application-Layer&#34;&gt;&lt;a href=&#34;#Chap02-Application-Layer&#34; class=&#34;headerlink&#34; title=&#34;Chap02 Application Layer&#34;&gt;&lt;/a&gt;Chap02 Application Layer&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CN/proto.png&#34; alt=&#34;protocol&#34;&gt;&lt;/p&gt;
&lt;p&gt;使程式更加好寫&lt;br&gt;不需要從網路核心開始實作，直接call function&lt;/p&gt;
&lt;p&gt;優勢：&lt;br&gt;可在不同裝置(end-system)上運行&lt;br&gt;網路通訊  &lt;/p&gt;
&lt;p&gt;註：網路核心程式不會主動執行&lt;/p&gt;
&lt;h3 id=&#34;structure&#34;&gt;&lt;a href=&#34;#structure&#34; class=&#34;headerlink&#34; title=&#34;structure&#34;&gt;&lt;/a&gt;structure&lt;/h3&gt;&lt;p&gt;client-server structure  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;always-on host&lt;/li&gt;
&lt;li&gt;permanent IP address&lt;/li&gt;
&lt;li&gt;data centers for scaling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;clients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;communicate with server&lt;/li&gt;
&lt;li&gt;may have dynamic IP addresses&lt;/li&gt;
&lt;li&gt;do not communicate directly with each other(client間互相不知道)&lt;br&gt;peer-to-peer (P2P) structure  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;no always-on server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;arbitrary end systems directly communicate&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;peers both request services and provide services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;self scalability(可擴展) – new peers bring new service capacity, as well as new service demands(愈多人加入，service功能相對應愈強)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;complex management&lt;/strong&gt;(not easy to implement)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Socket&#34;&gt;&lt;a href=&#34;#Socket&#34; class=&#34;headerlink&#34; title=&#34;Socket&#34;&gt;&lt;/a&gt;Socket&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;process sends/receives messages to/from its socket, by transport infrastructure&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/CN/socket.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Addressing processes&lt;br&gt;host device has unique 32-bit IP address&lt;br&gt;identifier (IP address and port numbers)&lt;br&gt;example port numbers:&lt;br&gt;HTTP server: 80&lt;br&gt;mail server: 25&lt;/p&gt;
&lt;h3 id=&#34;Application-layer-protocol&#34;&gt;&lt;a href=&#34;#Application-layer-protocol&#34; class=&#34;headerlink&#34; title=&#34;Application layer protocol&#34;&gt;&lt;/a&gt;Application layer protocol&lt;/h3&gt;&lt;p&gt;define: when and how processes transfer messages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;types of messages exchanged: e.g., request, response&lt;/li&gt;
&lt;li&gt;message syntax: fields(欄位) in messages&lt;/li&gt;
&lt;li&gt;message semantics: meaning of information in fields  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ex. HTTP, SMTP, Skype&lt;/p&gt;
&lt;p&gt;transport service  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data integrity(file transfer)&lt;/li&gt;
&lt;li&gt;timing&lt;/li&gt;
&lt;li&gt;throughput&lt;ul&gt;
&lt;li&gt;multimedia vs elastic(有彈性的) apps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;transport-protocols-services&#34;&gt;&lt;a href=&#34;#transport-protocols-services&#34; class=&#34;headerlink&#34; title=&#34;transport protocols services&#34;&gt;&lt;/a&gt;transport protocols services&lt;/h3&gt;&lt;p&gt;TCP(transport layer)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reliable transport&lt;/li&gt;
&lt;li&gt;flow control: sender won’t overwhelm receiver&lt;/li&gt;
&lt;li&gt;congestion control(擁塞控制, 網路處理過多封包):throttle sender when network overloaded&lt;/li&gt;
&lt;li&gt;connection-oriented(須先建立連接):setup required between client and server processes&lt;br&gt;does not provide:&lt;br&gt;timing, throughput, security , &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UDP(transport layer)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;does not provide all of the service,  &lt;/li&gt;
&lt;li&gt;far faster than TCP&lt;/li&gt;
&lt;li&gt;used in multimedia, internet telephone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SSL(app layer) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;encrypted TCP connection&lt;/li&gt;
&lt;li&gt;data integrity&lt;/li&gt;
&lt;li&gt;end-point authentication&lt;/li&gt;
&lt;li&gt;SSL socket API&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;HTTP&#34;&gt;&lt;a href=&#34;#HTTP&#34; class=&#34;headerlink&#34; title=&#34;HTTP&#34;&gt;&lt;/a&gt;HTTP&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;hypertext transfer protocol&lt;/li&gt;
&lt;li&gt;客戶端終端（用戶）和伺服器端（網站）請求和應答的標準,使用Web瀏覽器、網路爬蟲或者其它的工具  &lt;/li&gt;
&lt;li&gt;each object is addressable by a URL, include host name and path name  &lt;/li&gt;
&lt;li&gt;use TCP to send HTTP messages&lt;/li&gt;
&lt;li&gt;stateless: server maintain no information about client&lt;/li&gt;
&lt;li&gt;RTT(Round-trip delay time): time for a small packet to travel from client to server and back(來回時間)&lt;/li&gt;
&lt;li&gt;non-persistent HTTP: one TCP connection send at most one object, connection close right after server responsed&lt;ul&gt;
&lt;li&gt;one RTT build TCP connection + one RTT for HTTP request + file transmission time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;persistent HTTP: send multiple object at one TCP connection&lt;ul&gt;
&lt;li&gt;one RTT build TCP connection + one RTT for request x N files + file transmission time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP Request message format&lt;br&gt;&lt;img data-src=&#34;/img/CN/2-1.png&#34; alt=&#34;http message&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request line(method, URL, version..)&lt;ul&gt;
&lt;li&gt;method field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;: modify file in specified URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URL&lt;/code&gt;: use &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;: get file content in specified URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt;: replace file in specified URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;: get information about a resource&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;header lines(fields) &lt;/li&gt;
&lt;li&gt;body(context)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP Response message format&lt;br&gt;&lt;img data-src=&#34;/img/CN/2-2.png&#34; alt=&#34;reponse&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;status line&lt;ul&gt;
&lt;li&gt;protocol &lt;/li&gt;
&lt;li&gt;status code&lt;/li&gt;
&lt;li&gt;status phrase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;status code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200 OK&lt;/li&gt;
&lt;li&gt;301 Moved Permanently&lt;ul&gt;
&lt;li&gt;requested object moved, new location will send later in this msg (Location:)(重定向)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;400 Bad Request&lt;ul&gt;
&lt;li&gt;request msg not understood by server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;404 Not Found&lt;ul&gt;
&lt;li&gt;requested document not found&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;505 HTTP Version Not Supported&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;try connect HTTP&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;telnet [host name] 80
GET [path name] HTTP/1.1&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;User-server-state-cookies&#34;&gt;&lt;a href=&#34;#User-server-state-cookies&#34; class=&#34;headerlink&#34; title=&#34;User-server state: cookies&#34;&gt;&lt;/a&gt;User-server state: cookies&lt;/h4&gt;&lt;p&gt;help server keep states  &lt;/p&gt;
&lt;p&gt;Ex.&lt;br&gt;when initial HTTP requests arrives at site, site creates:&lt;br&gt;unique ID&lt;br&gt;entry in backend database for ID&lt;br&gt;cookie file kept on user’s host&lt;/p&gt;
&lt;p&gt;Help for interaction&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3poLndpa2lwZWRpYS5vcmcvd2lraS9Db29raWUjLkU3Ljk0LkE4LkU5LjgwLjk0&#34;&gt;cookie&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;cache-for-proxy-server&#34;&gt;&lt;a href=&#34;#cache-for-proxy-server&#34; class=&#34;headerlink&#34; title=&#34;cache for proxy server&#34;&gt;&lt;/a&gt;cache for proxy server&lt;/h4&gt;&lt;p&gt;for any request, check it is in cache or not,&lt;br&gt;if it is, return cache&lt;/p&gt;
&lt;p&gt;typically cache is installed by ISP (university, company, residential ISP)&lt;br&gt;reduce response time and traffic&lt;/p&gt;
&lt;p&gt;Conditional GET: if client has up-to-update object, no need to send again&lt;br&gt;client send request: if-modified-since:&lt;date&gt;&lt;/p&gt;
&lt;h3 id=&#34;FTP&#34;&gt;&lt;a href=&#34;#FTP&#34; class=&#34;headerlink&#34; title=&#34;FTP&#34;&gt;&lt;/a&gt;FTP&lt;/h3&gt;&lt;p&gt;file transfer protocol&lt;br&gt;using TCP&lt;br&gt;ftp: RFC 959&lt;br&gt;(1)control connection：(port 21)&lt;br&gt;(2)data connection：(port 20)&lt;br&gt;Out-of-band (頻帶外)Control  &lt;/p&gt;
&lt;p&gt;server receives file transfer command, server opens 2nd TCP data connection (for file) to client&lt;br&gt;after transferring one file, server closes data connection&lt;/p&gt;
&lt;p&gt;maintain state: current directory and earlier authentication&lt;/p&gt;
&lt;p&gt;FTP 命令(Command)與回應(Reply)&lt;/p&gt;
&lt;p&gt;(1).命令(command)：從Client端到Server端&lt;/p&gt;
&lt;p&gt;常見命令如下:&lt;/p&gt;
&lt;p&gt; USER username :把使用者代號傳給伺服器&lt;br&gt; PASS password :把使用者密碼傳給伺服器&lt;br&gt; LIST :要求server傳回目前遠端目錄下的檔案列表 此檔案列表會透過資料連線(新建立且non-persistent) 而非control connection連線來傳送&lt;br&gt; RETR filename : 用來擷取遠端主機目前目錄下的某個檔案 此命令會使遠端主機開一筆data connection傳送請求的檔案&lt;br&gt; STOR filename : 把某個檔案存到遠端主機目前目錄下&lt;br&gt;(2).回應(Reply)：從Server端到Client端&lt;/p&gt;
&lt;p&gt;常見回應如下:&lt;/p&gt;
&lt;p&gt;331 Username OK,password require&lt;br&gt;125 Data connection already open;transfer starting&lt;br&gt;425 Can’t open data connection&lt;br&gt;452 Error writing file&lt;br&gt;(3)&lt;br&gt;不管是Command或Reply都會送出7-bit ASCII值的control connection&lt;/p&gt;
&lt;h3 id=&#34;EMAIL&#34;&gt;&lt;a href=&#34;#EMAIL&#34; class=&#34;headerlink&#34; title=&#34;EMAIL&#34;&gt;&lt;/a&gt;EMAIL&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;SMTP(Simple Mail Transfer Protocol) &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;mail agent, mail box(in), message queue(out)&lt;/p&gt;
&lt;p&gt;The client SMTP will establish a TCP connection to port 25 at the server SMTP.&lt;br&gt;persistent connections&lt;/p&gt;
&lt;p&gt;three phases of transfer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;handshaking (greeting)&lt;/li&gt;
&lt;li&gt;transfer of messages&lt;/li&gt;
&lt;li&gt;closure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;commands:ASCII text&lt;br&gt;response:status code and phrase&lt;br&gt;messages must be in 7-bit ASCI&lt;/p&gt;
&lt;p&gt;SMTP是push protocol,即TCP連線是由想要送出檔案的主機所建立&lt;br&gt;HTTP是pull protocol,即TCP連線是由想要接收檔案的主機所建立&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;telnet URL 25
S: 220 hamburger.edu
C: HELO crepes.fr
S: 250 Hello crepes.fr, pleased to meet you
C: MAIL FROM: &amp;lt;alice@crepes.fr&amp;gt;
S: 250 alice@crepes.fr... Sender ok
C: RCPT TO: &amp;lt;bob@hamburger.edu&amp;gt;
S: 250 bob@hamburger.edu ... Recipient ok
C: DATA
S: 354 Enter mail, end with &amp;quot;.&amp;quot; on a line by itself
C: Do you like ketchup?
C: How about pickles?
C: .
S: 250 Message accepted for delivery
C: QUIT
S: 221 hamburger.edu closing connection&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;RFC 822: standard for text message format&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CN/2-3.png&#34; alt=&#34;header body&#34;&gt;&lt;br&gt;header lines, e.g.,&lt;br&gt;To:&lt;br&gt;From:&lt;br&gt;Subject:&lt;br&gt;Body: the “message”&lt;br&gt;ASCII characters only&lt;/p&gt;
&lt;p&gt;mail access protocol: get mail from user&lt;/p&gt;
&lt;p&gt;POP:Post Office Protocol [RFC 1939]&lt;br&gt;authorization + download&lt;br&gt;authorization phase + transaction phase&lt;br&gt;download and keep&lt;/p&gt;
&lt;p&gt;IMAP:Internet Mail Access Protocol [RFC 1730]:&lt;br&gt;  比POP更進一步,除了download郵件外還可以在server上管理目錄,可以做更多的動作,&lt;br&gt;  像郵件目錄的搬移等都得靠IMAP&lt;br&gt;keep all message at server&lt;br&gt;keep state&lt;/p&gt;
&lt;p&gt;HTTP:gmail, Hotmail, Yahoo! Mail, etc.&lt;/p&gt;
&lt;h3 id=&#34;DNS&#34;&gt;&lt;a href=&#34;#DNS&#34; class=&#34;headerlink&#34; title=&#34;DNS&#34;&gt;&lt;/a&gt;DNS&lt;/h3&gt;&lt;p&gt;DNS(domain name system)，透過 DNS，我們不需要知道主機的 IP ，只要知道該主機的名稱就能連線&lt;/p&gt;
&lt;p&gt;distributed hierarchical database 樹狀查詢&lt;br&gt;DNS 將主機名稱的管理分配在不同層級的 DNS 伺服器當中，有 IP 異動時也容易修改，而不用透過上層 ISP 的維護。&lt;/p&gt;
&lt;p&gt;IPv4 已經接近發送完畢的階段，因此已逐漸拓展到 128bits 的 IPv6 。可以透過主機名稱就解析到 IP 的 DNS 服務，此外，目前全世界的 WWW 主機名稱也都是透過 DNS 系統在處理 IP 的對應，所以，當 DNS 掛點時，我們將無法透過主機名稱來連線，那就幾乎相當於沒有 Internet 了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DNS (domain name system)服務:nslookup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CN/2-4.png&#34; alt=&#34;tree like&#34;&gt;&lt;br&gt;服務:把主機名稱轉成ip位置&lt;br&gt;Host aliasing(主機別名):一台主機可有多個別名(當然也有正規主機名稱canonical hostname 通常不好記)&lt;br&gt;dns可用別名查詢得到正規主機名稱及ip&lt;br&gt;Mail server aliasing&lt;br&gt;Load distribution:一個網站可能有多台伺服器 每個伺服器的ip和主機名稱不同 有要求傳送過來時 dns會一直改變回傳的伺服器的主機名稱及ip 這樣就不會有許多要求都由同一伺服器回應 可達到分配效果&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;DNS伺服器架構&lt;br&gt;root DNS servers: 13 (labeled A through M)&lt;br&gt;Top-level domain (TLD) servers: 負責Top-level domain 如com, org, net, edu 也負責國家級的Top-level domain如uk, fr, ca, jp&lt;br&gt;Authoritative DNS servers: organization’s own DNS server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Local DNSname server&lt;br&gt;not strictly belong to hierarchy&lt;br&gt;each ISP (residential ISP, company, university) has one&lt;br&gt;also called “default name server”&lt;br&gt;when host makes DNS query, query is sent to its local DNS server&lt;br&gt;has local cache of recent name-to-address translation pairs (but may be out of date!)&lt;br&gt;acts as proxy, forwards query into hierarchy&lt;/p&gt;
&lt;p&gt;iterated query:&lt;br&gt;“I don’t know this name, but ask this server”&lt;br&gt;&lt;img data-src=&#34;/img/CN/2-5.png&#34; alt=&#34;asking&#34;&gt;&lt;br&gt;recursive query&lt;br&gt;don’t temperaly return to local DNS server&lt;br&gt;&lt;img data-src=&#34;/img/CN/2-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;cache entries timeout (disappear) after some time (TTL)&lt;br&gt;TLD servers typically cached in local name servers&lt;br&gt;   thus root name servers not often visited&lt;br&gt;cached entries may be out-of-date&lt;/p&gt;
&lt;p&gt;record&lt;br&gt;resource records (RR) 格式: (name, value, type, TTL)&lt;/p&gt;
&lt;p&gt;TTL(time to live)&lt;br&gt;欄位中name和value由type決定&lt;br&gt;Type=A :&lt;br&gt;name 是正規主機名稱 , value 是正規主機名稱為name的IP address&lt;br&gt;ex:(relay1.bar.foo.com , 145.37.9.126 , A)&lt;/p&gt;
&lt;p&gt;Type=CNAME :&lt;br&gt;name 是主機別名 , value 是別名為name的正規主機名稱&lt;br&gt;ex:(foo.com , relay1.bar.foo.com ,CNAME)&lt;/p&gt;
&lt;p&gt;Type=NS :&lt;br&gt;name 是 domain(網域名稱), value 是 domain 為name的Authoritative(官方) DNS server 名稱,此Authoritative(官方) DNS server會去取得該網域內的主機ip位置&lt;br&gt;ex:(foo.com , dns.foo.com , NS)&lt;/p&gt;
&lt;p&gt;Type=MX : name 是主機別名 ,value 是主機別名為 name 的 mail server正規名稱&lt;br&gt;ex:(foo.com , mail.bar.foo.com , MX) &lt;/p&gt;
&lt;p&gt;DNS registrar(網域販賣商)&lt;/p&gt;
&lt;p&gt;queryand replymessages, both with same message format&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;DNS Vulnerabilities(弱點)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;DDoS:發出大量的DNS查詢(ex ICMP ping) 使封包多到塞滿link 讓大多數使用者發出的合法DNS查詢因ink塞滿得不到答案 服務無法被使用&lt;br&gt;Not useful in root server(cache in TLD), but useful at TLD&lt;/p&gt;
&lt;p&gt;DoS(Denial-of-Service) 為一種網路攻擊 讓網路 主機等 無法被合法使用者使用&lt;/p&gt;
&lt;p&gt;man-in-the-middle attack&lt;br&gt;DNS poisoning – send incorrect file to DNS server, which cache&lt;/p&gt;
&lt;h3 id=&#34;P2P&#34;&gt;&lt;a href=&#34;#P2P&#34; class=&#34;headerlink&#34; title=&#34;P2P&#34;&gt;&lt;/a&gt;P2P&lt;/h3&gt;&lt;p&gt;p2p &amp;gt; client server when there are a lot of user&lt;br&gt;&lt;img data-src=&#34;/img/CN/2-7.png&#34; alt=&#34;p2pgraph&#34;&gt;&lt;/p&gt;
&lt;p&gt;(1) Client-server archtecture&lt;/p&gt;
&lt;p&gt;設一個server要傳給n個client 檔案大小為f 上傳速度為us&lt;/p&gt;
&lt;p&gt;上傳給n個點每個點一份f 故上傳時間為 nf/us&lt;/p&gt;
&lt;p&gt;dmin 為n台電腦中下載速度最小的  故下載時間最多為f/dmin&lt;/p&gt;
&lt;p&gt;distribution time &amp;gt;= MAX{nf/us , f/dmin} 只要N夠大 則時間會隨著N的數量線性增加&lt;/p&gt;
&lt;p&gt;(2) P2P architecture&lt;/p&gt;
&lt;p&gt;設一個server要傳給n個client 檔案大小為f 上傳速度為us&lt;br&gt;只有伺服器有檔案 伺服器必須把檔案放入LINK中一次 最低上傳時間為 f/us&lt;/p&gt;
&lt;p&gt;同Client-server archtecture , dmin 為n台電腦中下載速度最小的  故下載時間最多為f/dmin&lt;/p&gt;
&lt;p&gt;整個系統上傳總容量為us(第一個點)+u1+u2+….+un  上傳給n個對等點  共上傳nf   時間為nf/(us(第一個點)+u1+u2+….+un )&lt;/p&gt;
&lt;p&gt;distribution time &amp;gt;= MAX{f/us , f/dmin , nf/(us+u1+u2+….+un)} &lt;/p&gt;
&lt;h4 id=&#34;Structure&#34;&gt;&lt;a href=&#34;#Structure&#34; class=&#34;headerlink&#34; title=&#34;Structure&#34;&gt;&lt;/a&gt;Structure&lt;/h4&gt;&lt;p&gt;file divided into 256Kb chunks&lt;br&gt;&lt;strong&gt;peers&lt;/strong&gt; in torrent send/receive file chunks&lt;/p&gt;
&lt;p&gt;tracker:tracks peers&lt;br&gt;participating in torrent&lt;/p&gt;
&lt;p&gt;torrent:group of peers exchanging chunks of a file&lt;/p&gt;
&lt;p&gt;peer joining torrent registers with tracker to get list of peers, connects to subset of peers (“neighbors”)&lt;/p&gt;
&lt;p&gt;churn(流失):peers may come and go&lt;/p&gt;
&lt;p&gt;requests missing chunks from peers, rarest first&lt;br&gt;sending chunks: tit-for-tat&lt;/p&gt;
&lt;p&gt;Alice sends top four peers which send to her.&lt;br&gt;other peers are choked by Alice every 30 seconds(receive only one chunk from her)&lt;br&gt;re-evaluate top 4 every10 secs&lt;/p&gt;
&lt;p&gt;想要獲得更快的下載速度，就應該先將檔案分享給別人。Optimistic Unchoking是說，每個人每30秒就挑網路中任意一個人，將檔案上傳給他。這麼作的用意是發掘網路上未知的潛力檔案提供者：假如A與K之前並未有檔案的往來，但其實這兩個人住得很近，網路互傳的速度比其他人快。今天A透過Optimistic Unchoking隨機給K上傳了一些檔案片段，讓K驚覺A的上傳速度很快，進而允許A從K處下載檔案片段。如果A與K之間的連線速度很慢，那麼過30秒之後，A會停止提供檔案給K，而去別處尋找下一個候選人&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21tZGF5cy5jb20vMjAwNy8wNC8wNi9idDEv&#34;&gt;http://mmdays.com/2007/04/06/bt1/&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Distributed Hash Table&lt;br&gt;(key, value)&lt;br&gt;key: movie title value: IP address&lt;/p&gt;
&lt;p&gt;put (key,value) pair in the peer that is closest(successor) to the key&lt;/p&gt;
&lt;p&gt;Circular DHT with shortcuts&lt;br&gt;possible to design shortcuts so O(log N) neighbors, O(log N) messages in query&lt;br&gt;建捷徑於與目前key差一個bit的數- &amp;gt; =&amp;gt; 一次至少可以縮短一半的距離&lt;br&gt;&lt;img data-src=&#34;/img/CN/2-8.png&#34; alt=&#34;circular DHT&#34;&gt;&lt;/p&gt;
&lt;p&gt;each peer knows address of its two successors&lt;br&gt;each peer periodically pings its two successors to check aliveness&lt;br&gt;if immediate successor leaves, choose next successor as new immediate successor&lt;/p&gt;
&lt;h2 id=&#34;Chap03-Transport-Layer&#34;&gt;&lt;a href=&#34;#Chap03-Transport-Layer&#34; class=&#34;headerlink&#34; title=&#34;Chap03 Transport Layer&#34;&gt;&lt;/a&gt;Chap03 Transport Layer&lt;/h2&gt;&lt;p&gt;transport layer: logical communication between processes&lt;br&gt;=&amp;gt; breaks app messages into segments, passes to network layer  &lt;/p&gt;
&lt;h3 id=&#34;UDP&#34;&gt;&lt;a href=&#34;#UDP&#34; class=&#34;headerlink&#34; title=&#34;UDP&#34;&gt;&lt;/a&gt;UDP&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;streaming multimedia apps (loss tolerant, rate sensitive)&lt;/li&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;SNMP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;small header size&lt;br&gt;no congestion control: UDP can blast away as fast as desired&lt;/p&gt;
&lt;p&gt;reliable transfer over UDP&lt;br&gt;add reliability at &lt;strong&gt;application layer&lt;/strong&gt; to get application-specific error recovery&lt;/p&gt;
&lt;p&gt;no connection establishment (which can add delay)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simple: no connection state at sender, receiver&lt;/li&gt;
&lt;li&gt;small header size&lt;/li&gt;
&lt;li&gt;no congestion control: UDP can blast away as fast as desired&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UDP segment format&lt;/p&gt;
&lt;p&gt;source port , dest port&lt;br&gt;length checksum&lt;br&gt;data&lt;/p&gt;
&lt;p&gt;use checksum to detect error&lt;br&gt;&lt;img data-src=&#34;/img/CN/3-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;Reliable-data-transfer&#34;&gt;&lt;a href=&#34;#Reliable-data-transfer&#34; class=&#34;headerlink&#34; title=&#34;Reliable data transfer&#34;&gt;&lt;/a&gt;Reliable data transfer&lt;/h3&gt;&lt;p&gt;top-10 important network topic&lt;br&gt;=&amp;gt; &lt;strong&gt;unreliable channel&lt;/strong&gt; with &lt;strong&gt;reliable data transfer(RDT) protocol&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;&#34; alt=&#34;using unreliable data transfer channel&#34;&gt;&lt;/p&gt;
&lt;p&gt;RDT 2.0: bit error -&amp;gt; use ctrl msgs&lt;br&gt;checksum to detect bit errors&lt;br&gt;acknowledgements (ACKs), negative acknowledgements (NAKs)&lt;/p&gt;
&lt;p&gt;RDT 2.1: ctrl msg error -&amp;gt; use seq number&lt;br&gt;seq number prevent duplicate data, resend when corrupt&lt;br&gt;two seq (0,1) is enough&lt;/p&gt;
&lt;p&gt;RDT 2.2: no NAK, resend when ACKs with the same seq num&lt;/p&gt;
&lt;p&gt;RDT 3.0: lose packet -&amp;gt; add wait time, resend when timeout&lt;br&gt;&lt;img data-src=&#34;&#34; alt=&#34;3.0 sender&#34;&gt;&lt;/p&gt;
&lt;p&gt;rdt3.0雖然確保了資料的可靠性，可是它採用Stop-and-Wait機制，效能很低&lt;br&gt;utilization of sender = 0.008(transmit time) / 30.008(transmit time+RTT) = 0.00027&lt;/p&gt;
&lt;h3 id=&#34;Pipelined-Protocol&#34;&gt;&lt;a href=&#34;#Pipelined-Protocol&#34; class=&#34;headerlink&#34; title=&#34;Pipelined Protocol&#34;&gt;&lt;/a&gt;Pipelined Protocol&lt;/h3&gt;&lt;p&gt;可以讓傳送端同時傳送多個封包不需等待確認。必須增加封包的暫存空間與序列號碼。&lt;br&gt;暫存的區域中存在著窗格大小(Window Size)，存放著各種封包(已確認、已送出但未收到ACK、未送出的封包等等)&lt;/p&gt;
&lt;h4 id=&#34;Go-Back-N-GBN&#34;&gt;&lt;a href=&#34;#Go-Back-N-GBN&#34; class=&#34;headerlink&#34; title=&#34;Go-Back-N(GBN)&#34;&gt;&lt;/a&gt;Go-Back-N(GBN)&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;&#34; alt=&#34;type&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;&#34; alt=&#34;gbn&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;&#34; alt=&#34;gbn sender&#34;&gt;&lt;br&gt;SENDER:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nothing when receive corrupt response&lt;/li&gt;
&lt;li&gt;move window when receive ACK response&lt;/li&gt;
&lt;li&gt;send all packets in window when oldest packet in window timeout &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;&#34; alt=&#34;gbn receiver&#34;&gt;&lt;br&gt;RECEIVER: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;永遠送出ACK，為目前收到的最高序號&lt;/li&gt;
&lt;li&gt;只收比目前收到的最高序號多一號的packet&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;Selective-Repeat-SR&#34;&gt;&lt;a href=&#34;#Selective-Repeat-SR&#34; class=&#34;headerlink&#34; title=&#34;Selective Repeat(SR)&#34;&gt;&lt;/a&gt;Selective Repeat(SR)&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;&#34; alt=&#34;SR&#34;&gt;&lt;br&gt;每個packet各自傳送，各自有timer  &lt;/p&gt;
&lt;p&gt;max seq# = window size * 2&lt;br&gt;假想有限序號0,1,2,3 窗格大小為3, 接收端收到0,1,2, 所以接收端的觀點應為：0,1,2,[3,0,1],2 當接收端回傳給傳送端的ACK遺失時, 將導致傳送端逾時而重送0,1,2 然而接收端想要的是第二批的0,1 而傳送端所傳送的封包卻是第一批的0,1。&lt;/p&gt;
&lt;h3 id=&#34;TCP&#34;&gt;&lt;a href=&#34;#TCP&#34; class=&#34;headerlink&#34; title=&#34;TCP&#34;&gt;&lt;/a&gt;TCP&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;reliable, in-order byte steam&lt;ul&gt;
&lt;li&gt;no “message boundaries”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pipelined&lt;/li&gt;
&lt;li&gt;congestion and flow control&lt;ul&gt;
&lt;li&gt;決定 window size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;full duplex data(雙方皆可傳)&lt;/li&gt;
&lt;li&gt;MSS(maximum segment size): 傳送的segment最大長度&lt;/li&gt;
&lt;li&gt;connection-oriented&lt;ul&gt;
&lt;li&gt;handshaking (exchange of control msgs) &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;&#34; alt=&#34;segment&#34;&gt;&lt;br&gt;sequence numbers(Seq): 送過去的packet的起始編號(0, 1)&lt;br&gt;acknowledge number(ACK): 預期對方會送來的編號&lt;br&gt;&lt;img data-src=&#34;&#34; alt=&#34;telnet &#34;&gt;&lt;br&gt;對A來講前一個收到B傳回來的資料Seq為78,下一個期待收到的為79,所以傳回ACK=79,而data為’C’這和ACK,Seq都沒關聯&lt;br&gt;A所傳的Seq是42,對B來講下一個應該要收到43,於是傳回ACK=43,而A在ACK=79中告訴B下一個應該送79過去,於是B傳Seq=79&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP傳送端  &lt;ul&gt;
&lt;li&gt;逾時重送封包  &lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;&#34; alt=&#34;cumulative ACK&#34;&gt;  &lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;&#34; alt=&#34;TCP sender&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP接收端&lt;ul&gt;
&lt;li&gt;預期封包抵達事件&lt;ul&gt;
&lt;li&gt;回傳期望下一次收到的封包之序號ACK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非預期封包抵達事件&lt;ul&gt;
&lt;li&gt;暫存封包, 送出期望收到的封包之序號ACK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Estimate-best-timeout-value&#34;&gt;&lt;a href=&#34;#Estimate-best-timeout-value&#34; class=&#34;headerlink&#34; title=&#34;Estimate best timeout value&#34;&gt;&lt;/a&gt;Estimate best timeout value&lt;/h4&gt;&lt;p&gt;SampleRTT: record the time of last transmission&lt;br&gt;exponential weighted average let value smoother&lt;br&gt;EstimatedRTT = (1- a) x EstimatedRTT + a x SampleRTT (typical a = 0.125)  &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;&#34; alt=&#34;devrtt&#34;&gt;&lt;br&gt;將變異數納入考慮: TimeoutInterval = EstimatedRTT + 4*DevRTT&lt;/p&gt;
&lt;p&gt;TCP fast retransmit: 收到三次相同ACK，傳送端就會立刻傳送接收端所預期的封包  &lt;/p&gt;
&lt;p&gt;Flow Control (流量控制): 讓reiceiver buffer不致overflow&lt;br&gt;記錄buffer剩餘的空間有多少(rcvWindow)&lt;br&gt;當rcvWindow=0時，傳送端會持續傳送一個1byte的區段給接收端以確認緩衝區可否繼續接收資料&lt;/p&gt;
&lt;h4 id=&#34;TCP-Connection-Management-連線管理&#34;&gt;&lt;a href=&#34;#TCP-Connection-Management-連線管理&#34; class=&#34;headerlink&#34; title=&#34;TCP Connection Management (連線管理)&#34;&gt;&lt;/a&gt;TCP Connection Management (連線管理)&lt;/h4&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy1zb3AuaW5yaWEuZnIvbWVtYmVycy9WaW5jZW56by5NYW5jdXNvL1JldGVJbnRlcm5ldC8wNl90Y3BfcGFydDIucGRm&#34;&gt;http://www-sop.inria.fr/members/Vincenzo.Mancuso/ReteInternet/06_tcp_part2.pdf&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;防止delay duplicate problem&lt;/p&gt;
&lt;p&gt;3-way handshake:(open connection)&lt;br&gt;一方傳SYN, 另一方回傳ACK/SYN, 一方回傳ACK。&lt;/p&gt;
&lt;p&gt;4-way handshake:(close connection)&lt;br&gt;一方傳FIN, 另一方回傳ACK。另一方傳FIN, 一方回傳ACK。(可以handle同時想結束的情形)&lt;/p&gt;
&lt;h4 id=&#34;congestion-control-擁塞控制&#34;&gt;&lt;a href=&#34;#congestion-control-擁塞控制&#34; class=&#34;headerlink&#34; title=&#34;congestion control(擁塞控制)&#34;&gt;&lt;/a&gt;congestion control(擁塞控制)&lt;/h4&gt;&lt;p&gt;保持在網路上的封包數量，不讓整體效能下降(buffer overflow, queueing in router)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;End-to-End (implicit)&lt;ul&gt;
&lt;li&gt;依據往返延遲時間來降低視窗大小  &lt;/li&gt;
&lt;li&gt;TCP採用此種方式     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network-assisted (explicit) &lt;ul&gt;
&lt;li&gt;Router會依據網路壅塞情況，提供傳送端明確的網路壅塞狀態且回報  &lt;/li&gt;
&lt;li&gt;回饋傳送給傳送端 或 在封包中的某個欄位記錄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cwnd(send window size)  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AIMD (Additive-Increase, Multiplicative-Decrease): cwnd一次增加一定(+1)值，loss時成比例減少(/2)&lt;/li&gt;
&lt;li&gt;Slow Start: cwnd呈次方成長(*2)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;TCP-Sender-Congestion-Control&#34;&gt;&lt;a href=&#34;#TCP-Sender-Congestion-Control&#34; class=&#34;headerlink&#34; title=&#34;TCP Sender Congestion Control&#34;&gt;&lt;/a&gt;TCP Sender Congestion Control&lt;/h4&gt;&lt;p&gt;grows by slowstart to &lt;strong&gt;threshold&lt;/strong&gt;, then grows linearly  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;loss by timeout &lt;ul&gt;
&lt;li&gt;cwnd = 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;loss by 3 duplicate ACKs: &lt;ul&gt;
&lt;li&gt;TCP Tahoe - cwnd = 1&lt;/li&gt;
&lt;li&gt;TCP RENO - cwnd /= 2, threshold = cwnd   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Average throughout = (1 + 0.5)/2 = 0.75W/RTT&lt;/p&gt;
&lt;h4 id=&#34;TCP-Fairness&#34;&gt;&lt;a href=&#34;#TCP-Fairness&#34; class=&#34;headerlink&#34; title=&#34;TCP Fairness&#34;&gt;&lt;/a&gt;TCP Fairness&lt;/h4&gt;&lt;p&gt;有相同需求的兩端會在bandwidth share附近震盪兩邊互相影響下是公平的&lt;/p&gt;
&lt;p&gt;但是UDP在的話就不太公平了,如多媒體。現在像youtube會在UDP上加上一些TCP friendly&lt;/p&gt;
&lt;p&gt;開多個TCP connection: 速度加快…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP creates rdt service on top of IP’s unreliable service&lt;ul&gt;
&lt;li&gt;pipelined segments&lt;/li&gt;
&lt;li&gt;cumulative acks&lt;/li&gt;
&lt;li&gt;single retransmission timer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;retransmissions triggered by&lt;ul&gt;
&lt;li&gt;timeout events&lt;/li&gt;
&lt;li&gt;duplicate acks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Reference&#34;&gt;&lt;a href=&#34;#Reference&#34; class=&#34;headerlink&#34; title=&#34;Reference&#34;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;CFChou講義&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
