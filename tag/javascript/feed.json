{
    "version": "https://jsonfeed.org/version/1",
    "title": "QWERTY • All posts by \"javascript\" tag",
    "description": "Programming | Computer Science | Thought",
    "home_page_url": "http://gitqwerty777.github.io",
    "items": [
        {
            "id": "http://gitqwerty777.github.io/how-to-make-slides/",
            "url": "http://gitqwerty777.github.io/how-to-make-slides/",
            "title": "簡報製作軟體比較",
            "date_published": "2022-03-22T03:45:23.000Z",
            "content_html": "<h2 id=\"分類\"><a href=\"#分類\" class=\"headerlink\" title=\"分類\"></a>分類</h2><ol>\n<li>編輯軟體</li>\n<li>Latex</li>\n<li>Markdown</li>\n<li>Javascript</li>\n<li>其他</li>\n</ol>\n<h2 id=\"編輯軟體\"><a href=\"#編輯軟體\" class=\"headerlink\" title=\"編輯軟體\"></a>編輯軟體</h2><ul>\n<li>優點<ul>\n<li>編輯方便</li>\n<li>功能齊全</li>\n<li>模版多</li>\n</ul>\n</li>\n<li>缺點<ul>\n<li>手動排版</li>\n<li>需要使用特定軟體才能編輯</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"軟體\"><a href=\"#軟體\" class=\"headerlink\" title=\"軟體\"></a>軟體</h3><ul>\n<li>PowerPoint</li>\n<li>Google Slides</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmV6aS5jb20veGNpdDR6YmF0NnN3L3N3ZWV0LXJlY2lwZS10by1zb2x2aW5nLXByb2JsZW1zLw==\">Prezi<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"Latex\"><a href=\"#Latex\" class=\"headerlink\" title=\"Latex\"></a>Latex</h2><ul>\n<li>優點<ul>\n<li>自訂性高</li>\n<li>寫公式、程式碼方便</li>\n</ul>\n</li>\n<li>缺點<ul>\n<li>指令過於複雜</li>\n<li>需要設定開發環境</li>\n</ul>\n</li>\n<li>模版<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3ZlcmxlYWYuY29tL2xlYXJuL2xhdGV4L0JlYW1lcg==\">Beamer<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hzdWFudGllbi9iZWFtZXJUYWl3YW4=\">BeamerTaiwan<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><ul>\n<li>優點<ul>\n<li>原始文字易於保存</li>\n<li>語法較Latex簡單</li>\n</ul>\n</li>\n<li>缺點<ul>\n<li>自訂性比Latex差</li>\n<li>難製作動畫</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"軟體-1\"><a href=\"#軟體-1\" class=\"headerlink\" title=\"軟體\"></a>軟體</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcnAtdGVhbS9tYXJwaXQ=\">Marp<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>可以寫html tag</li>\n<li>簡易的css支援</li>\n<li>動畫功能較少</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL3BtJUU3JTlBJTg0JUU3JTk0JTlGJUU3JTk0JUEyJUU1JThBJTlCJUU1JUI3JUE1JUU1JTg1JUI3JUU3JUFFJUIxLyVFNSVBNiU4MiVFNCVCRCU5NSVFNSVCRiVBQiVFOSU4MCU5RiVFNSVBRSU4QyVFNiU4OCU5MCVFNyVCMCVBMSVFNSVBMCVCMSVFNiU4RSU5MiVFNyU4OSU4OC0lRTUlQjAlODclRTclQjIlQkUlRTclQTUlOUUlRTUlQjAlODglRTYlQjMlQTglRTUlOUMlQTglRTYlQkElOTYlRTUlODIlOTklRTYlQkMlOTQlRTglQUMlOUIlRTQlQjglOEEtZWFiOGEwNjY4NzMz\">教學<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><ul>\n<li>用js擴充功能</li>\n<li>用css排版</li>\n</ul>\n<h3 id=\"軟體-2\"><a href=\"#軟體-2\" class=\"headerlink\" title=\"軟體\"></a>軟體</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXZlYWxqcy5jb20v\">Reveal.js<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>支援Markdown語法</li>\n<li><a href=\"/revealjs-markdown\">教學:Reveal.js配合Markdown</a></li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbGkuZGV2Lw==\">Slidev<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>支援Markdown語法</li>\n<li>支援類Vue語法</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbXByZXNzLmpzLm9yZy8=\">Impress.js<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>類似Prezi</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS9kZWNrLmpzLw==\">Deck.js<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2tpcmthcy5jaC9hc2NlbnNvci8j\">Ascensor<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xhbmRzbGlkZS5hZGFtemFwLmNvbS8jc2xpZGUx\">LandSlide<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>用遊戲引擎做簡報</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1VuaXR5VGVjaG5vbG9naWVzL1ByZXNlbnRhdGlvbg==\">Unity<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>可以將動畫和特效做到非常好，只是過於麻煩</li>\n</ul>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><ul>\n<li>使用純文字(即Markdown)儲存簡報，較沒有相容性的問題，版本控制也容易<ul>\n<li>但排版較困難</li>\n</ul>\n</li>\n<li>css是目前排版的最好方法</li>\n<li>所以最好的方法為Markdown+html</li>\n<li>推薦使用<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcnAtdGVhbS9tYXJwaXQ=\">Marp<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXZlYWxqcy5jb20v\">Reveal.js<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbGkuZGV2Lw==\">Slidev<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Markdown",
                "簡報",
                "軟體",
                "PowerPoint",
                "Latex",
                "JavaScript",
                "CSS",
                "Unity"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/vuejs/",
            "url": "http://gitqwerty777.github.io/vuejs/",
            "title": "vuejs 語法",
            "date_published": "2020-09-06T06:50:12.000Z",
            "content_html": "<blockquote>\n<p>因為mustache語法(雙大括號)會被判斷成render命令，改成全形符號</p>\n</blockquote>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>採用簡潔的模板語法來宣告式地將資料渲染進 DOM 的系統</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html part --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  ｛｛ message ｝｝</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js part</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello Vue.js!'</span></span><br><span class=\"line\">    todo: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 html tag 中 加入<code>v-</code>開頭的attributes以實作邏輯</p>\n<a id=\"more\"></a>\n\n<h2 id=\"元件化應用構建\"><a href=\"#元件化應用構建\" class=\"headerlink\" title=\"元件化應用構建\"></a>元件化應用構建</h2><p><code>v-bind</code>: todo-item 元件接受一個”prop”，類似於一個自定義 attribute。這個 prop 名為 todo。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;ol&gt;</span><br><span class=\"line\">    &lt;todo-item</span><br><span class=\"line\">      v-<span class=\"keyword\">for</span>=<span class=\"string\">\"item in groceryList\"</span></span><br><span class=\"line\">      v-bind:todo=<span class=\"string\">\"item\"</span></span><br><span class=\"line\">      v-bind:key=<span class=\"string\">\"item.id\"</span></span><br><span class=\"line\">    &gt;&lt;<span class=\"regexp\">/todo-item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>ol&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Vue.component('todo-item', &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['todo'],</span></span><br><span class=\"line\"><span class=\"regexp\">  template: '&lt;li&gt;｛｛ todo.text ｝｝&lt;/</span>li&gt;<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">var app = new Vue(&#123;</span></span><br><span class=\"line\">  el: '#app',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    groceryList: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">text</span>: <span class=\"string\">'蔬菜'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'乳酪'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'隨便其它什麼人吃的東西'</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Instance\"><a href=\"#Instance\" class=\"headerlink\" title=\"Instance\"></a>Instance</h2><p>用 Vue 函式建立一個新的 Vue 例項<br>當一個 Vue 例項被建立時，它將 data 物件中的所有的 property 加入到 Vue 的響應式系統中<br>只有當例項被建立時就已經存在於 data 中的 property 才是響應式的<br>唯一的例外是使用<code>Object.freeze()</code>，這會阻止修改現有的 property，也意味著響應系統無法再追蹤變化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我們的資料物件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 該物件被加入到一個 Vue 例項中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 獲得這個例項上的 property</span></span><br><span class=\"line\"><span class=\"comment\">// 返回源資料中對應的欄位</span></span><br><span class=\"line\">vm.a == data.a <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 設定 property 也會影響到原始資料</span></span><br><span class=\"line\">vm.a = <span class=\"number\">2</span></span><br><span class=\"line\">data.a <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ……反之亦然</span></span><br><span class=\"line\">data.a = <span class=\"number\">3</span></span><br><span class=\"line\">vm.a <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">vm.$data === data <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">vm.$el === <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// $watch 是一個例項方法</span></span><br><span class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue, oldValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這個回撥將在 `vm.a` 改變後呼叫</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命週期鉤子\"><a href=\"#生命週期鉤子\" class=\"headerlink\" title=\"生命週期鉤子\"></a>生命週期鉤子</h2><p><code>created</code>、<code>mounted</code>、<code>updated</code> 和 <code>destroyed</code></p>\n<p><strong>不要在選項 property 或 callback 使用箭頭函式</strong>。因為箭頭函式並沒有 this，this 會作為變數一直向上級詞法作用域查詢，直至找到為止，經常導致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之類的錯誤。</p>\n<h2 id=\"資料繫結\"><a href=\"#資料繫結\" class=\"headerlink\" title=\"資料繫結\"></a>資料繫結</h2><p>資料繫結最常見的形式就是使用“Mustache”語法 (雙大括號) 的文字插值：<br>雙大括號會將資料解釋為普通文字，而非 HTML 程式碼</p>\n<p><code>&lt;span&gt;Message: ｛｛ msg ｝｝&lt;/span&gt;</code></p>\n<p>可使用表示式<br><code>｛｛ ok ? &#39;YES&#39; : &#39;NO&#39; ｝｝</code></p>\n<p>透過使用 <code>v-once</code> 指令，你也能執行一次性地插值，當資料改變時，插值處的內容不會更新。但請留心這會影響到該節點上的其它資料繫結：</p>\n<p><code>&lt;span v-once&gt;這個將不會改變: ｛｛ msg ｝｝&lt;/span&gt;</code></p>\n<p>為了輸出真正的 HTML，你需要使用 <code>v-html</code> 指令<br><code>&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;</code><br><strong>動態渲染 HTML 可能會非常危險，因為它很容易導致 XSS 攻擊。請只對可信內容使用 HTML 插值，絕不要對使用者提供的內容使用插值。</strong></p>\n<p>Mustache 語法不能作用在 HTML attribute 上，應該使用 <code>v-bind</code> 指令：<br><code>&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</code><br><code>&lt;div v-bind:id=&quot;&#39;list-&#39; + id&quot;&gt;&lt;/div&gt;</code></p>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>指令 (Directives) 是帶有 <code>v-</code> 字首的特殊 attribute。<br>指令 attribute 的值預期是單個 JavaScript 表示式 (<code>v-for</code> 是例外)。<br>指令的職責是，當表示式的值改變時，將其產生的連帶影響，響應式地作用於 DOM。</p>\n<p>一些指令能夠接收一個“引數”，在指令名稱之後以冒號表示。例如，<code>v-bind</code> 指令可以用於響應式地更新 HTML attribute<br><code>&lt;a v-bind:href&gt;</code></p>\n<p>從 2.6.0 開始，可以用方括號括起來的 JavaScript 表示式作為一個指令的引數：<br><code>&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;</code></p>\n<p>動態引數預期會求出一個字串，異常情況下值為 null。這個特殊的 null 值可以用於移除繫結。任何其它非字串型別的值都將會觸發一個警告。</p>\n<h3 id=\"修飾符\"><a href=\"#修飾符\" class=\"headerlink\" title=\"修飾符\"></a>修飾符</h3><p>修飾符 (modifier) 是以 <code>.</code> 指明的特殊字尾，用於指出一個指令應該以特殊方式繫結。例如<code>.prevent</code> 修飾符告訴 <code>v-on</code> 指令對於觸發的事件呼叫 <code>event.preventDefault()</code></p>\n<p><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;</code></p>\n<p>Vue 為 <code>v-bind</code> 和 <code>v-on</code> 這兩個最常用的指令，提供了特定簡寫：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整語法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 縮寫 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整語法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 縮寫 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"計算屬性-computed\"><a href=\"#計算屬性-computed\" class=\"headerlink\" title=\"計算屬性(computed)\"></a>計算屬性(computed)</h3><p>對於任何複雜邏輯，你都應當使用計算屬性<br>計算屬性只在相關響應式依賴發生改變時它們才會重新求值，這是比使用function好的地方</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 計算屬性的 getter</span></span><br><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 例項</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)<span class=\"comment\">//olleH</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>下面的計算屬性將不再更新，因為 Date.now() 不是響應式依賴：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>計算屬性預設只有 getter，不過在需要時你也可以提供一個 setter：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  fullName: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// better than set two variables seperately</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function (newValue) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><p>監視某個資料，當其發生改變，這個函式就會執行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"watch-example\"</span>&gt;</span><br><span class=\"line\">  &lt;p&gt;</span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    &lt;input v-model=<span class=\"string\">\"question\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;｛｛ answer ｝｝&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!-- 因為 AJAX 庫和通用工具的生態已經相當豐富，Vue 核心程式碼沒有重複 --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!-- 提供這些功能以保持精簡。這也可以讓你自由選擇自己更熟悉的工具。 --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"https:/</span><span class=\"regexp\">/cdn.jsdelivr.net/</span>npm/axios@<span class=\"number\">0.12</span><span class=\"number\">.0</span>/dist/axios.min.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script src=\"</span>https:<span class=\"comment\">//cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#watch-example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    question: <span class=\"string\">''</span>,</span><br><span class=\"line\">    answer: <span class=\"string\">'I cannot give you an answer until you ask a question!'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 `question` 發生改變，這個函式就會執行</span></span><br><span class=\"line\">    question: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Waiting for you to stop typing...'</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.debouncedGetAnswer()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// `_.debounce` 是一個透過 Lodash 限制操作頻率的函式。</span></span><br><span class=\"line\">    <span class=\"comment\">// 在這個例子中，我們希望限制訪問 yesno.wtf/api 的頻率</span></span><br><span class=\"line\">    <span class=\"comment\">// AJAX 請求直到使用者輸入完畢才會發出。想要瞭解更多關於</span></span><br><span class=\"line\">    <span class=\"comment\">// `_.debounce` 函式 (及其近親 `_.throttle`) 的知識，</span></span><br><span class=\"line\">    <span class=\"comment\">// 請參考：https://lodash.com/docs#debounce</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"keyword\">this</span>.getAnswer, <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getAnswer: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.question.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Questions usually contain a question mark. ;-)'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Thinking...'</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">      axios.get(<span class=\"string\">'https://yesno.wtf/api'</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">          vm.answer = _.capitalize(response.data.answer)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">          vm.answer = <span class=\"string\">'Error! Could not reach the API. '</span> + error</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Class-與-Style-繫結\"><a href=\"#Class-與-Style-繫結\" class=\"headerlink\" title=\"Class 與 Style 繫結\"></a>Class 與 Style 繫結</h2><p><code>&lt;div v-bind:class=&quot;{ active: isActive }&quot;&gt;&lt;/div&gt;</code><br>上面的語法表示 active 這個 class 存在與否將取決於資料 property isActive 的 truthiness。</p>\n<p>我們也可以在這裡繫結一個返回物件的計算屬性。這是一個常用且強大的模式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"classObject\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">data: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  isActive: true,</span></span><br><span class=\"line\"><span class=\"regexp\">  error: null</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  classObject: function () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      active: this.isActive &amp;&amp; !this.error,</span></span><br><span class=\"line\"><span class=\"regexp\">      'text-danger': this.error &amp;&amp; this.error.type === 'fatal'</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>陣列語法中也可以使用物件語法：<br><code>&lt;div v-bind:class=&quot;[{ active: isActive }, errorClass]&quot;&gt;&lt;/div&gt;</code></p>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'A'\"</span>&gt;</span></span><br><span class=\"line\">  A</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'B'\"</span>&gt;</span></span><br><span class=\"line\">  B</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'C'\"</span>&gt;</span></span><br><span class=\"line\">  C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  Not A/B/C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在html用<code>template</code>作為隱形元素，不渲染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"ok\"</span>&gt;</span><br><span class=\"line\">  &lt;h1&gt;Title&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;Paragraph 1&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;Paragraph <span class=\"number\">2</span>&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Vue 會儘可能高效地渲染元素，通常會復用已有元素而不是從頭開始渲染。這麼做除了使 Vue 變得非常快之外，還有其它一些好處。例如，如果你允許使用者在不同的登入方式之間切換：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Username&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your username\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\">&lt;template v-<span class=\"keyword\">else</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Email&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your email address\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>那麼在上面的程式碼中切換 loginType 將不會清除使用者已經輸入的內容。因為兩個模板使用了相同的元素，<code>&lt;input&gt;</code> 不會被替換掉——僅僅是替換了它的 placeholder。</p>\n<p>帶有 <code>v-show</code> 的元素始終會被渲染並保留在 DOM 中。<code>v-show</code> 只是簡單地切換元素的 CSS property display。<br>注意，<code>v-show</code> 不支援 <code>&lt;template&gt;</code> 元素，也不支援 <code>v-else</code>。</p>\n<p><code>v-if</code> 是“真正”的條件渲染，因為它會確保在切換過程中條件塊內的事件監聽器和子元件適當地被銷毀和重建。</p>\n<p><code>v-if</code> 也是惰性的：如果在初始渲染時條件為假，則什麼也不做——直到條件第一次變為真時，才會開始渲染條件塊。</p>\n<p>相比之下，<code>v-show</code> 就簡單得多——不管初始條件是什麼，元素總是會被渲染，並且只是簡單地基於 CSS 進行切換。</p>\n<blockquote>\n<p>一般來說，v-if 有更高的切換開銷，而 v-show 有更高的初始渲染開銷。因此，如果需要非常頻繁地切換，則使用 v-show 較好；如果在執行時條件很少改變，則使用 v-if 較好。</p>\n</blockquote>\n<p><strong>不推薦同時使用 v-if 和 v-for</strong>。請查閱風格指南以獲取更多資訊。</p>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><p><code>v-for</code> 還支援一個可選的第二個引數，即當前項的索引。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"example-2\"</span>&gt;</span><br><span class=\"line\">  &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span><br><span class=\"line\">    ｛｛ parentMessage ｝｝ - ｛｛ index ｝｝ - ｛｛ item.message ｝｝</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以用 <code>of</code> 替代 <code>in</code> 作為分隔符，因為它更接近 JavaScript 迭代器的語法：</p>\n<p><code>&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</code></p>\n<p>可以用 <code>v-for</code> 來遍歷一個物件的 property。<br>也可以提供第二個的引數為 property 名稱 (也就是key)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"v-for-object\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"demo\"</span>&gt;</span><br><span class=\"line\">  &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"value in object\"</span>&gt;</span><br><span class=\"line\">    ｛｛ value ｝｝</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 在遍歷物件時，會按 <span class=\"built_in\">Object</span>.keys() 的結果遍歷，但是不能保證它的結果在不同的 JavaScript 引擎下都一致。 --&gt;</span><br><span class=\"line\">&lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(value, name) in object\"</span>&gt;</span><br><span class=\"line\">  ｛｛ name ｝｝: ｛｛ value ｝｝</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>v-for</code> 渲染的元素列表時，它預設使用“就地更新”的策略。如果資料項的順序被改變，Vue 將不會移動 DOM 元素來匹配資料項的順序，而是就地更新每個元素，並且確保它們在每個索引位置正確渲染</p>\n<p>這個預設的模式是高效的，但是隻適用於不依賴子元件狀態或臨時 DOM 狀態 (例如：表單輸入值) 的列表渲染輸出。</p>\n<p>為了給 Vue 一個提示，以便它能跟蹤每個節點的身份，從而重用和重新排序現有元素，<strong>你需要為每項提供一個唯一的 key attribute</strong></p>\n<h3 id=\"自動檢測變化的限制\"><a href=\"#自動檢測變化的限制\" class=\"headerlink\" title=\"自動檢測變化的限制\"></a>自動檢測變化的限制</h3><p><strong>由於 JavaScript 的限制，Vue 不能檢測陣列(array)和物件(object)的變化</strong></p>\n<p>Vue 將被偵聽的陣列的變更方法進行了包裹，所以它們也將會觸發檢視更新。這些被包裹過的方法包括：</p>\n<ul>\n<li><code>push()</code></li>\n<li><code>pop()</code></li>\n<li><code>shift()</code></li>\n<li><code>unshift()</code></li>\n<li><code>splice()</code></li>\n<li><code>sort()</code></li>\n<li><code>reverse()</code></li>\n</ul>\n<p>相比之下，也有非變更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它們不會變更原始陣列，而總是返回一個新陣列</p>\n<h3 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h3><p>注意這裡的 <code>is=&quot;todo-item&quot;</code> attribute。這種做法在使用 DOM 模板時是十分必要的，因為在 <code>&lt;ul&gt;</code> 元素內只有 <code>&lt;li&gt;</code> 元素會被看作有效內容。這樣做實現的效果與 <code>&lt;todo-item&gt;</code> 相同，但是可以避開一些潛在的瀏覽器解析錯誤。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo-list-example\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"addNewTodo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"new-todo\"</span>&gt;</span>Add a todo<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-model</span>=<span class=\"string\">\"newTodoText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">\"new-todo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">placeholder</span>=<span class=\"string\">\"E.g. Feed the cat\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">is</span>=<span class=\"string\">\"todo-item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"(todo, index) in todos\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"todo.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"todo.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-on:remove</span>=<span class=\"string\">\"todos.splice(index, 1)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v-on-dom-event\"><a href=\"#v-on-dom-event\" class=\"headerlink\" title=\"v-on: dom event\"></a>v-on: dom event</h3><p>用特殊變數 <code>$event</code>訪問原始的 DOM 事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span><br><span class=\"line\">  Submit</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ ...</span></span><br><span class=\"line\"><span class=\"regexp\">methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  warn: function (message, event) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 現在我們可以訪問原生事件物件</span></span><br><span class=\"line\"><span class=\"regexp\">    if (event) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      event.preventDefault()</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    alert(message)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Vue.js 為 <code>v-on</code> 提供了事件修飾符。之前提過，修飾符是由點開頭的指令字尾來表示的。</p>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n<li><code>.passive</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止單擊事件繼續傳播 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再過載頁面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修飾符可以串聯 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只有修飾符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 新增事件監聽器時使用事件捕獲模式 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即內部元素觸發的事件先在此處理，然後才交由內部元素進行處理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只當在 event.target 是當前元素自身時觸發處理函式 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即事件不是從內部元素觸發的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-on-input\"><a href=\"#v-on-input\" class=\"headerlink\" title=\"v-on: input\"></a>v-on: input</h2><p>Vue 允許為 <code>v-on</code> 在監聽鍵盤事件時新增按鍵修飾符：<br>你可以直接將 KeyboardEvent.key 暴露的任意有效按鍵名轉換為 kebab-case 來作為修飾符。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 只有在 `key` 是 `Enter` 時呼叫 `vm.submit()` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.page-down</span>=<span class=\"string\">\"onPageDown\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即使 Alt 或 Shift 被一同按下時也會觸發 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.ctrl</span>=<span class=\"string\">\"onClick\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 有且只有 Ctrl 被按下的時候才觸發 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.ctrl.exact</span>=<span class=\"string\">\"onCtrlClick\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>滑鼠按鈕修飾符</p>\n<ul>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n<li><code>.middle</code></li>\n</ul>\n<h2 id=\"v-model-Input\"><a href=\"#v-model-Input\" class=\"headerlink\" title=\"v-model: Input\"></a>v-model: Input</h2><blockquote>\n<p>這是 Vue 完全贏過 React 的部分</p>\n</blockquote>\n<p>你可以用 <code>v-model</code> 指令在表單 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上建立雙向資料繫結。它會根據控制元件型別自動選取正確的方法來更新元素。儘管有些神奇，但 <code>v-model</code> 本質上不過是語法糖。它負責監聽使用者的輸入事件以更新資料，並對一些極端場景進行一些特殊處理。</p>\n<p><code>v-model</code> 只看binding data的值，會忽略所有表單元素的 value、checked、selected attribute 的初始值</p>\n<p><code>v-model</code> 在內部為不同的輸入元素使用不同的 property 並丟擲不同的事件：</p>\n<ul>\n<li>text 和 textarea 元素使用 value property 和 input 事件；</li>\n<li>checkbox 和 radio 使用 checked property 和 change 事件；</li>\n<li>select 欄位將 value 作為 prop 並將 change 作為事件。<!-- (? need example) -->\n\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchText\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">等價於：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"searchText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"searchText = $event.target.value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- checkbox example --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Checked names: ｛｛ checkedNames ｝｝<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '...',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checkedNames: []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- select example --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>請選擇<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: ｛｛ selected ｝｝<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '...',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    selected: ''</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>v-model</code> 表示式的初始值未能匹配任何選項，<code>&lt;select&gt;</code> 元素將被渲染為“未選中”狀態。在 iOS 中，這會使使用者無法選擇第一個選項。因為這樣的情況下，iOS 不會觸發 <code>change</code> 事件。因此，更推薦像上面這樣提供一個值為空的禁用選項。</p>\n<h3 id=\"input-繫結-variable\"><a href=\"#input-繫結-variable\" class=\"headerlink\" title=\"input 繫結 variable\"></a>input 繫結 variable</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">true-value</span>=<span class=\"string\">\"yes\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">false-value</span>=<span class=\"string\">\"no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">// 當選中時</span><br><span class=\"line\">vm.toggle === 'yes'</span><br><span class=\"line\">// 當沒有選中時</span><br><span class=\"line\">vm.toggle === 'no'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"pick\"</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"a\"</span>&gt;</span></span><br><span class=\"line\">// 當選中時</span><br><span class=\"line\">vm.pick === vm.a</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- v-model as object --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 內聯物件字面量 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"&#123; number: 123 &#125;\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 當選中時</span><br><span class=\"line\">typeof vm.selected // =&gt; 'object'</span><br><span class=\"line\">vm.selected.number // =&gt; 123</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v-model-修飾符\"><a href=\"#v-model-修飾符\" class=\"headerlink\" title=\"v-model: 修飾符\"></a>v-model: 修飾符</h3><p><code>.lazy</code><br>在預設情況下，v-model 在每次 input 事件觸發後將輸入框的值與資料進行同步 (除了上述輸入法組合文字時)。</p>\n<p>新增 lazy 修飾符，等到滑鼠移到輸入框外，觸發 change 事件才更新。</p>\n<p><code>.number</code><br>自動將使用者的輸入值轉為數值型別</p>\n<p><code>&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</code><br>這通常很有用，因為即使在 type=”number” 時，HTML 輸入元素的值也總會返回字串。如果這個值無法被 parseFloat() 解析，則會返回原始的值。</p>\n<p><code>.trim</code><br>如果要自動過濾使用者輸入的首尾空白字元，可以給 v-model 新增 trim 修飾符：</p>\n<h2 id=\"元件-Components\"><a href=\"#元件-Components\" class=\"headerlink\" title=\"元件 Components\"></a>元件 Components</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定義一個名為 button-counter 的新元件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;button v-on:click=\"count++\"&gt;You clicked me ｛｛ count ｝｝ times.&lt;/button&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>元件是可復用的 Vue 例項，且帶有一個名字：在這個例子中是 <code>&lt;button-counter&gt;</code>。我們可以在一個透過 new Vue 建立的 Vue 根例項中，把這個元件作為自定義元素來使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"components-demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因為元件是可復用的 Vue 例項，所以它們與 new Vue 接收相同的選項，例如 data、computed、watch、methods 以及生命週期鉤子等。<strong>僅有的例外是像 el 這樣根例項特有的選項</strong>。</p>\n<p>為了能在模板中使用，這些元件必須先註冊以便 Vue 能夠識別。這裡有兩種元件的註冊型別：全域性註冊和區域性註冊。至此，我們的元件都只是透過 Vue.component 全域性註冊的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component-name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... options ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>全域性註冊的元件可以用在其被註冊之後的任何 (透過 new Vue) 新建立的 Vue 根例項，也包括其元件樹中的所有子元件的模板中。</p>\n<p>而區域性註冊的好處是當你使用的是webpack這樣的構建系統時，如果是用全域性註冊的這種方法註冊的元件，那麼當你不使用某一個元件的時候，它仍然會存在最終的構建結果之中，這就增加的無謂的js下載。</p>\n<h3 id=\"data-是一個函式\"><a href=\"#data-是一個函式\" class=\"headerlink\" title=\"data 是一個函式\"></a>data 是一個函式</h3><p>data 是一個函式，因此每個例項可以維護一份被返回物件的獨立的複製：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>每個元件必須只有一個根元素。你可以將模板的內容包裹在一個父元素內，來修復這個問題，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blog-post\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>｛｛ title ｝｝<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>當元件變得越來越複雜的時候，為每個相關的資訊定義一個 prop 會變得很麻煩：<br>所以是時候重構一下這個 <code>&lt;blog-post&gt;</code> 元件了，讓它變成接受一個單獨的 post prop：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"post in posts\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:content</span>=<span class=\"string\">\"post.content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:publishedAt</span>=<span class=\"string\">\"post.publishedAt\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:comments</span>=<span class=\"string\">\"post.comments\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"post in posts\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:post</span>=<span class=\"string\">\"post\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\">Vue.component('blog-post', &#123;</span><br><span class=\"line\">  props: ['post'],</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blog-post\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>｛｛ post.title ｝｝<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"post.content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- other props --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    `</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>父級元件可以像處理 native DOM 事件一樣透過 <code>v-on</code> 監聽子元件例項的任意事件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">\"postFontSize += 0.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\">同時子元件可以透過呼叫內建的 `$emit` 方法並傳入事件名稱來觸發一個事件：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"$emit('enlarge-text')\"</span>&gt;</span></span><br><span class=\"line\">  Enlarge text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用事件傳遞一個值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"$emit('enlarge-text', 0.1)\"</span>&gt;</span></span><br><span class=\"line\">  Enlarge text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 透過 $event 訪問到被拋出的這個值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">\"postFontSize += $event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>emit input的值使 custom-input 可以更新<code>v-model</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;custom-input v-model=<span class=\"string\">\"searchText\"</span>&gt;&lt;<span class=\"regexp\">/custom-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Vue.component('custom-input', &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['value'],</span></span><br><span class=\"line\"><span class=\"regexp\">  template: `</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;input</span></span><br><span class=\"line\"><span class=\"regexp\">      v-bind:value=\"value\"</span></span><br><span class=\"line\"><span class=\"regexp\">      v-on:input=\"$emit('input', $event.target.value)\"</span></span><br><span class=\"line\"><span class=\"regexp\">    &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  `</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;layout&gt;</span><br><span class=\"line\">    &lt;p slot=<span class=\"string\">\"header\"</span>&gt;這裡可能是一個頁面標題&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;主要內容的一個段落。&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p&gt;另一個主要段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p slot=\"footer\"&gt;這裡有一些聯繫信息&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/layout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'layout'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"container\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;header&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"header\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/header&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;main&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/main&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"footer\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;`</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"動態切換component\"><a href=\"#動態切換component\" class=\"headerlink\" title=\"動態切換component\"></a>動態切換component</h3><p>有的時候，在不同元件之間進行動態切換是非常有用的，比如在一個多標籤的介面裡：</p>\n<p>上述內容可以透過 Vue 的 <code>&lt;component&gt;</code> 元素加一個特殊的 is attribute 來實現：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 元件會在 `currentTabComponent` 改變時改變 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentTabComponent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，currentTabComponent 可以包括已註冊元件的名字，或一個元件的選項物件</p>\n<h3 id=\"解析-DOM-模板時的注意事項\"><a href=\"#解析-DOM-模板時的注意事項\" class=\"headerlink\" title=\"解析 DOM 模板時的注意事項\"></a>解析 DOM 模板時的注意事項</h3><p>有些 HTML 元素，諸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，對於哪些元素可以出現在其內部是有嚴格限制的。而有些元素，諸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出現在其它某些特定的元素內部。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- wrong --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">blog-post-row</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post-row</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- correct --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"blog-post-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是如果我們從以下來源使用模板的話，這條限制是不存在的：</p>\n<ul>\n<li>字串 (例如：template: ‘…’)</li>\n<li>單檔案元件 (.vue)</li>\n<li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li>\n</ul>\n<h3 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL3Byb3RvdHlwaW5nLmh0bWw=\">使用vue cli<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>說回App.vue這個檔案，這是一個檢視（或者說元件和頁面），想像一下我們的index.html中什麼也沒有，只有一個檢視，這個檢視相當於一個容器，然後我們往這個容器中放各種各樣的積木（其他元件或者其他頁面）</p>\n<p>將<code>App.vue</code>放到<code>#app</code>中，然後以<code>&lt;App/&gt;</code>來指代我們的<code>#app</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span><span class=\"comment\">/*引入App這個元件*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span><span class=\"comment\">/*引入路由配置*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,<span class=\"comment\">/*最後效果將會替換頁面中id為app的div元素*/</span></span><br><span class=\"line\">  router,<span class=\"comment\">/*使用路由*/</span></span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span>,<span class=\"comment\">/*告知頁面這個元件用這樣的標籤來包裹著,並且使用它*/</span></span><br><span class=\"line\">  components: &#123; App &#125;<span class=\"comment\">/*告知當前頁面想使用App這個元件*/</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUv\">https://cn.vuejs.org/v2/guide/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZXRlcmhwY2hlbi5naXRodWIuaW8v\">https://peterhpchen.github.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeXRoaWx5YS5naXRodWIuaW8vMjAxNy8xMC8xMS92dWUtY29tcG9uZW50LXNsb3Qv\">https://cythilya.github.io/2017/10/11/vue-component-slot/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "vuejs",
                "javascript"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/reactjs/",
            "url": "http://gitqwerty777.github.io/reactjs/",
            "title": "reactjs 語法",
            "date_published": "2020-07-29T06:50:12.000Z",
            "content_html": "<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>這個語法叫做 JSX，是一個 JavaScript 的語法擴充，會產生 <strong>React element</strong></p>\n<a id=\"more\"></a>\n<p>Babel 將 JSX 編譯為呼叫 React.createElement() 的程式。</p>\n<p>React DOM 預設會在 render 之前 escape 所有嵌入在 JSX 中的變數。這保證你永遠不會不小心注入任何不是直接寫在你的應用程式中的東西。所有變數都會在 render 之前轉為字串，這可以避免 XSS（跨網站指令碼）攻擊。</p>\n<p>大括號內代表變數，可以放入任何javascript expression</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Josh Perez'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多行：包在小括號中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h2&gt;Good to see you here.&lt;/</span>h2&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Render\"><a href=\"#Render\" class=\"headerlink\" title=\"Render\"></a>Render</h2><p>使用 React 建立應用程式時，通常會有一個單一的 root DOM node。</p>\n<p>Render 一個 React element 到 root DOM node</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">ReactDOM.render(element, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n\n<p>React element 是 immutable 的，即不能更改</p>\n<p>Element 就像是電影中的一個幀：它代表特定時間點的 UI。</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"Component\"></a>Component</h2><p>Component 就像是 JavaScript 的 function，它接收參數（稱之為「props」，屬性）並且回傳描述畫面的 React element。</p>\n<p>Component 的字首須為大寫字母。React 會將小寫字母開頭的組件視為原始 DOM 標籤，舉例來說，<code>&lt;div /&gt;</code> 就會被視為是 HTML 的 div 標籤，但是 <code>&lt;Welcome /&gt;</code> 則是一個 component</p>\n<p>props 是唯讀的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此 function 是一個符合規範的 React component，因為它接受一個 props 物件並回傳一個 React element。</p>\n<p>我們稱之為 function component</p>\n<p>也可以使用 ES6 Class 來定義 component：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在JSX中使用component</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Welcome</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Sara\"</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>通常來說，每個 React 應用程式都有一個最高層級的 App component。然而，如果你將 React 結合至現存的應用程式中，你可能需要使用像 Button 這樣的小型 component，並由下往上，逐步應用到畫面的最高層級。</p>\n<p>在較大的應用程式中，建構可複用的 component 是非常值得的</p>\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>state 類似於 prop，但它是私有且由 component 完全控制的。</p>\n<p>需使用 class component，不能在 function component 使用</p>\n<p>在每次發生更新時，render 方法都會被呼叫</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;It is &#123;this.props.date.toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>加入state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>每當 Clock render 到 DOM 的時候，在 React 中稱為「mount」。</p>\n<p>每當產生的 Clock DOM 被移除時，在 React 中稱為「unmount」。</p>\n<p>在class內加入 <code>componentDidMount()</code>, <code>componentWillUnmount()</code>, 和 <code>setState()</code>，用 state 實作每秒更新的部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.timerID = setInterval(</span><br><span class=\"line\">      () =&gt; <span class=\"keyword\">this</span>.tick(),</span><br><span class=\"line\">      <span class=\"number\">1000</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.timerID);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  因為 props 和 state 可能是非同步的被更新，你不應該依賴它們的值來計算新的 state。</p>\n<p>  要修正這個問題，使用第二種形式的 setState()，它接受一個 function 而不是一個 object。Function 將接收先前的 state 作為第一個參數，並且將更新的 props 作為第二個參數：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">state, props</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  counter: state.counter + props.increment</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>React是「上至下」或「單向」的資料流：任何 state 總是由某個特地的 component 所擁有，任何從 state 得到的資料或 UI，state 只能影響自身和 child component。</p>\n<h2 id=\"事件處理\"><a href=\"#事件處理\" class=\"headerlink\" title=\"事件處理\"></a>事件處理</h2><p>事件的名稱在 React 中都是 camelCase，而在 HTML DOM 中則是小寫。</p>\n<ul>\n<li>HTML DOM 對照 React<ul>\n<li><code>onclick</code> → <code>onClick</code></li>\n<li><code>onclick=&quot;click()&quot;</code> → <code>onClick={click}</code></li>\n</ul>\n</li>\n</ul>\n<p>在 React 中，你不能夠在像在 HTML DOM 中使用 <code>return false</code> 來避免瀏覽器預設行為。你必須明確地呼叫 <code>preventDefault</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">\"#\"</span> onclick=<span class=\"string\">\"console.log('The link was clicked.'); return false\"</span>&gt;</span><br><span class=\"line\">  Click me</span><br><span class=\"line\">&lt;<span class=\"regexp\">/a&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 React 中，你則可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ActionLink</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The link was clicked.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">      Click me</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 JavaScript 中，class 的方法在預設上是沒有被綁定（bound）的。如果你忘了綁定 this.handleClick 並把它傳遞給 onClick 的話，this 的值將會在該 function 被呼叫時變成 undefined。</p>\n<p>總之，當你使用一個方法，卻沒有在後面加上 () 之時（例如當你使用 onClick={this.handleClick} 時），你應該要綁定這個方法。</p>\n<p>The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Toggle</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">isToggleOn</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 為了讓 `this` 能在 callback 中被使用，這裡的綁定是必要的：</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleClick = <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      isToggleOn: !state.isToggleOn</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        &#123;<span class=\"keyword\">this</span>.state.isToggleOn ? <span class=\"string\">'ON'</span> : <span class=\"string\">'OFF'</span>&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Toggle /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>如果呼叫 bind 對你來說很麻煩的話，你可以用別的方式。如果你使用了還在測試中的 class fields 語法的話，你可以用 class field 正確的綁定 callback：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這個語法確保 `this` 是在 handleClick 中被綁定：</span></span><br><span class=\"line\">  <span class=\"comment\">// 警告：這是一個還在*測試中*的語法：</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>傳遞一個額外的參數給 event handler。例如，如果 id 是每一行的 ID 的話，下面兩種語法都可行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;(e) =&gt; <span class=\"keyword\">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>以上這兩行程式是相同的。一個使用 arrow functions，另一個則使用了 Function.prototype.bind。</p>\n<p>以這兩個例子來說，e 這個參數所代表的 React 事件將會被當作 ID 之後的第二個參數被傳遞下去。在使用 arrow function 時，我們必須明確地將它傳遞下去，但若使用 bind 語法，未來任何的參數都將會自動被傳遞下去。</p>\n<h2 id=\"條件render\"><a href=\"#條件render\" class=\"headerlink\" title=\"條件render\"></a>條件render</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> isLoggedIn = <span class=\"keyword\">this</span>.state.isLoggedIn;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> button;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (isLoggedIn) &#123;</span><br><span class=\"line\">     button = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LogoutButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     button = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> (</span><br><span class=\"line\">     &lt;div&gt;</span><br><span class=\"line\">       &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class=\"line\">       &#123;button&#125;</span><br><span class=\"line\">     &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">   );</span></span><br><span class=\"line\"><span class=\"regexp\"> &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>用 <code>&amp;&amp;</code> 來條件顯示<br>因為在 JavaScript 中，<code>true &amp;&amp; expression</code> 總是回傳 <code>expression</code> ，而 <code>false &amp;&amp; expression</code> 總是回傳 <code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mailbox</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> unreadMessages = props.unreadMessages;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123;unreadMessages.length &gt; 0 &amp;&amp;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          You have &#123;unreadMessages.length&#125; unread messages.</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>h2&gt;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>React 在遇到 <code>null</code> 或 <code>false</code> 時都會忽略(不顯示)</p>\n<p>或用條件運算式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;isLoggedIn</span><br><span class=\"line\">    ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LogoutButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\">    : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表與key\"><a href=\"#列表與key\" class=\"headerlink\" title=\"列表與key\"></a>列表與key</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li&gt;&#123;number&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>你會收到一個關於你應該提供 key 給每一個列表項目的警告。key 是當你在建立一個 element 列表時必須使用的特殊的 string attribute。</p>\n<p>key 幫助 React 分辨哪些項目被改變、增加或刪除。在 array 裡面的每個 element 都應該要有一個 key，如此才能給予每個 element 一個固定的身份：</p>\n<p>通常，你會使用資料的 ID 作為 key：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class=\"line\">    &#123;number&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const todoItems = todos.map((todo) =&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li key=&#123;todo.id&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;todo.text&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>li&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>當你 render 的項目沒有固定的 ID 且你也沒有更好的辦法時，你可以使用項目的索引做為 key：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.map(<span class=\"function\">(<span class=\"params\">todo, index</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// 請在項目沒有固定的 ID 時才這樣做</span></span><br><span class=\"line\">  &lt;li key=&#123;index&#125;&gt;</span><br><span class=\"line\">    &#123;todo.text&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>React 預設將會使用索引作為 key。但並不建議你使用索引作為 key，尤其如果項目的順序會改變的話。這會對效能產生不好的影響，也可能會讓 component state 產生問題</p>\n<ul>\n<li>key 必須在 Sibling 中是唯一的</li>\n<li>key 的功能是提示 React，但它們不會被傳遞到 component 的 prop。</li>\n</ul>\n<p>應該把 key 放在 array 產生 item 的 render，而不是把它放在 item 的 render。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListItem</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = props.value;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 錯！你不需要在這裡指出 key：</span></span><br><span class=\"line\">    &lt;li key=&#123;value.toString()&#125;&gt;</span><br><span class=\"line\">      &#123;value&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function NumberList(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const numbers = props.numbers;</span></span><br><span class=\"line\"><span class=\"regexp\">  const listItems = numbers.map((number) =&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 錯！你應該要在這裡指出 key：</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ListItem value=&#123;number&#125; /</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;listItems&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一個好的經驗法則是，在 map() 呼叫中的每個 element 都會需要 key。</p>\n<h2 id=\"Form\"><a href=\"#Form\" class=\"headerlink\" title=\"Form\"></a>Form</h2><p>把這個表單寫成一個 controlled component： 用 state 來 顯示 value，onChange 時更新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'A name was submitted: '</span> + <span class=\"keyword\">this</span>.state.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Name:</span><br><span class=\"line\">          &lt;input type=<span class=\"string\">\"text\"</span> value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"Submit\" /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>這意味著你必須寫更多的 code，但現在你同時可以將 value 傳遞給其他的 UI element，或是從其他 event handler 重置。</p>\n<h3 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h3><p>在 React 中並不是用 selected attribute，而是在 select 的標籤上用一個 value attribute</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlavorForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">'coconut'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Your favorite flavor is: '</span> + <span class=\"keyword\">this</span>.state.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Pick your favorite flavor:</span><br><span class=\"line\">          &lt;select value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;&gt;</span><br><span class=\"line\">            &lt;option value=<span class=\"string\">\"grapefruit\"</span>&gt;Grapefruit&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;option value=\"lime\"&gt;Lime&lt;/</span>option&gt;</span><br><span class=\"line\">            &lt;option value=<span class=\"string\">\"coconut\"</span>&gt;Coconut&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;option value=\"mango\"&gt;Mango&lt;/</span>option&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/select&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>label&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"Submit\"</span> /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以將一個 array 傳給 value 這個 attribute，這使得你可以在一個 select 中選取多個選項：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;select multiple=&#123;<span class=\"literal\">true</span>&#125; value=&#123;[<span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"input-file\"><a href=\"#input-file\" class=\"headerlink\" title=\"input file\"></a>input file</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"file\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>由於它的值是唯讀，它在 React 中是一個 uncontrolled component。在稍後的文件中有其他關於它和其他 uncontrolled component 的討論。</p>\n<h3 id=\"多個input\"><a href=\"#多個input\" class=\"headerlink\" title=\"多個input\"></a>多個input</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reservation</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      isGoing: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      numberOfGuests: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleInputChange = <span class=\"keyword\">this</span>.handleInputChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleInputChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = event.target;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = target.name === <span class=\"string\">'isGoing'</span> ? target.checked : target.value;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = target.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      [name]: value</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Is going:</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            name=<span class=\"string\">\"isGoing\"</span></span><br><span class=\"line\">            type=<span class=\"string\">\"checkbox\"</span></span><br><span class=\"line\">            checked=&#123;<span class=\"keyword\">this</span>.state.isGoing&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;br /</span>&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          <span class=\"built_in\">Number</span> <span class=\"keyword\">of</span> guests:</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            name=<span class=\"string\">\"numberOfGuests\"</span></span><br><span class=\"line\">            type=<span class=\"string\">\"number\"</span></span><br><span class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.state.numberOfGuests&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>form&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一個 controlled component 上指明 value prop 可避免使用者改變輸入，除非你希望使用者這樣做。如果你已經指明了 value 但輸入仍然是可以被修改的，你很可能是不小心將 value 的值設定為 undefined 或 null。</p>\n<p>下面的程式碼就是一個範例。（輸入原先是被鎖住的，但在短暫的延遲後，變得可以被修改了。）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hi\"</span> /&gt;</span></span>, mountNode);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;null&#125;</span> /&gt;</span></span>, mountNode);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"uncontrolled-component\"><a href=\"#uncontrolled-component\" class=\"headerlink\" title=\"uncontrolled component\"></a>uncontrolled component</h3><p>在大多數的情況下，我們推薦使用 controlled component 來實作表單。在控制元件裡，表單的資料是被 React component 所處理。另一個選擇是 uncontrolled component，表單的資料是由 DOM 本身所處理的。</p>\n<p>使用 ref 來從 DOM 取得表單的資料，而不是為了每個 state 的更新寫 event handler。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.input = React.createRef();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'A name was submitted: '</span> + <span class=\"keyword\">this</span>.input.current.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Name:</span><br><span class=\"line\">          &lt;input type=<span class=\"string\">\"text\"</span> ref=&#123;<span class=\"keyword\">this</span>.input&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"Submit\" /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你想找出一個完整的、包含驗證、可追蹤拜訪欄位並能處理提交表單等功能的解決方案，Formik 是一個很熱門的選擇。然而，它是在與 controlled component 和維持 state 相同的原則上所建立的，所以別忘了學習它。</p>\n<h2 id=\"提升-State\"><a href=\"#提升-State\" class=\"headerlink\" title=\"提升 State\"></a>提升 State</h2><p>在 React 中，將 state 搬移到需要它的 component 的共同最近的祖先來共享 state。這被稱為「提升 state」。</p>\n<p>我們將從 TemperatureInput 移除 local state 並且搬移它到 Calculator。</p>\n<p>我們移除了它的 local state，並且不讀取 this.state.temperature，我們現在讀取 this.props.temperature。當我們想要改變時不呼叫 this.setState()，我們現在呼叫 this.props.onTemperatureChange()，它是由 Calculator 提供的</p>\n<p>calculator 傳入 prop.onChange 方法，供child的值改變時呼叫onChange()，以改變calculator(parent)的值</p>\n<p>通常來說，state 會優先被加入到需要 render 的 component。接著，如果其他的 component 也需要的話，你可以提升 state 到共同最靠近的 ancestor。</p>\n<p><strong>你應該依賴上至下的資料流，而不是嘗試在不同 component 之間同步 state。</strong></p>\n<p>當你在 UI 上看到一些錯誤時，你可以使用 React Developer Tools 來檢查 prop 並往 tree 的上方尋找，直到找到負責更新 state 的 component。這讓你可以追蹤到錯誤的來源</p>\n<h2 id=\"合成-vs-繼承\"><a href=\"#合成-vs-繼承\" class=\"headerlink\" title=\"合成 vs 繼承\"></a>合成 vs 繼承</h2><p>有些 component 不會提早知道它們的 children 有些什麼。對於像是 Sidebar 或 Dialog</p>\n<p>我們建議這些 component 使用特殊的 <code>children</code> prop 將 children element 直接傳入到它們的輸出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FancyBorder</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=&#123;<span class=\"string\">'FancyBorder FancyBorder-'</span> + props.color&#125;&gt;</span><br><span class=\"line\">      &#123;props.children&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/任何在 &lt;FancyBorder&gt; JSX tag 內的內容都被作為 children prop 被傳遞給 FancyBorder component。</span></span><br><span class=\"line\"><span class=\"regexp\">function WelcomeDialog() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;FancyBorder color=\"blue\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h1 className=\"Dialog-title\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        Welcome</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>h1&gt;</span><br><span class=\"line\">      &lt;p className=<span class=\"string\">\"Dialog-message\"</span>&gt;</span><br><span class=\"line\">        Thank you <span class=\"keyword\">for</span> visiting our spacecraft!</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>FancyBorder&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可用來排版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SplitPane</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"SplitPane\"</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"SplitPane-left\"</span>&gt;</span><br><span class=\"line\">        &#123;props.left&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"SplitPane-right\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;props.right&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function App() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;SplitPane</span></span><br><span class=\"line\"><span class=\"regexp\">      left=&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Contacts /</span>&gt;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      right=&#123;</span><br><span class=\"line\">        &lt;Chat /&gt;</span><br><span class=\"line\">      &#125; /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Facebook 中，我們使用 React 在成千上萬個 component，我們找不到任何使用案例來推薦你建立繼承結構的 component。</p>\n<h2 id=\"用-React-思考\"><a href=\"#用-React-思考\" class=\"headerlink\" title=\"用 React 思考\"></a>用 React 思考</h2><h3 id=\"第一步：將-UI-拆解成-component-層級\"><a href=\"#第一步：將-UI-拆解成-component-層級\" class=\"headerlink\" title=\"第一步：將 UI 拆解成 component 層級\"></a>第一步：將 UI 拆解成 component 層級</h3><p>首先，你要做的是將視覺稿中每一個 component （及 subcomponent）都圈起來，並幫它們命名。</p>\n<p>其中一個技巧是單一職責原則，它的意思是：在我們的理想中，一個 component應該只負責做一件事情。如果這個 component 最後變大了，你就需要再將它分成數個更小的 subcomponent 。</p>\n<p>由於你常常會展示 JSON 的資料模型給使用者，你會發現，如果你的模式是正確地被建立的話，你的 UI（以及你的 component 結構）會很好的相互對應。這是因為 UI 和資料模型通常是遵守同樣的資訊架構，這意味著將你的 UI 拆成 component 通常是相當容易的。</p>\n<h3 id=\"第二步：在-React-中建立一個靜態版本\"><a href=\"#第二步：在-React-中建立一個靜態版本\" class=\"headerlink\" title=\"第二步：在 React 中建立一個靜態版本\"></a>第二步：在 React 中建立一個靜態版本</h3><p>在你有了 component 層級後，就可以開始實作你的應用程式了。最簡單的方式是為你的應用程式建立一個接收資料模型、render UI 且沒有互動性的版本。建立一個靜態版本需要打很多字，但不需要想很多，而加上互動性則相反，需要做很多的思考，很少的打字，所以最好的方式是把這幾個過程都分開來。接下來，我們會知道為什麼是如此。</p>\n<p>請完全不要使用 state 來建立這個靜態版本。State 是保留給互動性的，也就是會隨時間改變的資料。既然我們目前要做的是這應用程式的靜態版本，你就不需要 state。</p>\n<p>你可以從最上層開始，或從最下層開始。也就是說，你可以先從層級較高的 component 開始做起，或者你也可以從比它低層級的開始。在比較簡單的例子中，通常從上往下是比較簡單的。但在較為大型的專案中，從下往上、邊寫邊測試則比較容易。</p>\n<p>React 的 單向資料流（也可稱為單向綁定）確保所有 component 都是模塊化且快速的。</p>\n<h3 id=\"第三步：找出最少（但完整）的-UI-State-的代表\"><a href=\"#第三步：找出最少（但完整）的-UI-State-的代表\" class=\"headerlink\" title=\"第三步：找出最少（但完整）的 UI State 的代表\"></a>第三步：找出最少（但完整）的 UI State 的代表</h3><p>請找出你的應用程式所需的最少的呈現方式，並在你遇到其他東西時再計算它們。例如，如果你在建立一個待辦清單，使用一個可以用來代表待辦事項的 array。不要另外用一個獨立的 state 變數來追蹤數量。當你要 render 代辦事項的數量時，讀取待辦事項 array 的長度即可。</p>\n<p>對於每一個資料，問你自己這三個問題：</p>\n<ol>\n<li>這個資料是從 parent 透過 props 傳下來的嗎？如果是的話，那它很可能不是 state。</li>\n<li>這個資料是否一直保持不變呢？如果是的話，那它很可能不是 state。</li>\n<li>你是否可以根據你的 component 中其他的 state 或 prop 來計算這個資料呢？如果是的話，那它一定不是 state。</li>\n</ol>\n<h3 id=\"第四步：找出你的-State-應該在哪裡\"><a href=\"#第四步：找出你的-State-應該在哪裡\" class=\"headerlink\" title=\"第四步：找出你的 State 應該在哪裡\"></a>第四步：找出你的 State 應該在哪裡</h3><p>我們需要找出哪幾個 component 會 mutate，或者擁有，這個 state。</p>\n<p>請記得，React 的核心精神是單向資料流，從 component 的層級從高往下流。<strong>也許哪個 component 該擁有 state 在一開始並不是很明顯</strong>。對新手來說，這往往是最難理解的概念，所以請跟著以下的步驟來思考：</p>\n<p>在你的應用程式中的每個 state：</p>\n<ul>\n<li>指出每個根據 state 來 render 某些東西的 component。</li>\n<li>找出一個共同擁有者 component（在層級中單一一個需要 state 的、在所有的 component 之上的 component）。</li>\n<li>應該擁有 state 的會是共同擁有者 component 或另一個更高層級的 component。(找最高級的component來持有state)</li>\n<li>如果你找不出一個應該擁有 state 的 component 的話，那就建立一個新的 component 來保持 state，並把它加到層級中共同擁有者 component 之上的某處。</li>\n</ul>\n<h3 id=\"第五步：加入相反的資料流\"><a href=\"#第五步：加入相反的資料流\" class=\"headerlink\" title=\"第五步：加入相反的資料流\"></a>第五步：加入相反的資料流</h3><p>現在是時候支援另一種資料流的方向了：在層級深處的表格 component 需要更新 FilterableProductTable 的 state。</p>\n<p>讓我們思考一下我們想要做些什麼。我們想確保當使用者改變這個表格時，我們會更新 state 以反映使用者的輸入。既然 component 只應該更新它自己本身的 state， FilterableProductTable 將會把 callback 傳給 SearchBar，而它們則會在 state 該被更新的時候被觸發。我們可以在輸入上使用 onChange 這個 event 來 接收通知。被 FilterableProductTable 傳下來的 callback 則會呼叫 setState()，之後應用程式就會被更新。</p>\n<h2 id=\"推薦的-Toolchain\"><a href=\"#推薦的-Toolchain\" class=\"headerlink\" title=\"推薦的 Toolchain\"></a>推薦的 Toolchain</h2><p>React 團隊主要推薦以下的方案：</p>\n<ul>\n<li>如果你正在學習 React 或建立全新的 single-page 應用程式，請使用 Create React App。</li>\n<li>如果你正在建立一個使用 Node.js 的 server-rendered 網頁，請使用 Next.js。</li>\n<li>如果你正在建立一個靜態內容的網頁，請使用 Gatsby。</li>\n<li>如果你正在建立一個 component 函式庫或與現存程式碼倉庫進行接軌，請使用更靈活的 Toolchain。</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaGVsbG8td29ybGQuaHRtbA==\">React: 語法教學<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL3R1dG9yaWFsL3R1dG9yaWFsLmh0bWw=\">React: 動手做教學<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>[React: css])(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2ZhcS1zdHlsaW5nLmh0bWw=\">https://reactjs.org/docs/faq-styling.html<i class=\"fa fa-external-link-alt\"></i></span>)</li>\n</ul>\n",
            "tags": [
                "reactjs",
                "javascript"
            ]
        }
    ]
}