{
    "version": "https://jsonfeed.org/version/1",
    "title": "QWERTY • All posts by \"reactjs\" tag",
    "description": "Programming | Computer Science | Thought",
    "home_page_url": "http://gitqwerty777.github.io",
    "items": [
        {
            "id": "http://gitqwerty777.github.io/reactjs/",
            "url": "http://gitqwerty777.github.io/reactjs/",
            "title": "reactjs 語法",
            "date_published": "2020-07-29T06:50:12.000Z",
            "content_html": "<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>這個語法叫做 JSX，是一個 JavaScript 的語法擴充，會產生 <strong>React element</strong></p>\n<a id=\"more\"></a>\n<p>Babel 將 JSX 編譯為呼叫 React.createElement() 的程式。</p>\n<p>React DOM 預設會在 render 之前 escape 所有嵌入在 JSX 中的變數。這保證你永遠不會不小心注入任何不是直接寫在你的應用程式中的東西。所有變數都會在 render 之前轉為字串，這可以避免 XSS（跨網站指令碼）攻擊。</p>\n<p>大括號內代表變數，可以放入任何javascript expression</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Josh Perez'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多行：包在小括號中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h2&gt;Good to see you here.&lt;/</span>h2&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Render\"><a href=\"#Render\" class=\"headerlink\" title=\"Render\"></a>Render</h2><p>使用 React 建立應用程式時，通常會有一個單一的 root DOM node。</p>\n<p>Render 一個 React element 到 root DOM node</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">ReactDOM.render(element, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n\n<p>React element 是 immutable 的，即不能更改</p>\n<p>Element 就像是電影中的一個幀：它代表特定時間點的 UI。</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"Component\"></a>Component</h2><p>Component 就像是 JavaScript 的 function，它接收參數（稱之為「props」，屬性）並且回傳描述畫面的 React element。</p>\n<p>Component 的字首須為大寫字母。React 會將小寫字母開頭的組件視為原始 DOM 標籤，舉例來說，<code>&lt;div /&gt;</code> 就會被視為是 HTML 的 div 標籤，但是 <code>&lt;Welcome /&gt;</code> 則是一個 component</p>\n<p>props 是唯讀的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此 function 是一個符合規範的 React component，因為它接受一個 props 物件並回傳一個 React element。</p>\n<p>我們稱之為 function component</p>\n<p>也可以使用 ES6 Class 來定義 component：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在JSX中使用component</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Welcome</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Sara\"</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>通常來說，每個 React 應用程式都有一個最高層級的 App component。然而，如果你將 React 結合至現存的應用程式中，你可能需要使用像 Button 這樣的小型 component，並由下往上，逐步應用到畫面的最高層級。</p>\n<p>在較大的應用程式中，建構可複用的 component 是非常值得的</p>\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>state 類似於 prop，但它是私有且由 component 完全控制的。</p>\n<p>需使用 class component，不能在 function component 使用</p>\n<p>在每次發生更新時，render 方法都會被呼叫</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;It is &#123;this.props.date.toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>加入state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>每當 Clock render 到 DOM 的時候，在 React 中稱為「mount」。</p>\n<p>每當產生的 Clock DOM 被移除時，在 React 中稱為「unmount」。</p>\n<p>在class內加入 <code>componentDidMount()</code>, <code>componentWillUnmount()</code>, 和 <code>setState()</code>，用 state 實作每秒更新的部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.timerID = setInterval(</span><br><span class=\"line\">      () =&gt; <span class=\"keyword\">this</span>.tick(),</span><br><span class=\"line\">      <span class=\"number\">1000</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.timerID);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  因為 props 和 state 可能是非同步的被更新，你不應該依賴它們的值來計算新的 state。</p>\n<p>  要修正這個問題，使用第二種形式的 setState()，它接受一個 function 而不是一個 object。Function 將接收先前的 state 作為第一個參數，並且將更新的 props 作為第二個參數：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">state, props</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  counter: state.counter + props.increment</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>React是「上至下」或「單向」的資料流：任何 state 總是由某個特地的 component 所擁有，任何從 state 得到的資料或 UI，state 只能影響自身和 child component。</p>\n<h2 id=\"事件處理\"><a href=\"#事件處理\" class=\"headerlink\" title=\"事件處理\"></a>事件處理</h2><p>事件的名稱在 React 中都是 camelCase，而在 HTML DOM 中則是小寫。</p>\n<ul>\n<li>HTML DOM 對照 React<ul>\n<li><code>onclick</code> → <code>onClick</code></li>\n<li><code>onclick=&quot;click()&quot;</code> → <code>onClick={click}</code></li>\n</ul>\n</li>\n</ul>\n<p>在 React 中，你不能夠在像在 HTML DOM 中使用 <code>return false</code> 來避免瀏覽器預設行為。你必須明確地呼叫 <code>preventDefault</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">\"#\"</span> onclick=<span class=\"string\">\"console.log('The link was clicked.'); return false\"</span>&gt;</span><br><span class=\"line\">  Click me</span><br><span class=\"line\">&lt;<span class=\"regexp\">/a&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 React 中，你則可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ActionLink</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The link was clicked.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">      Click me</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 JavaScript 中，class 的方法在預設上是沒有被綁定（bound）的。如果你忘了綁定 this.handleClick 並把它傳遞給 onClick 的話，this 的值將會在該 function 被呼叫時變成 undefined。</p>\n<p>總之，當你使用一個方法，卻沒有在後面加上 () 之時（例如當你使用 onClick={this.handleClick} 時），你應該要綁定這個方法。</p>\n<p>The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Toggle</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">isToggleOn</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 為了讓 `this` 能在 callback 中被使用，這裡的綁定是必要的：</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleClick = <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      isToggleOn: !state.isToggleOn</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        &#123;<span class=\"keyword\">this</span>.state.isToggleOn ? <span class=\"string\">'ON'</span> : <span class=\"string\">'OFF'</span>&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Toggle /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>如果呼叫 bind 對你來說很麻煩的話，你可以用別的方式。如果你使用了還在測試中的 class fields 語法的話，你可以用 class field 正確的綁定 callback：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這個語法確保 `this` 是在 handleClick 中被綁定：</span></span><br><span class=\"line\">  <span class=\"comment\">// 警告：這是一個還在*測試中*的語法：</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>傳遞一個額外的參數給 event handler。例如，如果 id 是每一行的 ID 的話，下面兩種語法都可行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;(e) =&gt; <span class=\"keyword\">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>以上這兩行程式是相同的。一個使用 arrow functions，另一個則使用了 Function.prototype.bind。</p>\n<p>以這兩個例子來說，e 這個參數所代表的 React 事件將會被當作 ID 之後的第二個參數被傳遞下去。在使用 arrow function 時，我們必須明確地將它傳遞下去，但若使用 bind 語法，未來任何的參數都將會自動被傳遞下去。</p>\n<h2 id=\"條件render\"><a href=\"#條件render\" class=\"headerlink\" title=\"條件render\"></a>條件render</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> isLoggedIn = <span class=\"keyword\">this</span>.state.isLoggedIn;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> button;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (isLoggedIn) &#123;</span><br><span class=\"line\">     button = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LogoutButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     button = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> (</span><br><span class=\"line\">     &lt;div&gt;</span><br><span class=\"line\">       &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class=\"line\">       &#123;button&#125;</span><br><span class=\"line\">     &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">   );</span></span><br><span class=\"line\"><span class=\"regexp\"> &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>用 <code>&amp;&amp;</code> 來條件顯示<br>因為在 JavaScript 中，<code>true &amp;&amp; expression</code> 總是回傳 <code>expression</code> ，而 <code>false &amp;&amp; expression</code> 總是回傳 <code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mailbox</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> unreadMessages = props.unreadMessages;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123;unreadMessages.length &gt; 0 &amp;&amp;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          You have &#123;unreadMessages.length&#125; unread messages.</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>h2&gt;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>React 在遇到 <code>null</code> 或 <code>false</code> 時都會忽略(不顯示)</p>\n<p>或用條件運算式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;isLoggedIn</span><br><span class=\"line\">    ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LogoutButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\">    : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表與key\"><a href=\"#列表與key\" class=\"headerlink\" title=\"列表與key\"></a>列表與key</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li&gt;&#123;number&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>你會收到一個關於你應該提供 key 給每一個列表項目的警告。key 是當你在建立一個 element 列表時必須使用的特殊的 string attribute。</p>\n<p>key 幫助 React 分辨哪些項目被改變、增加或刪除。在 array 裡面的每個 element 都應該要有一個 key，如此才能給予每個 element 一個固定的身份：</p>\n<p>通常，你會使用資料的 ID 作為 key：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class=\"line\">    &#123;number&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const todoItems = todos.map((todo) =&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li key=&#123;todo.id&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;todo.text&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>li&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>當你 render 的項目沒有固定的 ID 且你也沒有更好的辦法時，你可以使用項目的索引做為 key：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.map(<span class=\"function\">(<span class=\"params\">todo, index</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// 請在項目沒有固定的 ID 時才這樣做</span></span><br><span class=\"line\">  &lt;li key=&#123;index&#125;&gt;</span><br><span class=\"line\">    &#123;todo.text&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>React 預設將會使用索引作為 key。但並不建議你使用索引作為 key，尤其如果項目的順序會改變的話。這會對效能產生不好的影響，也可能會讓 component state 產生問題</p>\n<ul>\n<li>key 必須在 Sibling 中是唯一的</li>\n<li>key 的功能是提示 React，但它們不會被傳遞到 component 的 prop。</li>\n</ul>\n<p>應該把 key 放在 array 產生 item 的 render，而不是把它放在 item 的 render。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListItem</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = props.value;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 錯！你不需要在這裡指出 key：</span></span><br><span class=\"line\">    &lt;li key=&#123;value.toString()&#125;&gt;</span><br><span class=\"line\">      &#123;value&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function NumberList(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const numbers = props.numbers;</span></span><br><span class=\"line\"><span class=\"regexp\">  const listItems = numbers.map((number) =&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 錯！你應該要在這裡指出 key：</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ListItem value=&#123;number&#125; /</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;listItems&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一個好的經驗法則是，在 map() 呼叫中的每個 element 都會需要 key。</p>\n<h2 id=\"Form\"><a href=\"#Form\" class=\"headerlink\" title=\"Form\"></a>Form</h2><p>把這個表單寫成一個 controlled component： 用 state 來 顯示 value，onChange 時更新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'A name was submitted: '</span> + <span class=\"keyword\">this</span>.state.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Name:</span><br><span class=\"line\">          &lt;input type=<span class=\"string\">\"text\"</span> value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"Submit\" /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>這意味著你必須寫更多的 code，但現在你同時可以將 value 傳遞給其他的 UI element，或是從其他 event handler 重置。</p>\n<h3 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h3><p>在 React 中並不是用 selected attribute，而是在 select 的標籤上用一個 value attribute</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlavorForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">'coconut'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Your favorite flavor is: '</span> + <span class=\"keyword\">this</span>.state.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Pick your favorite flavor:</span><br><span class=\"line\">          &lt;select value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;&gt;</span><br><span class=\"line\">            &lt;option value=<span class=\"string\">\"grapefruit\"</span>&gt;Grapefruit&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;option value=\"lime\"&gt;Lime&lt;/</span>option&gt;</span><br><span class=\"line\">            &lt;option value=<span class=\"string\">\"coconut\"</span>&gt;Coconut&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;option value=\"mango\"&gt;Mango&lt;/</span>option&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/select&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>label&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"Submit\"</span> /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以將一個 array 傳給 value 這個 attribute，這使得你可以在一個 select 中選取多個選項：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;select multiple=&#123;<span class=\"literal\">true</span>&#125; value=&#123;[<span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"input-file\"><a href=\"#input-file\" class=\"headerlink\" title=\"input file\"></a>input file</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"file\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>由於它的值是唯讀，它在 React 中是一個 uncontrolled component。在稍後的文件中有其他關於它和其他 uncontrolled component 的討論。</p>\n<h3 id=\"多個input\"><a href=\"#多個input\" class=\"headerlink\" title=\"多個input\"></a>多個input</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reservation</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      isGoing: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      numberOfGuests: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleInputChange = <span class=\"keyword\">this</span>.handleInputChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleInputChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = event.target;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = target.name === <span class=\"string\">'isGoing'</span> ? target.checked : target.value;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = target.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      [name]: value</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Is going:</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            name=<span class=\"string\">\"isGoing\"</span></span><br><span class=\"line\">            type=<span class=\"string\">\"checkbox\"</span></span><br><span class=\"line\">            checked=&#123;<span class=\"keyword\">this</span>.state.isGoing&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;br /</span>&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          <span class=\"built_in\">Number</span> <span class=\"keyword\">of</span> guests:</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            name=<span class=\"string\">\"numberOfGuests\"</span></span><br><span class=\"line\">            type=<span class=\"string\">\"number\"</span></span><br><span class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.state.numberOfGuests&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>form&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一個 controlled component 上指明 value prop 可避免使用者改變輸入，除非你希望使用者這樣做。如果你已經指明了 value 但輸入仍然是可以被修改的，你很可能是不小心將 value 的值設定為 undefined 或 null。</p>\n<p>下面的程式碼就是一個範例。（輸入原先是被鎖住的，但在短暫的延遲後，變得可以被修改了。）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hi\"</span> /&gt;</span></span>, mountNode);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;null&#125;</span> /&gt;</span></span>, mountNode);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"uncontrolled-component\"><a href=\"#uncontrolled-component\" class=\"headerlink\" title=\"uncontrolled component\"></a>uncontrolled component</h3><p>在大多數的情況下，我們推薦使用 controlled component 來實作表單。在控制元件裡，表單的資料是被 React component 所處理。另一個選擇是 uncontrolled component，表單的資料是由 DOM 本身所處理的。</p>\n<p>使用 ref 來從 DOM 取得表單的資料，而不是為了每個 state 的更新寫 event handler。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.input = React.createRef();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'A name was submitted: '</span> + <span class=\"keyword\">this</span>.input.current.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Name:</span><br><span class=\"line\">          &lt;input type=<span class=\"string\">\"text\"</span> ref=&#123;<span class=\"keyword\">this</span>.input&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"Submit\" /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你想找出一個完整的、包含驗證、可追蹤拜訪欄位並能處理提交表單等功能的解決方案，Formik 是一個很熱門的選擇。然而，它是在與 controlled component 和維持 state 相同的原則上所建立的，所以別忘了學習它。</p>\n<h2 id=\"提升-State\"><a href=\"#提升-State\" class=\"headerlink\" title=\"提升 State\"></a>提升 State</h2><p>在 React 中，將 state 搬移到需要它的 component 的共同最近的祖先來共享 state。這被稱為「提升 state」。</p>\n<p>我們將從 TemperatureInput 移除 local state 並且搬移它到 Calculator。</p>\n<p>我們移除了它的 local state，並且不讀取 this.state.temperature，我們現在讀取 this.props.temperature。當我們想要改變時不呼叫 this.setState()，我們現在呼叫 this.props.onTemperatureChange()，它是由 Calculator 提供的</p>\n<p>calculator 傳入 prop.onChange 方法，供child的值改變時呼叫onChange()，以改變calculator(parent)的值</p>\n<p>通常來說，state 會優先被加入到需要 render 的 component。接著，如果其他的 component 也需要的話，你可以提升 state 到共同最靠近的 ancestor。</p>\n<p><strong>你應該依賴上至下的資料流，而不是嘗試在不同 component 之間同步 state。</strong></p>\n<p>當你在 UI 上看到一些錯誤時，你可以使用 React Developer Tools 來檢查 prop 並往 tree 的上方尋找，直到找到負責更新 state 的 component。這讓你可以追蹤到錯誤的來源</p>\n<h2 id=\"合成-vs-繼承\"><a href=\"#合成-vs-繼承\" class=\"headerlink\" title=\"合成 vs 繼承\"></a>合成 vs 繼承</h2><p>有些 component 不會提早知道它們的 children 有些什麼。對於像是 Sidebar 或 Dialog</p>\n<p>我們建議這些 component 使用特殊的 <code>children</code> prop 將 children element 直接傳入到它們的輸出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FancyBorder</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=&#123;<span class=\"string\">'FancyBorder FancyBorder-'</span> + props.color&#125;&gt;</span><br><span class=\"line\">      &#123;props.children&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/任何在 &lt;FancyBorder&gt; JSX tag 內的內容都被作為 children prop 被傳遞給 FancyBorder component。</span></span><br><span class=\"line\"><span class=\"regexp\">function WelcomeDialog() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;FancyBorder color=\"blue\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h1 className=\"Dialog-title\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        Welcome</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>h1&gt;</span><br><span class=\"line\">      &lt;p className=<span class=\"string\">\"Dialog-message\"</span>&gt;</span><br><span class=\"line\">        Thank you <span class=\"keyword\">for</span> visiting our spacecraft!</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>FancyBorder&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可用來排版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SplitPane</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"SplitPane\"</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"SplitPane-left\"</span>&gt;</span><br><span class=\"line\">        &#123;props.left&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"SplitPane-right\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;props.right&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function App() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;SplitPane</span></span><br><span class=\"line\"><span class=\"regexp\">      left=&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Contacts /</span>&gt;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      right=&#123;</span><br><span class=\"line\">        &lt;Chat /&gt;</span><br><span class=\"line\">      &#125; /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Facebook 中，我們使用 React 在成千上萬個 component，我們找不到任何使用案例來推薦你建立繼承結構的 component。</p>\n<h2 id=\"用-React-思考\"><a href=\"#用-React-思考\" class=\"headerlink\" title=\"用 React 思考\"></a>用 React 思考</h2><h3 id=\"第一步：將-UI-拆解成-component-層級\"><a href=\"#第一步：將-UI-拆解成-component-層級\" class=\"headerlink\" title=\"第一步：將 UI 拆解成 component 層級\"></a>第一步：將 UI 拆解成 component 層級</h3><p>首先，你要做的是將視覺稿中每一個 component （及 subcomponent）都圈起來，並幫它們命名。</p>\n<p>其中一個技巧是單一職責原則，它的意思是：在我們的理想中，一個 component應該只負責做一件事情。如果這個 component 最後變大了，你就需要再將它分成數個更小的 subcomponent 。</p>\n<p>由於你常常會展示 JSON 的資料模型給使用者，你會發現，如果你的模式是正確地被建立的話，你的 UI（以及你的 component 結構）會很好的相互對應。這是因為 UI 和資料模型通常是遵守同樣的資訊架構，這意味著將你的 UI 拆成 component 通常是相當容易的。</p>\n<h3 id=\"第二步：在-React-中建立一個靜態版本\"><a href=\"#第二步：在-React-中建立一個靜態版本\" class=\"headerlink\" title=\"第二步：在 React 中建立一個靜態版本\"></a>第二步：在 React 中建立一個靜態版本</h3><p>在你有了 component 層級後，就可以開始實作你的應用程式了。最簡單的方式是為你的應用程式建立一個接收資料模型、render UI 且沒有互動性的版本。建立一個靜態版本需要打很多字，但不需要想很多，而加上互動性則相反，需要做很多的思考，很少的打字，所以最好的方式是把這幾個過程都分開來。接下來，我們會知道為什麼是如此。</p>\n<p>請完全不要使用 state 來建立這個靜態版本。State 是保留給互動性的，也就是會隨時間改變的資料。既然我們目前要做的是這應用程式的靜態版本，你就不需要 state。</p>\n<p>你可以從最上層開始，或從最下層開始。也就是說，你可以先從層級較高的 component 開始做起，或者你也可以從比它低層級的開始。在比較簡單的例子中，通常從上往下是比較簡單的。但在較為大型的專案中，從下往上、邊寫邊測試則比較容易。</p>\n<p>React 的 單向資料流（也可稱為單向綁定）確保所有 component 都是模塊化且快速的。</p>\n<h3 id=\"第三步：找出最少（但完整）的-UI-State-的代表\"><a href=\"#第三步：找出最少（但完整）的-UI-State-的代表\" class=\"headerlink\" title=\"第三步：找出最少（但完整）的 UI State 的代表\"></a>第三步：找出最少（但完整）的 UI State 的代表</h3><p>請找出你的應用程式所需的最少的呈現方式，並在你遇到其他東西時再計算它們。例如，如果你在建立一個待辦清單，使用一個可以用來代表待辦事項的 array。不要另外用一個獨立的 state 變數來追蹤數量。當你要 render 代辦事項的數量時，讀取待辦事項 array 的長度即可。</p>\n<p>對於每一個資料，問你自己這三個問題：</p>\n<ol>\n<li>這個資料是從 parent 透過 props 傳下來的嗎？如果是的話，那它很可能不是 state。</li>\n<li>這個資料是否一直保持不變呢？如果是的話，那它很可能不是 state。</li>\n<li>你是否可以根據你的 component 中其他的 state 或 prop 來計算這個資料呢？如果是的話，那它一定不是 state。</li>\n</ol>\n<h3 id=\"第四步：找出你的-State-應該在哪裡\"><a href=\"#第四步：找出你的-State-應該在哪裡\" class=\"headerlink\" title=\"第四步：找出你的 State 應該在哪裡\"></a>第四步：找出你的 State 應該在哪裡</h3><p>我們需要找出哪幾個 component 會 mutate，或者擁有，這個 state。</p>\n<p>請記得，React 的核心精神是單向資料流，從 component 的層級從高往下流。<strong>也許哪個 component 該擁有 state 在一開始並不是很明顯</strong>。對新手來說，這往往是最難理解的概念，所以請跟著以下的步驟來思考：</p>\n<p>在你的應用程式中的每個 state：</p>\n<ul>\n<li>指出每個根據 state 來 render 某些東西的 component。</li>\n<li>找出一個共同擁有者 component（在層級中單一一個需要 state 的、在所有的 component 之上的 component）。</li>\n<li>應該擁有 state 的會是共同擁有者 component 或另一個更高層級的 component。(找最高級的component來持有state)</li>\n<li>如果你找不出一個應該擁有 state 的 component 的話，那就建立一個新的 component 來保持 state，並把它加到層級中共同擁有者 component 之上的某處。</li>\n</ul>\n<h3 id=\"第五步：加入相反的資料流\"><a href=\"#第五步：加入相反的資料流\" class=\"headerlink\" title=\"第五步：加入相反的資料流\"></a>第五步：加入相反的資料流</h3><p>現在是時候支援另一種資料流的方向了：在層級深處的表格 component 需要更新 FilterableProductTable 的 state。</p>\n<p>讓我們思考一下我們想要做些什麼。我們想確保當使用者改變這個表格時，我們會更新 state 以反映使用者的輸入。既然 component 只應該更新它自己本身的 state， FilterableProductTable 將會把 callback 傳給 SearchBar，而它們則會在 state 該被更新的時候被觸發。我們可以在輸入上使用 onChange 這個 event 來 接收通知。被 FilterableProductTable 傳下來的 callback 則會呼叫 setState()，之後應用程式就會被更新。</p>\n<h2 id=\"推薦的-Toolchain\"><a href=\"#推薦的-Toolchain\" class=\"headerlink\" title=\"推薦的 Toolchain\"></a>推薦的 Toolchain</h2><p>React 團隊主要推薦以下的方案：</p>\n<ul>\n<li>如果你正在學習 React 或建立全新的 single-page 應用程式，請使用 Create React App。</li>\n<li>如果你正在建立一個使用 Node.js 的 server-rendered 網頁，請使用 Next.js。</li>\n<li>如果你正在建立一個靜態內容的網頁，請使用 Gatsby。</li>\n<li>如果你正在建立一個 component 函式庫或與現存程式碼倉庫進行接軌，請使用更靈活的 Toolchain。</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaGVsbG8td29ybGQuaHRtbA==\">React: 語法教學<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL3R1dG9yaWFsL3R1dG9yaWFsLmh0bWw=\">React: 動手做教學<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>[React: css])(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2ZhcS1zdHlsaW5nLmh0bWw=\">https://reactjs.org/docs/faq-styling.html<i class=\"fa fa-external-link-alt\"></i></span>)</li>\n</ul>\n",
            "tags": [
                "reactjs",
                "javascript"
            ]
        }
    ]
}