<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>QWERTY • Posts by &#34;計算機結構&#34; tag</title>
        <link>http://gitqwerty777.github.io</link>
        <description>Programming | Computer Science | Thought</description>
        <language>zh-TW</language>
        <pubDate>Tue, 25 Nov 2014 20:50:00 +0800</pubDate>
        <lastBuildDate>Tue, 25 Nov 2014 20:50:00 +0800</lastBuildDate>
        <category>C#</category>
        <category>CodingStyle</category>
        <category>Emacs</category>
        <category>編輯器</category>
        <category>CFR</category>
        <category>電腦對局理論</category>
        <category>指令</category>
        <category>機器學習</category>
        <category>perceptron</category>
        <category>readme</category>
        <category>文件</category>
        <category>github</category>
        <category>artificial intelligence</category>
        <category>search</category>
        <category>First-Order Logic</category>
        <category>大數</category>
        <category>程式</category>
        <category>C++</category>
        <category>Hexo</category>
        <category>網誌</category>
        <category>Markdown</category>
        <category>CleanCode</category>
        <category>重構</category>
        <category>TDD</category>
        <category>設計模式</category>
        <category>CMake</category>
        <category>Makefile</category>
        <category>Linux</category>
        <category>Todo</category>
        <category>註解</category>
        <category>經濟學</category>
        <category>策略</category>
        <category>競爭</category>
        <category>博弈論</category>
        <category>計算機結構</category>
        <category>人工智慧</category>
        <category>圍棋</category>
        <category>象棋</category>
        <category>蒙地卡羅</category>
        <category>Alpha-Beta搜尋</category>
        <category>強化學習</category>
        <category>計算機網路</category>
        <category>boost</category>
        <category>函式庫</category>
        <category>編譯</category>
        <category>gcc</category>
        <category>g++</category>
        <category>clang</category>
        <category>最佳化</category>
        <category>推薦系統</category>
        <category>FM</category>
        <category>FFM</category>
        <category>SVM</category>
        <category>Embedding</category>
        <category>自然語言處理</category>
        <category>外國用語</category>
        <category>萌典</category>
        <category>opencc</category>
        <category>PTT</category>
        <category>vuejs</category>
        <category>linux</category>
        <category>c</category>
        <category>compile</category>
        <category>gdb</category>
        <category>c語言</category>
        <category>cpp</category>
        <category>除錯</category>
        <category>git</category>
        <category>VMWare</category>
        <category>虛擬機</category>
        <category>IFTTT</category>
        <category>自動化</category>
        <category>備份</category>
        <category>webhook</category>
        <category>簡報</category>
        <category>軟體</category>
        <category>PowerPoint</category>
        <category>Latex</category>
        <category>JavaScript</category>
        <category>CSS</category>
        <category>Unity</category>
        <category>fcitx</category>
        <category>嘸蝦米</category>
        <category>輸入法</category>
        <category>硬碟</category>
        <category>記憶體</category>
        <category>效能</category>
        <category>錯誤</category>
        <category>makefile</category>
        <category>備忘錄</category>
        <category>存檔</category>
        <category>統計</category>
        <category>byobu</category>
        <category>screen</category>
        <category>tmux</category>
        <category>reactjs</category>
        <category>javascript</category>
        <category>WideAndDeep</category>
        <category>Google</category>
        <category>觀察者</category>
        <category>訂閱</category>
        <category>委託</category>
        <category>正規表示式(RegExp)</category>
        <category>上下文無關文法(CFG)</category>
        <category>hexo</category>
        <category>blog</category>
        <category>theme</category>
        <category>feature</category>
        <category>revealJS</category>
        <category>markdown</category>
        <category>rss</category>
        <category>facebook</category>
        <category>youtube</category>
        <category>ptt</category>
        <category>bilibili</category>
        <category>pixiv</category>
        <category>crawler</category>
        <category>SEO</category>
        <category>google</category>
        <category>html</category>
        <category>amazon</category>
        <category>webhost</category>
        <category>ssl</category>
        <category>漢字</category>
        <category>中文</category>
        <category>異體字</category>
        <category>unicode</category>
        <category>unity</category>
        <category>演算法</category>
        <category>隨機排序</category>
        <category>洗牌</category>
        <category>Fisher-Yates</category>
        <category>證明</category>
        <category>python</category>
        <item>
            <guid isPermalink="true">http://gitqwerty777.github.io/computer-architecture2/</guid>
            <title>計算機結構(下)</title>
            <link>http://gitqwerty777.github.io/computer-architecture2/</link>
            <category>計算機結構</category>
            <pubDate>Tue, 25 Nov 2014 20:50:00 +0800</pubDate>
            <description><![CDATA[ &lt;!-- RENEW: --&gt;

&lt;h2 id=&#34;Chap07-Pipelining-II&#34;&gt;&lt;a href=&#34;#Chap07-Pipelining-II&#34; class=&#34;headerlink&#34; title=&#34;Chap07 Pipelining (II)&#34;&gt;&lt;/a&gt;Chap07 Pipelining (II)&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CA/detect-and-forward.png&#34; alt=&#34;detect and forward&#34;&gt;&lt;br&gt;Data Dependence Detection&lt;br&gt;Hazard conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EX hazard&lt;ul&gt;
&lt;li&gt;EX/MEM.RegisterRd = ID/EX.Register Rs or Rt &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MEM hazard&lt;ul&gt;
&lt;li&gt;MEM/WB.RegisterRd = ID/EX.RegisterRs or Rt&lt;/li&gt;
&lt;li&gt;Ex/MEM.RegisterRd != ID/Ex.RegisterRs(優先選EX)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RegWrite == true&lt;/li&gt;
&lt;li&gt;RegisterRd != $0&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;
Resolving Hazards by Forwarding&lt;br&gt;&lt;img data-src=&#34;/img/CA/forward.png&#34; alt=&#34;forward&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add MUX to ALU inputs&lt;br&gt;Forwarding Control in EX&lt;br&gt;&lt;img data-src=&#34;/img/CA/forward-logic-mux.png&#34; alt=&#34;logic with forward&#34;&gt;&lt;/p&gt;
&lt;p&gt;load-use data hazard(instruction after LW) -&amp;gt; stall it  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;If (ID/EX.MemRead and
((ID/EX.RegisterRt = IF/ID.RegisterRs) or
(ID/EX.RegisterRt = IF/ID.RegisterRt)))
    stall the pipeline&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Stall: ID/EX裡的control value改成0，使EX MEM WB都不做事(nop) 並防止PC和IF/ID register更新，也就是確保他們下個cycle做跟這個cycle一樣的事&lt;br&gt;Insert a bubble:空白的instruction, 不做事&lt;br&gt;&lt;img data-src=&#34;/img/CA/bubble.png&#34; alt=&#34;bubble&#34;&gt;&lt;/p&gt;
&lt;p&gt;Control Hazard Solutions&lt;/p&gt;
&lt;p&gt;Branch 有沒有taken可以在MEM確認。如果發現prediction錯誤就重新設定PC，並把control都設為0，flush掉跑錯的instruction。&lt;br&gt;一個簡單的改進方式就是，在ID stage把資料從register讀出來後加上比較兩個值是否相等的元件，compare完才進到id/ex，這時候提早了一個cycle知道branch是否taken。&lt;/p&gt;
&lt;p&gt;當branch發生使用的值在ALU做完運算時，透過forwarding就可以解決了&lt;br&gt;但如果branch發生在使用的值正在load的話，就必須stall。而如果是一load出來馬上就要做branching的判斷的話，就必須stall 2個cycle&lt;br&gt;&lt;img data-src=&#34;/img/CA/2stall.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Dynamic prediction的branch history table，以branch instruction的address(取最後n個bit)做索引，並儲存branch的結果。如果猜錯的話就做之前一樣的flush並修改表。&lt;br&gt;跳出loop時會猜繼續，第一次進入loop會猜跳出 -&amp;gt; 導致錯誤率大幅提高&lt;br&gt;-&amp;gt; 2bit的predictor, 連續兩個taken/not taken才會改變狀態&lt;/p&gt;
&lt;p&gt;但就算猜對，還是要算出target address，所以在branch taken時會有一個cycle的penalty。解決的方法是新增buffer存放branch target address。&lt;/p&gt;
&lt;h3 id=&#34;Exception&#34;&gt;&lt;a href=&#34;#Exception&#34; class=&#34;headerlink&#34; title=&#34;Exception&#34;&gt;&lt;/a&gt;Exception&lt;/h3&gt;&lt;p&gt;syscall，未定義的opcode，或overflow處理等等(以上為CPU內產生的指令)或是受外部的I/O控制器的干涉。導致performance的降低。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;完成先前的指令&lt;/li&gt;
&lt;li&gt;Flush the instruction in the IF, ID and EX stages&lt;/li&gt;
&lt;li&gt;把這些違例或是被干擾的instruction的PC(實際上是PC+4)存在Exception program counter(EPC)&lt;/li&gt;
&lt;li&gt;問題的跡像(indicator)也存起來，在MIPS中是使用Cause register&lt;/li&gt;
&lt;li&gt;然後再跳到handler(PC = 0x40000040)&lt;/li&gt;
&lt;li&gt;另外一種解決的機制是，以硬體等級去告訴I/O handler，根據不同的cause跳去不同的handler(不同的address)，instructions要不就去執行interrupt的部份，要不就跳到handler去處理。&lt;/li&gt;
&lt;li&gt;Handler先讀看原因(indicator)然後再轉至專門解決此類問題的handler，然後決定該採取什麼行動，如果是restartable(可以重跑)，就用EPC回到原本執行的地方(EPC-4)，並採取判斷正確的行動。否則就終止程序並根據EPC cause來回報錯誤。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/exception-handle.png&#34; alt=&#34;step to handle exception&#34;&gt;&lt;/p&gt;
&lt;p&gt;ILP(instruction level parallelism)，指令層級的平行處理。&lt;br&gt;增進ILP的方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deeper pipeline，把pipeline分成更多stage，而每個stage因為workload相對的比較少，所以可以讓cpu clock cycle變短，進而增進效能&lt;/li&gt;
&lt;li&gt;Multiple issue，有多個pipeline同時進行，所以每個clock cycle都同時跑好幾個instruction。但是互相依賴性(比如說不同pipeline之間的hazard或共用到哪些資源)會使得實際上不是變幾倍的pipeline IPC就變幾倍。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Multiple-issue&#34;&gt;&lt;a href=&#34;#Multiple-issue&#34; class=&#34;headerlink&#34; title=&#34;Multiple issue&#34;&gt;&lt;/a&gt;Multiple issue&lt;/h3&gt;&lt;p&gt;可以分為static和dynamic。&lt;br&gt;Static的是由compiler把要同時執行的instruction包成一包一包的instruction packets。&lt;br&gt;可以把instruction packet想成一個非常長的instruction裡面有好幾個同時運作的operations。這樣的概念叫做VLIW(very long instruction word)&lt;br&gt;偵測避免hazard&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把instruction重新排列並包成issue packets時避免會造成hazard的順序。&lt;/li&gt;
&lt;li&gt;同時在跑的instruction要互相independent不然就會搶資源或造成data hazard。&lt;/li&gt;
&lt;li&gt;在不同的packets之間，可以有dependency，但這部份根據不同的ISA要有不同的設計。&lt;/li&gt;
&lt;li&gt;有時候要放入nop(不做任何動作)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dynamic是由CPU選擇每個cycle要issue哪些instructions，而compiler可以藉由把instruction串流做較好的排列來幫助。CPU會用比較進階的技術在運行時解決hazard。&lt;/p&gt;
&lt;p&gt;Speculation：先去猜測要做什麼，如果做錯了再從頭來過。比如說branch的時候就先猜taken或not taken，在load的時候先拿原有的位址去load如果發現其他該在前面的instruction更新了這個位址，就roll-back。&lt;/p&gt;
&lt;p&gt;Compiler可以重新排列一些code比如說把branch之前的load移到更早，避免stall，或是寫一些instruction來修正做出錯誤的speculation的狀況。增加用來延遲exception的ISA。&lt;/p&gt;
&lt;p&gt;而硬體可以做look-ahead，將instruction的結果和exception都先存在buffer裡，直到他們要被用到或是判斷speculation正確。如果判斷speculation錯誤就把buffer flush掉。&lt;/p&gt;
&lt;h3 id=&#34;dual-issue&#34;&gt;&lt;a href=&#34;#dual-issue&#34; class=&#34;headerlink&#34; title=&#34;dual issue&#34;&gt;&lt;/a&gt;dual issue&lt;/h3&gt;&lt;p&gt;一個packet有兩組instruction。一個只做load/store一個只做ALU/branch，所以只要加一個ALU和一個sign extender就可以實做。&lt;/p&gt;
&lt;p&gt;dual issue’s Data hazard:&lt;/p&gt;
&lt;figure class=&#34;highlight routeros&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;builtin-name&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$t0&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$s0&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$s1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;load &lt;span class=&#34;variable&#34;&gt;$s2&lt;/span&gt;, 0(&lt;span class=&#34;variable&#34;&gt;$t0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;把這兩個指令拆開放在兩個不同的packets，就像stall一樣&lt;/p&gt;
&lt;p&gt;Load-use hazard，一樣會造成一個cycle的延遲，但是一個cycle變成影響兩個instructions。&lt;br&gt;-&amp;gt; 需要把指令做更好的排程(aggressive scheduling)&lt;/p&gt;
&lt;p&gt;loop unrolling: 把一次完成多個loop內的iteration來減少loop-control overhead(bne)，並用不同的register來存放(register renaming)(每一份replicate就是原本的loop跑一次)&lt;br&gt;避免loop裡面有 anti–dependencies(name dependency): write-after-read&lt;br&gt;ex: B=7; A=B+1; B=3 在a=b+1和b=3之間就有anti dependent的關係&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/unroll-before.png&#34; alt=&#34;before&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CA/unroll-after.png&#34; alt=&#34;after&#34;&gt;&lt;br&gt;原本：for(load -&amp;gt; 計算 -&amp;gt; save)&lt;br&gt;之後：for(load) + for(add) -&amp;gt; for(save)&lt;br&gt;IPC從1.25提升到1.75(更接近極限，2)不過code和register也變得更大。  &lt;/p&gt;
&lt;p&gt;Dynamic multiple issue通常在超大型處理器中使用。CPU每個cycle會決定issue的對象。以幫助cpu對code的語義有更好的掌握(compiler做的事變少CPU更直接掌握code在做什麼)。&lt;br&gt;dynamic pipeline scheduling: 讓cpu可以不照順序執行instruction以避免stall，但是會把資料&lt;strong&gt;照順序存回&lt;/strong&gt;register(比如說在stall的時候就先處理無關的instruction)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/dynamic-schedule-CPU.png&#34; alt=&#34;dynamic schedule CPU&#34;&gt;&lt;br&gt;Dynamically scheduled CPU的運作跟一般的pipeline有些出入，可以分為4個stage&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IF/ID&lt;br&gt;照順序做完instruction fetch和decode(這邊的動作很快)&lt;/li&gt;
&lt;li&gt;reservation stations&lt;br&gt;控制哪些instruction要先pending&lt;/li&gt;
&lt;li&gt;functional units&lt;br&gt;做不同的功能 – 浮點數運算, load-store…&lt;br&gt;完成後把資料給commit unit及相對應在pending等這個結果的reservation station&lt;/li&gt;
&lt;li&gt;commit unit&lt;br&gt;重新排列register write要用的buffer&lt;br&gt;並提供operands給某些在reservation pending的function(類似之前單issue裡要flush重做的function)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;?? Reservation station 和 commit unit在reorder buffer時，自動達到了register renaming。&lt;/p&gt;
&lt;p&gt;?? 當一個instruction被issue到reservation station的時候，如果instruction的operands在register或reorder buffer裡可以被找到也可以被存取的話，把它複制到reservation station，並且標明那個register已經無用可以被複寫。如果operands無法存取(unavailable)的話，有一個function unit會把該給的值給reservation unit，而register裡面的值需不需要更新就要看指令。&lt;/p&gt;
&lt;p&gt;dynamically scheduled的speculation: 在branching的結果確認之前不要commit。而speculation一樣可以用在減少load 和cache miss delay。根據預測的address先取出值然後等store有沒有更改到這個load的address，store會把那個address bypass到load unit。沒問題就把結果送到commit unit，有問題就重做。&lt;/p&gt;
&lt;p&gt;Dynamically scheduling的原因:&lt;br&gt;不是所有的stall都是可以從code裡看出來的 比如說:cache miss。&lt;br&gt;branch的結果也不能靠scheduling來解決。&lt;br&gt;不同的ISA有不同的延遲和不同的hazard，都要交給compiler來處理實在非常麻煩。&lt;/p&gt;
&lt;p&gt;Multiple issue的效能：程式內有dependency會限制ILP(instruction level parallelism)而且有些dependency很難去除，如pointer aliasing(不同的名字的pointer指到同一個地方)&lt;br&gt;有一些平行也很難做到比如說IF/ID的部份&lt;br&gt;memory還有delay而且也有他的頻寬，也導致pipeline常常有nop&lt;br&gt;Speculation如果做的好的話可以改善以上原因引起的performance下降&lt;/p&gt;
&lt;p&gt;多顆簡單的核心(沒speculation, issue width低, pipeline, stage少)可以達到省電的作用&lt;/p&gt;
&lt;h3 id=&#34;結論&#34;&gt;&lt;a href=&#34;#結論&#34; class=&#34;headerlink&#34; title=&#34;結論&#34;&gt;&lt;/a&gt;結論&lt;/h3&gt;&lt;p&gt;pipeline的概念很簡單，但是細節很複雜。Ex: hazard detection&lt;br&gt;pipeline跟cpu的其他科技無關，其他科技進步的同時還是可以做pipelining  &lt;/p&gt;
&lt;p&gt;不好的ISA設計可能在某些狀況下會讓pipelining變得很困難&lt;br&gt;ex:&lt;br&gt;太複雜的instruction set 需要巨大的overhead來讓pipeline可行(ex: IA-32,VAX)&lt;br&gt;太複雜的addressing mode&lt;br&gt;間接讀取memory(指標)，及register update&lt;br&gt;複雜的pipeline，會有比較長的branching delay slots  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ISA會影響data path和control的設計&lt;/strong&gt;&lt;br&gt;Pipelining利用平行處理的技術可以提高總輸出，並不影響單個指令的latency&lt;br&gt;Dependency限制了平行處理的程度，太過複雜又會導致電耗過高&lt;/p&gt;
&lt;h2 id=&#34;Chap08-Memory-Hierarchy&#34;&gt;&lt;a href=&#34;#Chap08-Memory-Hierarchy&#34; class=&#34;headerlink&#34; title=&#34;Chap08 Memory Hierarchy&#34;&gt;&lt;/a&gt;Chap08 Memory Hierarchy&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CA/memory-hierarchy.png&#34; alt=&#34;hieraracy&#34;&gt;&lt;br&gt;記憶體的層級化: 愈常用的放在愈快拿到的地方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static Ram: 0.5ns-2.5ns， 每gb要2000 – 5000元&lt;/li&gt;
&lt;li&gt;Dynamic Ram: 50ns -70ns 每gb要 20- 75元&lt;/li&gt;
&lt;li&gt;硬碟:5-20ms，每gb只要0.2-2元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Temporal locality: 最近被存取過的data容易再被存取&lt;br&gt;Ex:在loop裡面的程序，或是在loop裡面一直被重複操作的數字&lt;/p&gt;
&lt;p&gt;Spatial locality: 位址接近最近被存取過的data較有可能被存取，如array&lt;/p&gt;
&lt;p&gt;資料的copy以block為最小單位。&lt;br&gt;Hit Time: memory access time + time to determine hit/miss&lt;br&gt;Miss Penalty: Time to replace a block in the upper level + Time to deliver the block to processor  &lt;/p&gt;
&lt;p&gt;direct mapped cache: mod餘1, mod餘2 … 各放在同一個cache block&lt;br&gt;memory address前面的bit也存過去做為tag，可知道是從memory的哪個位置將資料load到這個cache&lt;br&gt;Valid bit可以很快的判斷一個block裡面是否有資料&lt;br&gt;&lt;img data-src=&#34;/img/CA/direct-map.png&#34; alt=&#34;direct map&#34;&gt;&lt;/p&gt;
&lt;p&gt;Q:How many total bits are required for a direct-mapped cache with 16 KB of data and 4-word(16byte) blocks, assuming 32bit address?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;num of sets = 16KB(cache size)/16B(block size) = 2^10&lt;/li&gt;
&lt;li&gt;num of data bits for each set = 16byte data = 4&lt;/li&gt;
&lt;li&gt;num of tag bits for each set = 32-10-4 = 18&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cache Controller FSM&lt;br&gt;&lt;img data-src=&#34;/img/CA/cache-controller-fsm.png&#34; alt=&#34;FSM&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;考慮因素&#34;&gt;&lt;a href=&#34;#考慮因素&#34; class=&#34;headerlink&#34; title=&#34;考慮因素&#34;&gt;&lt;/a&gt;考慮因素&lt;/h3&gt;&lt;p&gt;若增大block size，block數變少，有利於spatial locality，但miss penalty上升&lt;/p&gt;
&lt;p&gt;解決miss penalty上升  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Early restart：正常運作，只要一fetch到需要的word，就馬上把這個word送到CPU&lt;/li&gt;
&lt;li&gt;Critical word first：先fetch需要的word，再把剩下的word填進cache bloc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各層級的資料不同步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write through：寫入cache時同時寫入memory&lt;/li&gt;
&lt;li&gt;Write back：cache被代替時，再寫入memory，設dirty bit&lt;/li&gt;
&lt;li&gt;使用write buffer：只有在write buffer滿的時候才stall&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Write Miss Policy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write allocate(fetch on write): 先load到cache再修改&lt;/li&gt;
&lt;li&gt;No Write allocate(write around): 直接write底層的資料，不load到cache&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在做初始化時，寫入的資料(全都是0)不會在近期內就被讀取，採取write around就是一個比較好的選擇&lt;/p&gt;
&lt;p&gt;是否合併instruction cache 和 data cache?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Combined cache – higher cache hit rate &amp;amp; lower cache bandwidth   &lt;/li&gt;
&lt;li&gt;Split cache – lower cache hit rate &amp;amp; higher cache bandwidth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;memory interleave: 讓BUS可以同步讀取不同BANK&lt;br&gt;&lt;img data-src=&#34;/img/CA/memory-interleave.png&#34; alt=&#34;memory design&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDR: RAM不只在clock 0變1時動作，在1變0的時候也做一次動作，使data rate變為兩倍故名 ddr&lt;/li&gt;
&lt;li&gt;QDR: DDR再加上將input 和output分開，在同一個clock變更時可以同時做input 和output的技術&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當CPU的效能增進時，miss penalty的影響就越來越大&lt;/p&gt;
&lt;p&gt;How to Improve Cache Performance?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reduce miss rate -&amp;gt; Increasing associativity&lt;br&gt; direct mapped -&amp;gt; set associative -&amp;gt; fully associative&lt;br&gt; 效能提升呈邊際遞減&lt;br&gt; 缺點：mux delay, data comes after hit/miss, tag bit increase&lt;/li&gt;
&lt;li&gt;Reduce miss penalty -&amp;gt; multi-level cache&lt;br&gt; high performance improvement&lt;br&gt; Ex. radix sort: cache miss rate high, so performance worse than quick sort&lt;/li&gt;
&lt;li&gt;Reduce hit time -&amp;gt; small cache(…)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;記憶體的層級化(memory hierarchy)：每一層裡面都有4個重點，block要怎麼放置，要怎麼找到需要的block，當miss的時候怎麼替換，寫入時的規矩(write policy)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;block要怎麼放置:由associativity決定。可分為direct mapped, n-way,和fully associative。越高的associatvie就越少miss但是cost，access time 和複雜度也越高。(三種associative參考前面)&lt;/li&gt;
&lt;li&gt;要怎麼找到需要的block: direct mapping需要做1次的comparison，n-way需要做n(看多少way)次，而fully associative如果建表就不用沒的話就要做entry的次數次(每個entry都要比對)。這邊我們的目標是降低comparison以降低硬體cost。VM由於full look-up table的查表方式使得fully associative可行，可以大大降低miss rate。&lt;/li&gt;
&lt;li&gt;當miss的時候怎麼替換(algo): 替換的方法有LRU和random兩者比較在前面講過了。在VM裡面的話我們藉由硬體的幫忙實作LRU。&lt;/li&gt;
&lt;li&gt;Write policy:write-through和write-back，在VM裡只有write-back可行(28點)。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Chap-08-2-Virutual-Memory&#34;&gt;&lt;a href=&#34;#Chap-08-2-Virutual-Memory&#34; class=&#34;headerlink&#34; title=&#34;Chap 08-2 Virutual Memory&#34;&gt;&lt;/a&gt;Chap 08-2 Virutual Memory&lt;/h2&gt;&lt;p&gt;Idea: use memory as cache for disk  &lt;/p&gt;
&lt;p&gt;block叫做page，miss叫做page fault&lt;/p&gt;
&lt;p&gt;Disk讀取的速度非常慢，要花上百萬個cycle。必須使用Fully associative和較佳的replacement algorithm，及軟體為主的exception handler&lt;/p&gt;
&lt;p&gt;page fault 發生時，os會把相對應的page抓進來並update page table然後再重新執行導致page fault的instruction&lt;/p&gt;
&lt;p&gt;LRU replacement: 每個PTE(entry)加個bit叫reference bit，每次當這個page 被access就把這個reference bit設為1，然後系統會自動定期將所有 reference bit 清為0，這樣我們可以判斷reference bit是0的page最近沒有被access。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;p&gt;Page table:由virtual page number作index，值為physical index。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Page table can be very large!&lt;br&gt;–Solution: inverted page table &amp;amp;  multi-level paging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;inverted page table: use hash to search(非常耗時、無法支援Memory sharing)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;multi-level: 分層, decrease total page table size&lt;br&gt;&lt;img data-src=&#34;/img/CA/multilevel-pagetable.png&#34; alt=&#34;two-level&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TLB(translation look-aside buffer)可以很快的cache在cpu內存放PTE。通常可存放16&lt;del&gt;512個PTE，hit時只要花0.5&lt;/del&gt;1個cycle，miss的話也只要10&lt;del&gt;100個cycle。並且有0.01%&lt;/del&gt;1%的低的miss rate&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同的任務(task)有時候可以共用他們的虛擬位址，但是需要OS的協調指派，並防止不相干的程式的access。&lt;br&gt;需要硬體的支援: kernel mode, 包含特有的instruction. page table和他的state資訊只有在kernel mode下可以access。並且還要有system call exception&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/memory-retrieve-events.png&#34; alt=&#34;Possible Combinations of Events&#34;&gt;&lt;/p&gt;
&lt;p&gt;Virtually Addressed Cache only Translated on miss&lt;/p&gt;
&lt;p&gt;distinguish data of different processes&lt;br&gt;-&amp;gt; Virtually indexed &amp;amp; physically tagged cache&lt;br&gt;-&amp;gt; read data by tag and translate index in the same time&lt;br&gt;&lt;img data-src=&#34;/img/CA/vipt-flow.png&#34; alt=&#34;Virtually indexed &amp;amp; physically tagged cache&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Performance-issue-in-Virtual-Memory&#34;&gt;&lt;a href=&#34;#Performance-issue-in-Virtual-Memory&#34; class=&#34;headerlink&#34; title=&#34;Performance issue in Virtual Memory&#34;&gt;&lt;/a&gt;Performance issue in Virtual Memory&lt;/h3&gt;&lt;p&gt;Thrashing Solutions: Buy more memory&lt;br&gt;High TLB misses Solutions:Variable page size&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;compulsory misses，也叫做cold-start misses。資料第一次被存取。&lt;/li&gt;
&lt;li&gt;capacity misses，cache的大小有限，一個剛被replace掉的block馬上又需要被access。&lt;/li&gt;
&lt;li&gt;conflict misses(collision misses)。多個block要競爭同一個index的entry，如果是fully-associative就不會發生&lt;br&gt;&lt;img data-src=&#34;/img/CA/collision-miss-rate.png&#34; alt=&#34;3C absoluate miss rate&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;若想要減低miss rate, 就會造成總體效能的負面效應。&lt;br&gt;Trends:&lt;br&gt;–Redesign DRAM chips to provide higher bandwidth or processing&lt;br&gt;–Use prefetching &amp;amp; non-blocking cache (make cache visible to ISA)&lt;br&gt;–Restructure code to increase locality&lt;/p&gt;
&lt;p&gt;Reduce miss penalty&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Non-blocking caches&lt;ul&gt;
&lt;li&gt;Non-blocking cache or lockup-free cache allowing the data cache to continue to supply cache hits during a miss&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prefetching&lt;ul&gt;
&lt;li&gt;Requesting data early, so it’s in cache when needed.&lt;/li&gt;
&lt;li&gt;預測技術(complier or hardware)&lt;/li&gt;
&lt;li&gt;Problem: May replace data in cache that is still needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VMM(virtual machine monitor)將虛擬的資源map到實體資源上，ex: memory I/O, CPU。guest的code在我們的本機端跑時是使用user mode，VMM可以控管一些要有權限才能用的instructions和一些資源是否可以access。Guest的os可能跟我們使用不同套，於是vmm就要產生一個虛擬的I/O給guest使用，來處理真正的I/O。&lt;br&gt;如果VM request一個timer-interrupt，這時候vmm就會根據本機的timer虛擬出一個虛擬的timer。利用這個timer來判斷interrupt的發生。&lt;br&gt;在vm上所有必須access實體資源的動作都要透過由VMM監控的privileged instructions才使用。比如說page tables, I/O , interrupt controls, registers等。&lt;br&gt;做某一些動作比如說要建立多重的web service時，所有東西都要經過VMM，VMM就回成為一個很大的 threshold。&lt;/p&gt;
&lt;h2 id=&#34;Chap-10-Storage-Network-and-Other-Peripherals&#34;&gt;&lt;a href=&#34;#Chap-10-Storage-Network-and-Other-Peripherals&#34; class=&#34;headerlink&#34; title=&#34;Chap 10 Storage, Network and Other Peripherals&#34;&gt;&lt;/a&gt;Chap 10 Storage, Network and Other Peripherals&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CA/iosystem.png&#34; alt=&#34;IO System&#34;&gt;&lt;/p&gt;
&lt;p&gt;I/O Device Characteristics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;behavior&lt;ul&gt;
&lt;li&gt;input, output or storage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;partner&lt;/li&gt;
&lt;li&gt;data transmit rate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;performance metrics: Throughput, Response time&lt;br&gt;&lt;img data-src=&#34;/img/CA/iodevicechart.png&#34; alt=&#34;I/O device characterstics&#34;&gt;&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;I/O System performance: find limited by weakest link in the chain&lt;/dt&gt;&lt;dd&gt;CPU, memory, bus, IO controller, IO device, OS, software&lt;br&gt;Two common &lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;reliability&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MTTF:平均要多久會出現一次failure&lt;/li&gt;
&lt;li&gt;MTTR:平均遇到failure以後多久會修好&lt;/li&gt;
&lt;li&gt;availability是MTTF/(MTTF+MTTR)&lt;/li&gt;
&lt;li&gt;改進availability&lt;ul&gt;
&lt;li&gt;增進MTTF，有避免fault的發生，減少fault發生時造成的損失，還有fault的預測&lt;/li&gt;
&lt;li&gt;減少MTTR，加強repair，增強fault的原因的分析功能，還有repair的機制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disk Performance&lt;br&gt;seek time: 上下移動&lt;br&gt;Rotational latency: 轉到讀取的資料所需時間(RPM)，平均計算：轉一半(0.5round)&lt;br&gt;transfer rate: 傳送資料速度&lt;br&gt;Controller time: I/O controller花的時間&lt;/p&gt;
&lt;p&gt;快閃記憶體(flash)比硬碟快上100~1000倍。&lt;br&gt;比較小，比較不耗電。但是比較貴(介於disk和dram之間。)&lt;br&gt;Flash可以分為NOR或NAND flash。&lt;br&gt;NOR flash是random access通常用在嵌入式系統的instruction memory。&lt;br&gt;NAND 同時只能access某個block，而且同樣的大小有比較大的容量。成本也比較低。通常用來當我們常用的usb drive或記憶卡，SSD等等。&lt;br&gt;Flash的bit約在access 千次以後會壞掉。所以不適合拿來做ram或硬碟。解決方法是把data平均放在每個block上。&lt;/p&gt;
&lt;p&gt;flash’s block: 包含多個page&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write Once: 無法直接覆蓋檔案，需先清除，一次清除一個block&lt;/li&gt;
&lt;li&gt;When # of free pages &amp;lt;= Garbage Collection Threshold&lt;br&gt;: move live page to other block , and erase this block&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SSD (Solid Storage Disk)&lt;br&gt;no actual “disk”, use integrated circuit assemblies as memory to store data persistently.&lt;br&gt;SSD uses electronic interfaces compatible with traditional block drives&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no mechanical failure&lt;/li&gt;
&lt;li&gt;Green&lt;ul&gt;
&lt;li&gt;SSDs consume over 50% less power compared to HDD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Higher initial cost&lt;/li&gt;
&lt;li&gt;Ex. Facebook data center&lt;/li&gt;
&lt;li&gt;Active SSD: 在I/O端作(簡單的)計算，減少L/W時間&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;將PCI-e flash作為I/O cache(比SSD快！)放在General IO bus 上以加速I/O&lt;/p&gt;
&lt;p&gt;Bus: Connection between Processors, Memory, and I/O Device&lt;br&gt;有很好的同步性和低維護費，但造成效能瓶頸(受限於長度，BUS數目…)&lt;br&gt;有Control line 和 Data line&lt;/p&gt;
&lt;p&gt;Bus可以分為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Processor-memory bus: 較短較快，要照著memory的規劃做設計&lt;/li&gt;
&lt;li&gt;I/O bus: 較長，可以有多重的互相連結。要照著互通性的基準設計&lt;/li&gt;
&lt;li&gt;Backplane bus: 所有device都可連接，花費較少，用來連接前兩者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/three-type-bus.png&#34; alt=&#34;three bus system&#34;&gt;&lt;/p&gt;
&lt;p&gt;Synchronous Bus: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;includes a clock in the control lines&lt;/li&gt;
&lt;li&gt;advantage: involves very little logic and can run very fast&lt;/li&gt;
&lt;li&gt;disadvantages: &lt;ul&gt;
&lt;li&gt;every device on the bus must run at the same clock rate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Asynchronous Bus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No clock, can accommodate a wide range of devices&lt;/li&gt;
&lt;li&gt;can be lengthened without worrying about clock&lt;/li&gt;
&lt;li&gt;requires a handshaking protocol&lt;br&gt;&lt;img data-src=&#34;/img/CA/asynchronous-handshaking.png&#34; alt=&#34;Asynchronous handshaking: Read Transaction&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Multiple Potential Bus Masters: use Arbiter to control&lt;br&gt;Arbiter: select who can use bus by priority and fairness&lt;/p&gt;
&lt;p&gt;Daisy Chain Bus Arbitrations&lt;br&gt;&lt;img data-src=&#34;/img/CA/daisy-chain.png&#34; alt=&#34;Daisy Chain Bus Arbitrations&#34;&gt;&lt;br&gt;Advantage: simple&lt;br&gt;Disadvantages:&lt;br&gt;–Cannot assure fairness: A low-priority device may be locked out indefinitely&lt;br&gt;–The use of the daisy chain grant signal also limits the bus&lt;br&gt;speed&lt;/p&gt;
&lt;p&gt;Centralized Parallel Arbitration&lt;br&gt;&lt;img data-src=&#34;/img/CA/Centralized-Parallel-Arbitration.png&#34; alt=&#34;Centralized Parallel Arbitration&#34;&gt;&lt;br&gt;所有bus由arbiter控管&lt;br&gt;適合速度較快的device組成的bus&lt;/p&gt;
&lt;p&gt;I/O的設備是由I/O controller來管理並同步。&lt;br&gt;command register來存放不同的command 使用不同的command來讓I/O device執行不同的動作&lt;br&gt;status register來指出I/O設備現在正在執行什麼task還有是否遇到什麼error&lt;br&gt;data register，可以把data “write”到device或從device ”read”出data。&lt;/p&gt;
&lt;p&gt;Memory mapped I/O&lt;br&gt;I/O的register的位址設為跟memory中的位址一樣，只有在kernel mode時可以access這些address&lt;/p&gt;
&lt;p&gt;Communicating with the Processor&lt;br&gt;‧Polling&lt;br&gt;定期檢查I/O status register，如果是ready就執行I/O，如果是error就想辦法解決。叫polling(問卷調查)。會浪費太多cpu time(busy loop)。&lt;br&gt;有反應時間需求時使用&lt;br&gt;‧Interrupt&lt;br&gt;&lt;img data-src=&#34;/img/CA/interrupt-driven-IO.png&#34; alt=&#34;Interrupt Driven Data Transfer&#34;&gt;&lt;br&gt;當ready或error時，controller就會interrupt CPU。&lt;br&gt;Interrupt跟exception很像，但可以在兩個instruction之間觸發handler。通常可以由cause的資訊來分辨是哪個device發生interrupt。Interrupt也有不同的priority，越緊急的interrupt priority就會越高。也可以用高priority的interrupt來呼叫低priority的interrupt的handler。&lt;br&gt;high-speed devices are associated with higher priority&lt;br&gt;‧DMA(direct memory access)&lt;br&gt;I/O controller主動跟memory連結傳輸資料，直到傳輸完成或是error才interrupt。比較節省cpu-time。&lt;br&gt;DMA寫到memory後，可能造成memory和cache不一致&lt;br&gt;如果write-back cache有dirty block而DMA去讀到相對應的memory的話也會讀到錯誤的資料。解法：cache的內容如果在memory中被dma寫入就把那個cache flush掉，不然就要設定noncacheable(dma不能動在cache的資料)。&lt;/p&gt;
&lt;p&gt;Parallelisms and I/O&lt;/p&gt;
&lt;p&gt;RAID: Redundant Array of (inexpensive)Independent Disks。&lt;br&gt;使用很多個小的disk來取代一個大的disk，好處有資料較不易受損和平行處理速度加快&lt;br&gt;‧Improve availability with redundancy&lt;/p&gt;
&lt;p&gt;Raid 0，是最早的RAID，沒有redundancy，只是把資料分散在不同的小disk可以平行讀取&lt;br&gt;RAID 1(Disk Mirroring):是兩個一模一樣的disk，一個是當作備份用，如果主disk的資料受損就從mirror copy過去&lt;br&gt;RAID 2: 把資料拆到以bit為單位分散的存在disk內。並用E-bit來做Error correction。拆到以bit為單位的話假設有n個disk則要讀任何資料理論上可以有n倍快。但是太複雜的設計導致實際上raid2並沒有在使用。只用於memory&lt;br&gt;Raid3(Bit-Interleaved Parity):&lt;br&gt;使用N+1個disk，資料拆成bit level分散在n個disk上&lt;br&gt;用剩下來的disk存parity(前面n個disk裡相對應的位址的每個資料做XOR)&lt;br&gt;在read時就讀取所有的disk，在write時寫入每個disk並產生新的parity。遇到failure時根據parity可以判斷failure的bit。&lt;br&gt;RAID4:&lt;br&gt;跟raid3很像只是是拆成block level，每次要讀資料時只要讀存放所需資料的block就好，寫資料也只需要動到要寫的block和parity。&lt;br&gt;RAID5:&lt;br&gt;跟RAID4接近，但是把parity分散存至每個disk以避免parity disk成為在寫入時的速度的瓶頸(Raid4每個寫入都要寫parity disk，所以parity disk寫入的速度就會限制資料寫入的速度)&lt;br&gt;RAID6(P + Q Redundancy):&lt;br&gt;跟RAID5一樣但是增加兩個parity(不同演算法)，使系統容錯率更高。&lt;/p&gt;
&lt;p&gt;RAID summary:&lt;br&gt;raid可以提升performance 並增加可靠性(hot swapping，在不影響系統operate的情形下修復fault)&lt;br&gt;可靠性是raid最重要的功能。&lt;/p&gt;
&lt;p&gt;Disk I/O Benchmarks: I/O rate vs. Data rate vs. latency&lt;/p&gt;
&lt;h2 id=&#34;Chap12-Multicores-Multiprocessor&#34;&gt;&lt;a href=&#34;#Chap12-Multicores-Multiprocessor&#34; class=&#34;headerlink&#34; title=&#34;Chap12 Multicores, Multiprocessor&#34;&gt;&lt;/a&gt;Chap12 Multicores, Multiprocessor&lt;/h2&gt;&lt;p&gt;Challenges&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Partitioning&lt;/li&gt;
&lt;li&gt;Coordination&lt;/li&gt;
&lt;li&gt;Communication overheads&lt;/li&gt;
&lt;li&gt;Amdahl’s Law&lt;br&gt;平行化是有極限的&lt;br&gt;  FracX: 能被speedup的比例&lt;br&gt;  Speedup = 1 / [(FracX/SpeedupX + (1-FracX)]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;資料傳遞&lt;br&gt;Shared Memory: connect by memory&lt;br&gt;use lock to synchronize&lt;br&gt;same address space&lt;br&gt;Message Passing: connect by network&lt;br&gt;different address spaces&lt;/p&gt;
&lt;p&gt;Total network bandwidth = 所有的頻寬。bandwidth-per-link x link_no&lt;br&gt;Bisection bandwidth = 兩個部分之間的頻寬。the bandwidth between two parts of a multiprocessor&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/network-topology.png&#34; alt=&#34;netword topology&#34;&gt;&lt;/p&gt;
&lt;p&gt;Cache Coherency Problem: 在cache中的共享資料須保持一致&lt;br&gt;Protocol:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Snoopy Bus: use for small scale machines&lt;br&gt;在拿資料前，先boardcast給所有processor知道&lt;br&gt;allow multiple readers, single writer&lt;br&gt;Broadcast: BW (increased) vs. latency (decreased) tradeoff&lt;br&gt;Write Invalidate Protocol:&lt;br&gt;若寫資料，也boardcast，其他有同資料的processor設invalid bit&lt;br&gt;Write Update Protocol:&lt;br&gt;若寫資料，也boardcast，其他有同資料的processor作相同的instruction&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each block of memory is in one state:&lt;br&gt;    –Clean in all caches and up-to-date in memory&lt;br&gt;    –OR Dirty in exactly one cache&lt;br&gt;    –OR Not in any caches&lt;br&gt;Each cache block is in one state:&lt;br&gt;    if read miss, place readmiss on bus, goto shared&lt;br&gt;    if write miss, place writemiss on bus, goto exclusive&lt;br&gt;    if get read miss at bus(same block), if at exclusive, do write back and goto shared&lt;br&gt;    if get write miss at bus, goto(set) invalid&lt;br&gt;    –Shared: block can be read&lt;br&gt;    –OR Exclusive: cache has only copy, its writeable, and dirty&lt;br&gt;    –OR Invalid: block contains no data&lt;br&gt;&lt;img data-src=&#34;/img/CA/IO-BUS-fsm.png&#34; alt=&#34;State machine for bus requests for each cache block&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CA/IO-CPU-fsm.png&#34; alt=&#34;State machine for CPU requests for each cache block&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic CMP Architecture Shared last level cache&lt;/li&gt;
&lt;li&gt;Scalable CMP Architecture Tiled CMP&lt;ul&gt;
&lt;li&gt;Each tile includes processor, L1, L2, and router&lt;/li&gt;
&lt;li&gt;Physically distributed last level cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Multithreading&lt;br&gt;&lt;img data-src=&#34;/img/CA/multithreads.png&#34; alt=&#34;Multithreaded Categories p53&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;實作多執行緒&lt;ul&gt;
&lt;li&gt;有多個 registers, PC&lt;/li&gt;
&lt;li&gt;Fast switching between threads&lt;/li&gt;
&lt;li&gt;減少stall的時間浪費&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fine-grain multithreading(一個cycle做一個thread的多個cycles)&lt;/li&gt;
&lt;li&gt;Coarse-grain multithreading(只有大的stall(L2 cache miss)才切換thread)&lt;/li&gt;
&lt;li&gt;Simultaneous Multithreading&lt;ul&gt;
&lt;li&gt;used in dynamically scheduled processor&lt;/li&gt;
&lt;li&gt;同一個cycle可做多個thread&lt;/li&gt;
&lt;li&gt;dependencies handled by scheduling and register renaming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和Multiprocessing的不同：multiprocessing需多個processor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;費林分類法（Flynn’s Taxonomy），是一種高效能計算機的分類方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;單一指令流單一資料流計算機（SISD）  &lt;/li&gt;
&lt;li&gt;單一指令流多資料流計算機（SIMD）&lt;ul&gt;
&lt;li&gt;processors execute the same instruction at the same time.Each with different data address&lt;/li&gt;
&lt;li&gt;Works best for highly data-parallel applications&lt;/li&gt;
&lt;li&gt;Vector architecture&lt;/li&gt;
&lt;li&gt;Explicit statement of absence of loop-carried dependences(Reduced checking in hardware)&lt;/li&gt;
&lt;li&gt;Avoid control hazards by avoiding loops  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多指令流單一資料流計算機（MISD）&lt;/li&gt;
&lt;li&gt;多指令流多資料流計算機（MIMD）  &lt;/li&gt;
&lt;li&gt;SPMD: Single Program Multiple Data&lt;ul&gt;
&lt;li&gt;A parallel program on a MIMD computer&lt;/li&gt;
&lt;li&gt;Conditional code for different processors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GPU(Graphics Processing Units)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compute massive vertices, pixels, and general purpose data&lt;/li&gt;
&lt;li&gt;High availability&lt;/li&gt;
&lt;li&gt;High computing performance&lt;/li&gt;
&lt;li&gt;Low price of computing capability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;General-Purpose computing on GPU (GPGPU)&lt;br&gt;用處理圖形任務的圖形處理器來計算原本由中央處理器處理的通用計算任務，這些通用計算常常與圖形處理沒有任何關係。由於現代圖形處理器強大的並行處理能力和可程式流水線，令流處理器可以處理非圖形數據。特別在面對單指令流多數據流（SIMD），且數據處理的運算量遠大於數據調度和傳輸的需要時，通用圖形處理器在性能上大大超越了傳統的中央處理器應用程式。&lt;/p&gt;
&lt;p&gt;GPGPU programming models&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NVIDIA’s CUDA&lt;/li&gt;
&lt;li&gt;AMD’s StreamSDK&lt;/li&gt;
&lt;li&gt;OpenCL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Multi-core CPU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Coarse-grain, heavyweight threads&lt;/li&gt;
&lt;li&gt;Memory latency is resolved though large on-chip caches &amp;amp; out-of-order execution&lt;br&gt;Modern GPU&lt;/li&gt;
&lt;li&gt;Fine-grain, lightweight threads&lt;/li&gt;
&lt;li&gt;Exploit thread-level parallelism for hiding latency&lt;/li&gt;
&lt;li&gt;SIMT (Single Instruction Multiple Threads)&lt;ul&gt;
&lt;li&gt;multiple independent threads(pixel, vertex, compute…) execute concurrently using a single instruction&lt;/li&gt;
&lt;li&gt;common PC value&lt;/li&gt;
&lt;li&gt;Latency Hiding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Serial/Task-parallel workloads → CPU&lt;br&gt;Graphics/Data-parallel workloads → GPU&lt;br&gt;Behaviors of the applications are different&lt;br&gt;-&amp;gt; CPU is latency sensitive, GPU is throughput oriented&lt;/p&gt;
&lt;h3 id=&#34;參考資料&#34;&gt;&lt;a href=&#34;#參考資料&#34; class=&#34;headerlink&#34; title=&#34;參考資料&#34;&gt;&lt;/a&gt;參考資料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CA_by_b95015.doc&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://gitqwerty777.github.io/computer-architecture1/</guid>
            <title>計算機結構(上)</title>
            <link>http://gitqwerty777.github.io/computer-architecture1/</link>
            <category>計算機結構</category>
            <pubDate>Wed, 24 Sep 2014 17:25:34 +0800</pubDate>
            <description><![CDATA[ &lt;!-- RENEW: --&gt;

&lt;h2 id=&#34;Chap01-Introduction&#34;&gt;&lt;a href=&#34;#Chap01-Introduction&#34; class=&#34;headerlink&#34; title=&#34;Chap01 Introduction&#34;&gt;&lt;/a&gt;Chap01 Introduction&lt;/h2&gt;&lt;h3 id=&#34;What-can-we-learn&#34;&gt;&lt;a href=&#34;#What-can-we-learn&#34; class=&#34;headerlink&#34; title=&#34;What can we learn&#34;&gt;&lt;/a&gt;What can we learn&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;How programs finally executed on hardware&lt;/li&gt;
&lt;li&gt;How to write an efficient program&lt;/li&gt;
&lt;li&gt;How hardware and software work well together&lt;/li&gt;
&lt;li&gt;How to improve hardware performance&lt;br&gt;&lt;img data-src=&#34;/img/CA/2N0mDJJ.png&#34; alt=&#34;&#34;&gt;&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;What really matters is the functioning of the complete system, hardware, runtime system, compiler, operating system, and application&lt;br&gt;“In networking, this is called the “End to End argument” — H&amp;amp;P&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Why-need-to-take-this-course&#34;&gt;&lt;a href=&#34;#Why-need-to-take-this-course&#34; class=&#34;headerlink&#34; title=&#34;Why need to take this course&#34;&gt;&lt;/a&gt;Why need to take this course&lt;/h3&gt;&lt;p&gt;You will be able to answer the following questions:&lt;br&gt;&lt;strong&gt;Q1: How can I write a program with good performance?code B perform better than code A?&lt;/strong&gt;&lt;br&gt;(I don’t know why)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Code A
for (i = 0; i &amp;lt; N; i = i+1)
    for (j = 0; j &amp;lt; N; j = j+1)
        {r = 0;
            for (k = 0; k &amp;lt; N; k = k+1)
            {
                r = r + y[i][k]*z[k][j];
            };
            x[i][j] = r;
        };
========
Code B
for (jj = 0; jj &amp;lt; N; jj = jj+B)
    for (kk = 0; kk &amp;lt; N; kk = kk+B)
        for (i = 0; i &amp;lt; N; i = i+1)
            for (j = jj; j &amp;lt; min(jj+B-1,N); j = j+1)
            {
                r = 0;
                for (k = kk; k &amp;lt; min(kk+B-1,N); k = k+1)
                {
                    r = r + y[i][k]*z[k][j];
                }
                x[i][j] = x[i][j] + r;
            };&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Q2: CPU frequency ？ Performance&lt;/strong&gt;&lt;br&gt;Ans at Chap02&lt;br&gt;&lt;strong&gt;Q3: Why do Nvidia GPUs get so much attention today?&lt;/strong&gt;&lt;br&gt;Heterogeneous(異質) Computing : Integrated CPU/GPU&lt;br&gt;&lt;img data-src=&#34;/img/CA/MZa4WQV.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Post-PC-Era&#34;&gt;&lt;a href=&#34;#Post-PC-Era&#34; class=&#34;headerlink&#34; title=&#34;Post PC Era&#34;&gt;&lt;/a&gt;Post PC Era&lt;/h3&gt;&lt;p&gt;資訊界：小魚吃大魚&lt;br&gt;&lt;img data-src=&#34;/img/CA/XGJt3Qu.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CA/XXVfz5O.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ex. Cloud computing  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Software as a Service (SaaS)&lt;/li&gt;
&lt;li&gt;Amazon and Google&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Chip-War-Big-core-or-Small-core&#34;&gt;&lt;a href=&#34;#Chip-War-Big-core-or-Small-core&#34; class=&#34;headerlink&#34; title=&#34;Chip War: Big core or Small core&#34;&gt;&lt;/a&gt;Chip War: Big core or Small core&lt;/h3&gt;&lt;p&gt;Workload changes in data centers&lt;br&gt;Past: databases, financial services&lt;br&gt;Now: web service, cloud computing (accessing mails, photos, facebooks, etc)&lt;br&gt;=&amp;gt; Simple tasks &amp;amp; large amount of parallel tasks&lt;br&gt;=&amp;gt; Small Core is better&lt;/p&gt;
&lt;p&gt;Ex. ARM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Founded at the year of 1990, in Cambridge, England&lt;/li&gt;
&lt;li&gt;Co-founded by Apple &amp;amp; Acron&lt;/li&gt;
&lt;li&gt;Emphasize low-power since day one&lt;/li&gt;
&lt;li&gt;First low-power, 32 bit mobile processor&lt;/li&gt;
&lt;li&gt;sells designs(IP license) instead of chips&lt;br&gt;&lt;img data-src=&#34;/img/CA/573HpxE.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CA/3Teh9R3.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Inside-the-Processor-CPU&#34;&gt;&lt;a href=&#34;#Inside-the-Processor-CPU&#34; class=&#34;headerlink&#34; title=&#34;Inside the Processor (CPU)&#34;&gt;&lt;/a&gt;Inside the Processor (CPU)&lt;/h3&gt;&lt;p&gt;-Datapath: performs operations on data&lt;br&gt;-Control: sequences datapath, memory, …&lt;br&gt;-Cache memory&lt;br&gt;    -Small fast SRAM memory for immediate access to data&lt;/p&gt;
&lt;h3 id=&#34;Moore’s-Law-1965&#34;&gt;&lt;a href=&#34;#Moore’s-Law-1965&#34; class=&#34;headerlink&#34; title=&#34;Moore’s Law (1965)&#34;&gt;&lt;/a&gt;Moore’s Law (1965)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Gordon Moore, Intel founder&lt;/li&gt;
&lt;li&gt;“The density of transistors in an integrated circuit will double &lt;strong&gt;every year&lt;/strong&gt;.”&lt;/li&gt;
&lt;li&gt;Reality&lt;ul&gt;
&lt;li&gt;The density of silicon chips doubles &lt;strong&gt;every 18 months&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Uniprocessor-Performance&#34;&gt;&lt;a href=&#34;#Uniprocessor-Performance&#34; class=&#34;headerlink&#34; title=&#34;Uniprocessor Performance&#34;&gt;&lt;/a&gt;Uniprocessor Performance&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;&#34; alt=&#34;uni p&#34;&gt;&lt;br&gt;VAX : 25%/year 1978 to 1986&lt;br&gt;RISC + x86: 52%/year 1986 to 2002&lt;br&gt;RISC + x86: 20%/year 2002 to present&lt;/p&gt;
&lt;h3 id=&#34;Concept-Change&#34;&gt;&lt;a href=&#34;#Concept-Change&#34; class=&#34;headerlink&#34; title=&#34;Concept Change&#34;&gt;&lt;/a&gt;Concept Change&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Power expensive&lt;/strong&gt;,** Transistors free** (Can put more on chip than can afford to turn on)&lt;ul&gt;
&lt;li&gt;so hot that make low efficiency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;law of diminishing returns&lt;/strong&gt;(收益遞減) on more HW for ILP( Instruction Level Parallelism, 指令層級平行)&lt;ul&gt;
&lt;li&gt;愈平行，效率提升的投資投酬愈少(control overhead)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory slow&lt;/strong&gt;,** CPU fast** (200 clock cycles to DRAM memory, 4 clocks for multiply)&lt;/li&gt;
&lt;li&gt;Power Wall + ILP Wall + Memory Wall = CPU Wall&lt;/li&gt;
&lt;li&gt;Uniprocessor performance 2X / 1.5 yrs -&amp;gt; &lt;strong&gt;multiple cores&lt;/strong&gt; (2X processors per chip / 2 years)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU constrained by power, instruction-level parallelism, memory latency&lt;br&gt;&lt;img data-src=&#34;/img/CA/V9Q8UOl.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;CPU-history&#34;&gt;&lt;a href=&#34;#CPU-history&#34; class=&#34;headerlink&#34; title=&#34;CPU history&#34;&gt;&lt;/a&gt;CPU history&lt;/h3&gt;&lt;p&gt;8086 Introduced x86 ISA 1978&lt;br&gt;80286 Virtual memory 1982&lt;br&gt;80386 32-bit processor (1985)&lt;br&gt;80486 Pipelining Floating point unit 8 KB cache (1989)&lt;br&gt;Pentium Superscalar (1993)&lt;br&gt;Pentium Pro / II / III  Dynamic execution Multimedia instructions 1995-9&lt;br&gt;Pentium 4 HyperThreading Deep pipeline (2001)&lt;br&gt;Pentium D (2005) Dual core 2 Pentium 4 cores&lt;br&gt;AMD big.LITTLE 大核+小核&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy50ZWNoYmFuZy5jb20vcG9zdHMvMTUwMDMtYXJtLW91ci10ZWNobm9sb2d5LXRoYW4tdGhlaXItcml2YWxzLWFoZWFkLW9mLXR3by1nZW5lcmF0aW9ucw==&#34;&gt;AMD big.LITTLE&lt;i class=&#34;fa fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-Design-Principle-for-Computer-Architecture-System&#34;&gt;&lt;a href=&#34;#8-Design-Principle-for-Computer-Architecture-System&#34; class=&#34;headerlink&#34; title=&#34;8 Design Principle for Computer Architecture/System&#34;&gt;&lt;/a&gt;8 Design Principle for Computer Architecture/System&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Design for Moore’s Law&lt;/li&gt;
&lt;li&gt;Use abstraction to simplify design&lt;/li&gt;
&lt;li&gt;Make the common case fast&lt;/li&gt;
&lt;li&gt;Performance via parallelism&lt;/li&gt;
&lt;li&gt;Performance via pipelining&lt;/li&gt;
&lt;li&gt;Performance via prediction&lt;/li&gt;
&lt;li&gt;Hierarchy of memories&lt;/li&gt;
&lt;li&gt;Dependability via redundancy(多餘使其安全)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Chap02-Performance-Power-Cost&#34;&gt;&lt;a href=&#34;#Chap02-Performance-Power-Cost&#34; class=&#34;headerlink&#34; title=&#34;Chap02 Performance/Power/Cost&#34;&gt;&lt;/a&gt;Chap02 Performance/Power/Cost&lt;/h2&gt;&lt;p&gt;How to measure, report, and summarize performance/power/cost?  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Metric(度量)&lt;/li&gt;
&lt;li&gt;Benchmark(基準)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Two-Notions-of-“Performance”&#34;&gt;&lt;a href=&#34;#Two-Notions-of-“Performance”&#34; class=&#34;headerlink&#34; title=&#34;Two Notions of “Performance”&#34;&gt;&lt;/a&gt;Two Notions of “Performance”&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Response Time (latency)&lt;/li&gt;
&lt;li&gt;Throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-&amp;gt; We focus on response time&lt;/p&gt;
&lt;h3 id=&#34;Metrics-for-Performance-Evaluation&#34;&gt;&lt;a href=&#34;#Metrics-for-Performance-Evaluation&#34; class=&#34;headerlink&#34; title=&#34;Metrics for Performance Evaluation&#34;&gt;&lt;/a&gt;Metrics for Performance Evaluation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Program execution time(Elapsed time經過時間)&lt;ul&gt;
&lt;li&gt;Total time to complete a task, including disk access, I/O, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU execution time(使用CPU的時間)&lt;ul&gt;
&lt;li&gt;doesn’t count I/O or time spent running other programs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Our Focus: user CPU time(without system CPU time)&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;time spent executing the lines of code that are “in” program&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;performance(x) = 1 / execution_time(x)&lt;/p&gt;
&lt;p&gt;For Embedded System  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hard real time&lt;ul&gt;
&lt;li&gt;A fixed bound on the time to respond to or process an event&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Soft real time(寬鬆)&lt;ul&gt;
&lt;li&gt;An average response or a response within a limited time &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CPU-performance&#34;&gt;&lt;a href=&#34;#CPU-performance&#34; class=&#34;headerlink&#34; title=&#34;CPU performance&#34;&gt;&lt;/a&gt;CPU performance&lt;/h3&gt;&lt;p&gt;CPU time&lt;br&gt;= CPU clockcycles x Clockcycle time&lt;br&gt;= CPU clockcycles / clockrate&lt;br&gt;(Because Clock Cycles = Instruction Count x Cycles per Instruction )&lt;br&gt;= Instruction Count x Cycles per Instruction x Clockcycle time  &lt;/p&gt;
&lt;p&gt;Instruction Count of program is determined by program, ISA and compiler&lt;br&gt;cycles per instruction is determined by CPU hardware&lt;/p&gt;
&lt;p&gt;different instruction may have different CPI(Clocks Per Instruction)&lt;br&gt;-&amp;gt; use weighted average CPI(加權平均)&lt;/p&gt;
&lt;p&gt;Aspects of CPU Performance&lt;br&gt;&lt;img data-src=&#34;/img/CA/CJkqLMX.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Chap01 Q2: CPU frequency(時脈) is not fully related to performance&lt;/p&gt;
&lt;h3 id=&#34;MIPS&#34;&gt;&lt;a href=&#34;#MIPS&#34; class=&#34;headerlink&#34; title=&#34;MIPS&#34;&gt;&lt;/a&gt;MIPS&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Millions of Instructions Per Second&lt;/li&gt;
&lt;li&gt;= Clock Rate / (CPI * 10^6)  &lt;/li&gt;
&lt;li&gt;Can’t be performance metric(CPI varies between programs)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CMOS-IC-power-performance&#34;&gt;&lt;a href=&#34;#CMOS-IC-power-performance&#34; class=&#34;headerlink&#34; title=&#34;CMOS IC power performance&#34;&gt;&lt;/a&gt;CMOS IC power performance&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CA/BeoKq0T.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;$V ∝ Frequency$ =&amp;gt; $power ∝ V^3$&lt;br&gt;high ascending rate &lt;/p&gt;
&lt;p&gt;dynamic energy: energy that is consumed when transistors switch states from 0 to 1 and vice versa. It depends on the capacitive loading of each transistor and the voltage applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Energy ∝ Capacitive load  x Voltage^2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Why is Multi-Core Good for Energy-Efficiency?&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CA/4lLg4I9.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;only use 1/4 power&lt;/p&gt;
&lt;p&gt;Requires explicitly parallel programming. Hard to do because  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Programming for performance&lt;/li&gt;
&lt;li&gt;Load balancing&lt;/li&gt;
&lt;li&gt;Optimizing communication and synchronization&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Manufacturing-ICs&#34;&gt;&lt;a href=&#34;#Manufacturing-ICs&#34; class=&#34;headerlink&#34; title=&#34;Manufacturing ICs&#34;&gt;&lt;/a&gt;Manufacturing ICs&lt;/h3&gt;&lt;p&gt;Yield(良率): proportion of working dies(晶片) per wafer&lt;br&gt;Nonlinear relation to area and defect rate&lt;br&gt;&lt;img data-src=&#34;/img/CA/hkO62eV.png&#34; alt=&#34;Yield&#34;&gt;  &lt;/p&gt;
&lt;h3 id=&#34;Benchmark&#34;&gt;&lt;a href=&#34;#Benchmark&#34; class=&#34;headerlink&#34; title=&#34;Benchmark&#34;&gt;&lt;/a&gt;Benchmark&lt;/h3&gt;&lt;h4 id=&#34;SPEC-benchmark&#34;&gt;&lt;a href=&#34;#SPEC-benchmark&#34; class=&#34;headerlink&#34; title=&#34;SPEC benchmark&#34;&gt;&lt;/a&gt;SPEC benchmark&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Standard Performance Evaluation Corp. (SPEC)&lt;ul&gt;
&lt;li&gt;Develops benchmarks for CPU, I/O, Web, …&lt;/li&gt;
&lt;li&gt;CPU Benchmark  &lt;ul&gt;
&lt;li&gt;Programs to simulate actual workload&lt;/li&gt;
&lt;li&gt;focuses on CPU performance(a little I/O)&lt;/li&gt;
&lt;li&gt;Test both integer and floating point applications&lt;br&gt;CINT (integer) and CFP (floating-point)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SPECRatio&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Normalize&lt;/strong&gt; execution times to reference computer&lt;br&gt;performance = time on standard computer/ time on computer being rated&lt;br&gt;&lt;img data-src=&#34;/img/CA/xfEcDxV.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;Since ratios, geometric mean is proper&lt;/p&gt;
&lt;h4 id=&#34;Power-Benchmark&#34;&gt;&lt;a href=&#34;#Power-Benchmark&#34; class=&#34;headerlink&#34; title=&#34;Power Benchmark&#34;&gt;&lt;/a&gt;Power Benchmark&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Power consumption of server at different workload levels(不同的工作量下，平均的工作效能)&lt;/li&gt;
&lt;li&gt;Report power consumption of servers at different workload levels, divided into 10% increments&lt;/li&gt;
&lt;li&gt;Performance: ssj_ops/sec(每秒完成的事務數)&lt;/li&gt;
&lt;li&gt;Power: Watts (Joules/sec)&lt;br&gt;&lt;img data-src=&#34;/img/CA/RwlzFoo.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Amdahl’s Law&lt;br&gt;程式的平行化只能將執行時間縮短到一定程度(因為分散運算的overhead)&lt;br&gt;&lt;img data-src=&#34;/img/CA/vSJTU7L.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Low Power at Idle(x)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At 100% load: 295W&lt;/li&gt;
&lt;li&gt;At 50% load: 246W (83%)&lt;/li&gt;
&lt;li&gt;At 10% load: 180W (61%)  &lt;/li&gt;
&lt;li&gt;not porportional!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=&amp;gt; In general, the more load, the better power consumption rate&lt;br&gt;=&amp;gt; Consider designing processors to make power proportional to load&lt;/p&gt;
&lt;h2 id=&#34;Chap03-Instruction-Set-Architecture-ISA&#34;&gt;&lt;a href=&#34;#Chap03-Instruction-Set-Architecture-ISA&#34; class=&#34;headerlink&#34; title=&#34;Chap03 Instruction Set Architecture(ISA)&#34;&gt;&lt;/a&gt;Chap03 Instruction Set Architecture(ISA)&lt;/h2&gt;&lt;p&gt;Definition: Instruction set provides an layer of abstraction to programmers&lt;br&gt;&lt;img data-src=&#34;/img/CA/ev3Iazm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ISA-Design-Principle&#34;&gt;&lt;a href=&#34;#ISA-Design-Principle&#34; class=&#34;headerlink&#34; title=&#34;ISA Design Principle&#34;&gt;&lt;/a&gt;ISA Design Principle&lt;/h3&gt;&lt;p&gt;makes it easy to build the hardware and the compiler while maximizing performance and minimizing cost.&lt;/p&gt;
&lt;p&gt;Interface Design&lt;br&gt;(portability, compatibility, generality)&lt;br&gt;(convenient at high level , efficient in low level)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/1nBfGuE.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Design-Principles&#34;&gt;&lt;a href=&#34;#Design-Principles&#34; class=&#34;headerlink&#34; title=&#34;Design Principles&#34;&gt;&lt;/a&gt;Design Principles&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Design Principle 1: Simplicity favors regularity(All operation takes three operands)&lt;/li&gt;
&lt;li&gt;Design Principle 2: Smaller is faster(MIPS only 32 register)&lt;/li&gt;
&lt;li&gt;Design Principle 3: Make the common thing fast(addi)&lt;/li&gt;
&lt;li&gt;Design Principle 4: Good design demands good compromises(妥協)(three format of instruction code)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;MIPS-Instruction-Set&#34;&gt;&lt;a href=&#34;#MIPS-Instruction-Set&#34; class=&#34;headerlink&#34; title=&#34;MIPS Instruction Set&#34;&gt;&lt;/a&gt;MIPS Instruction Set&lt;/h3&gt;&lt;p&gt;Stanford MIPS be Memory are referenced with byte addresses in MIPScommercialized&lt;br&gt;a kind of RISC精簡指令集(Reduced Instruction Set Computing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;31個 32-bit integer registers (R0 = const 0)&lt;br&gt;&lt;img data-src=&#34;/img/CA/VRdEFJz.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;32個 32-bit floating-point registers&lt;/li&gt;
&lt;li&gt;32-bit HI, LO, PC (program counter) – internal, can’t modify&lt;br&gt;Memory are referenced with byte addresses in MIPS&lt;br&gt;1 word = 4 byte&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;意義&lt;/th&gt;
&lt;th&gt;備註&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;add Ra Rb Rc&lt;/td&gt;
&lt;td&gt;Ra =Rb + Rc&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load Ra A&lt;/td&gt;
&lt;td&gt;Ra =mem[A]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;store Ra A&lt;/td&gt;
&lt;td&gt;mem[A] =Ra&lt;/td&gt;
&lt;td&gt;Memory are referenced with byte addresses in MIPS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Data transfer instructions&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lw ＄t0, 8 (＄s3)&lt;/td&gt;
&lt;td&gt;t0 = mem[8+reg[＄s3]]&lt;/td&gt;
&lt;td&gt;lw dest offset base, offset must be constant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ex. &lt;img data-src=&#34;/img/CA/c0XyK9w.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sw ＄t0, 8 (＄s3)&lt;/td&gt;
&lt;td&gt;mem[8+reg[＄s3]]= ＄t0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;addi ＄s3, ＄s3, 4&lt;/td&gt;
&lt;td&gt;add constant value&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;srl ＄10, ＄16, 4&lt;/td&gt;
&lt;td&gt;＄t2 = ＄s0 &amp;gt;&amp;gt; 4 bits&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sll ＄10, ＄16, 4&lt;/td&gt;
&lt;td&gt;＄t2 = ＄s0 &amp;lt;&amp;lt; 4 bits&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rs fill 0 because unused&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;or ＄t0, ＄t1, ＄t2&lt;/td&gt;
&lt;td&gt;＄t0 = ＄t1 | ＄t2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ori ＄6, ＄6, 0x00ff&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;and ＄t0, ＄t1, ＄t2&lt;/td&gt;
&lt;td&gt;＄t0 = ＄t1 &amp;amp; ＄t2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;andi ＄6, ＄6, 0x0000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nor ＄t0, ＄t1, ＄t3&lt;/td&gt;
&lt;td&gt;t0 = ~(＄t1&lt;/td&gt;
&lt;td&gt;＄ t3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(nor ＄t0, ＄t1, ＄t3) = ~(＄t1), if ＄t3 =&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~(A) = 1 if A = 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~(A) = 0 if A != 0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;lui $t0, 1010101010101010 # load upper immediate
// that is: 1010101010101010 0000000000000000&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mult rs, rt&lt;br&gt;Multiplying two 32-bit numbers can yield a 64-bit number.&lt;br&gt;higher 32 bits are stored in HI&lt;br&gt;lower 32 bits are stored in LO&lt;br&gt;MFHI rd –  ＄rd = HI&lt;br&gt;MFLO rd –  ＄rd = LO  &lt;/p&gt;
&lt;p&gt;div rs, rt | rs / rt&lt;br&gt;Quotient stored in Lo&lt;br&gt;Remainder stored in Hi   &lt;/p&gt;
&lt;p&gt;Branch instructions&lt;br&gt;Conditional branches&lt;br&gt;beq reg1, reg2, L1&lt;br&gt;Go to statement L1 if [reg1] == [reg2]&lt;br&gt;bne reg1, reg2, L2&lt;br&gt;Go to statement L2 if [reg1] != [reg2]&lt;br&gt;Unconditional branches&lt;br&gt;j L1&lt;br&gt;&lt;img data-src=&#34;/img/CA/ugemo7v.png&#34; alt=&#34;&#34;&gt;   &lt;/p&gt;
&lt;p&gt;jr(jump register)&lt;br&gt;unconditional jump to the address stored in a register&lt;br&gt;Provides full 32bits address&lt;br&gt;&lt;img data-src=&#34;/img/CA/BQpStOr.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Use J for calling subroutines&lt;br&gt;Use Jal for calling functions&lt;br&gt;Use Jr for ending a subroutine by jumping to the return address (ra)&lt;/p&gt;
&lt;p&gt;slt reg1, reg2, reg3&lt;br&gt;=&amp;gt; if reg1 = (reg2 &amp;lt; reg3) ? 1 : 0;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;move&lt;/code&gt; copies a value from one register to another&lt;/p&gt;
&lt;p&gt;Byte order: Big Endian vs. Little Endian&lt;br&gt;Big endian(順序, 一般數字寫法): byte 0 is most significant bits e.g., IBM/360/370, Motorola 68K, MIPS, Sparc, HP PA&lt;br&gt;Little endian(逆序): byte 0 is least significant bits e.g., Intel 80x86, DEC Vax, DEC Alpha&lt;br&gt;&lt;img data-src=&#34;/img/CA/RiImWlu.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Alignment&lt;br&gt;object on the address that is multiple of their size(一次讀取大小的倍數)&lt;br&gt;&lt;img data-src=&#34;/img/CA/kaceTao.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Stored-Program Concept&lt;br&gt;Computers built on 2 key principles:  &lt;/p&gt;
&lt;p&gt;1) Instructions are represented as numbers&lt;br&gt;2) entire programs can be stored in memory to be read or written just like numbers  &lt;/p&gt;
&lt;p&gt;Shift is faster than multiplication&lt;br&gt;=&amp;gt; Multiplying by 4 is the same as shifting left by 2:&lt;/p&gt;
&lt;p&gt;•Fetch instruction from mem [PC]&lt;br&gt;•without decision making instruction&lt;br&gt;    •next instruction = mem [PC + instruction_size]&lt;/p&gt;
&lt;h3 id=&#34;MIPS-Instruction-Format&#34;&gt;&lt;a href=&#34;#MIPS-Instruction-Format&#34; class=&#34;headerlink&#34; title=&#34;MIPS Instruction Format&#34;&gt;&lt;/a&gt;MIPS Instruction Format&lt;/h3&gt;&lt;p&gt;instruction code - 32bit&lt;br&gt;&lt;img data-src=&#34;/img/CA/MeKGSy9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;R-type&#34;&gt;&lt;a href=&#34;#R-type&#34; class=&#34;headerlink&#34; title=&#34;R-type&#34;&gt;&lt;/a&gt;R-type&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;rs, rt = source register, rd = destination register&lt;ul&gt;
&lt;li&gt;32個register =&amp;gt; 5bit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shamt: shift amount&lt;ul&gt;
&lt;li&gt;filling 0 when unused&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;func: function field(same operate code with different function code can looked as different argument) &lt;ul&gt;
&lt;li&gt;Ex. &lt;code&gt;add&lt;/code&gt;,&lt;code&gt;addu&lt;/code&gt;, &lt;code&gt;addi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;I-type&#34;&gt;&lt;a href=&#34;#I-type&#34; class=&#34;headerlink&#34; title=&#34;I-type&#34;&gt;&lt;/a&gt;I-type&lt;/h4&gt;&lt;p&gt;for those have &lt;strong&gt;constant&lt;/strong&gt; argument(immediate value)&lt;br&gt;&lt;img data-src=&#34;/img/CA/MCxQVaC.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;first example, rs = ＄2(source) rt = ＄1(destination)&lt;/p&gt;
&lt;p&gt;PC addressing mode&lt;br&gt;New PC = PC + 4(auto go to next instruction) + Immediate x 4&lt;/p&gt;
&lt;p&gt;if want to jump farther than 16bit &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bne s1 s2 L2 
jump L1 # equals to beq s1 s2 L1, but jump can go farther
L2:&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;J-type&#34;&gt;&lt;a href=&#34;#J-type&#34; class=&#34;headerlink&#34; title=&#34;J-type&#34;&gt;&lt;/a&gt;J-type&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CA/j.png&#34; alt=&#34;j type&#34;&gt;&lt;/p&gt;
&lt;p&gt;goto absolute address(I-type is relative address)&lt;br&gt;equal to immediate in the middle of the program counter address&lt;br&gt;&lt;img data-src=&#34;/img/CA/add2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;指令表&#34;&gt;&lt;a href=&#34;#指令表&#34; class=&#34;headerlink&#34; title=&#34;指令表&#34;&gt;&lt;/a&gt;指令表&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CA/com.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CA/comm2.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CA/comm3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;function&#34;&gt;&lt;a href=&#34;#function&#34; class=&#34;headerlink&#34; title=&#34;function&#34;&gt;&lt;/a&gt;function&lt;/h3&gt;&lt;p&gt;pass value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;＄a0 ~ ＄a3 : 4 arguments &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if # of parameters is larger than 4 – store to the stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;＄v0 ~ ＄v1 : 2 return values&lt;br&gt;preserve register values of caller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stack&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Caller-save register &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caller saved register: 由Caller負責清理或存入stack frame&lt;ul&gt;
&lt;li&gt;hold temporary quantities that need not be preserved across calls&lt;/li&gt;
&lt;li&gt;Caller先備份，所以callee便可直接使用caller-save register&lt;/li&gt;
&lt;li&gt;＄t0~t7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Callee saved register: 由Callee負責清理或存入stack&lt;ul&gt;
&lt;li&gt;hold values that should be preserved across calls(caller還需要用, callee用的時候要先備份)&lt;/li&gt;
&lt;li&gt;callee should save them and restore them before returning to the caller&lt;/li&gt;
&lt;li&gt;＄s0~s7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;call function: &lt;code&gt;jal&lt;/code&gt; procedure_address (jump and link)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Store the return address (PC + 4) at ＄ra&lt;/li&gt;
&lt;li&gt;set PC = procedure_address&lt;br&gt;return : jr ＄ra&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Frame pointer points to the first word of the procedure frame&lt;/p&gt;
&lt;p&gt;procedure call stack&lt;br&gt;&lt;img data-src=&#34;&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;&#34; alt=&#34;memory layout&#34;&gt;&lt;br&gt;Memory layout&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text: code&lt;/li&gt;
&lt;li&gt;static data: global variable&lt;ul&gt;
&lt;li&gt;＄gp is the offset of static data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dynamic data: heap&lt;ul&gt;
&lt;li&gt;malloc, new&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stack: automatic storage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Caller Steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pass the argument ＄a0,＄a1 &lt;/li&gt;
&lt;li&gt;save caller-saved registers&lt;/li&gt;
&lt;li&gt;jal&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Callee Steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;establish stack frame ＄sp&lt;br&gt;subi ＄sp, ＄sp &lt;frame-size&gt;&lt;/li&gt;
&lt;li&gt;saved callee saved registers&lt;br&gt;Ex. ＄ra, ＄fp, ＄s0-＄s7&lt;/li&gt;
&lt;li&gt;establish frame pointer ＄fp&lt;br&gt;Add ＄fp, ＄sp, &lt;frame-size&gt;-4&lt;/li&gt;
&lt;li&gt;Do Something&lt;/li&gt;
&lt;li&gt;put returned values in ＄v0, ＄v1&lt;/li&gt;
&lt;li&gt;restore(load) callee-saved registers&lt;/li&gt;
&lt;li&gt;pop the stack&lt;/li&gt;
&lt;li&gt;return: jr ＄ra&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/reg.png&#34; alt=&#34;registers&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;&#34; alt=&#34;nested procedure&#34;&gt;&lt;/p&gt;
&lt;p&gt;ASCII (American Standard Code for Information Interchange)&lt;br&gt;8 bits/character&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`lb sb`&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Unicode (Universal Encoding)&lt;br&gt;16 bits/character&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`lf sf`&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;performance&lt;/p&gt;
&lt;figure class=&#34;highlight angelscript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Clear1(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;array&lt;/span&gt;[ ], &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i&amp;lt; size; i+= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;array&lt;/span&gt;[i] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Clear &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; *&lt;span class=&#34;built_in&#34;&gt;array&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; *p,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (p = &amp;amp;&lt;span class=&#34;built_in&#34;&gt;array&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]; p &amp;lt; &amp;amp;&lt;span class=&#34;built_in&#34;&gt;array&lt;/span&gt;[size]; p = p+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	*p = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Clear2 &amp;gt; Clear1&lt;br&gt;pointer is faster than fetching value&lt;/p&gt;
&lt;figure class=&#34;highlight mipsasm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;move &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t0&lt;/span&gt;, ＄&lt;span class=&#34;built_in&#34;&gt;a0&lt;/span&gt; 			&lt;span class=&#34;comment&#34;&gt;# p = &amp;amp;array[0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;sll &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t1&lt;/span&gt;, ＄&lt;span class=&#34;built_in&#34;&gt;a1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; 		&lt;span class=&#34;comment&#34;&gt;# t1 = size x 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t2&lt;/span&gt;, ＄&lt;span class=&#34;built_in&#34;&gt;a0&lt;/span&gt;, ＄&lt;span class=&#34;built_in&#34;&gt;t1&lt;/span&gt;		&lt;span class=&#34;comment&#34;&gt;# t2 = &amp;amp;array[size]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;symbol&#34;&gt;Loop2:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;sw &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;zero&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;(＄&lt;span class=&#34;built_in&#34;&gt;t0&lt;/span&gt;) 		&lt;span class=&#34;comment&#34;&gt;# memory[p] = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;addi &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t0&lt;/span&gt;, ＄&lt;span class=&#34;built_in&#34;&gt;t0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; 		&lt;span class=&#34;comment&#34;&gt;# p= p+4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;slt &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t3&lt;/span&gt;, ＄&lt;span class=&#34;built_in&#34;&gt;t0&lt;/span&gt;, ＄&lt;span class=&#34;built_in&#34;&gt;t2&lt;/span&gt; 		&lt;span class=&#34;comment&#34;&gt;# compare p &amp;amp; array[size]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;bne &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t3&lt;/span&gt;, ＄&lt;span class=&#34;built_in&#34;&gt;zero&lt;/span&gt;, Loop2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Synchronization&#34;&gt;&lt;a href=&#34;#Synchronization&#34; class=&#34;headerlink&#34; title=&#34;Synchronization&#34;&gt;&lt;/a&gt;Synchronization&lt;/h2&gt;&lt;p&gt;SWAP: &lt;strong&gt;atomically&lt;/strong&gt; interchange a value in a register for a value in memory; nothing else can interpose itself between the read and the write to the memory location&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;＄S4 = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Swap (＄S4, &lt;span class=&#34;keyword&#34;&gt;Lock&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;If &lt;span class=&#34;keyword&#34;&gt;Lock&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;# change success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;enter &lt;span class=&#34;keyword&#34;&gt;critical&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;section&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Load linked: load value from rs(atomic)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`ll rt offset(rs)`&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Store conditional&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`sc rt offset(rs)`&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if location not changed since the ll , rt return 1, 否則回傳 0&lt;/p&gt;
&lt;figure class=&#34;highlight mipsasm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;swap &lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;s4&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and &lt;/span&gt;&lt;span class=&#34;built_in&#34;&gt;s1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;symbol&#34;&gt;try:&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;add &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t0&lt;/span&gt;,＄&lt;span class=&#34;built_in&#34;&gt;zero&lt;/span&gt;,＄&lt;span class=&#34;built_in&#34;&gt;s4&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;;copy exchange value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;ll &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;(＄&lt;span class=&#34;built_in&#34;&gt;s1&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;;load s1 to t1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;sc &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;(＄&lt;span class=&#34;built_in&#34;&gt;s1&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;;store t0 to s1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;beq &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;t0&lt;/span&gt;,＄&lt;span class=&#34;built_in&#34;&gt;zero&lt;/span&gt;,try &lt;span class=&#34;comment&#34;&gt;;if store fail, try again&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;add &lt;/span&gt;＄&lt;span class=&#34;built_in&#34;&gt;s4&lt;/span&gt;,＄&lt;span class=&#34;built_in&#34;&gt;zero&lt;/span&gt;,＄&lt;span class=&#34;built_in&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;;put load value in ＄s4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;MIPS-Addresssing-Mode&#34;&gt;&lt;a href=&#34;#MIPS-Addresssing-Mode&#34; class=&#34;headerlink&#34; title=&#34;MIPS Addresssing Mode&#34;&gt;&lt;/a&gt;MIPS Addresssing Mode&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Register addressing&lt;br&gt;運算對象在register&lt;br&gt;&lt;code&gt;add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Immediate addressing&lt;br&gt;運算對象是constant&lt;br&gt;&lt;code&gt;addi&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Base addressing(The argument is at MEM)&lt;br&gt;運算對象在memory&lt;br&gt;&lt;code&gt;lw&lt;/code&gt;&lt;br&gt;way to get address&lt;ol&gt;
&lt;li&gt; .data # define data&lt;br&gt; xyz:&lt;br&gt; .word 1 # some data here&lt;br&gt; …&lt;br&gt; .text # program code&lt;br&gt; …&lt;br&gt; lw $5,xyz # equals to lw ＄5, offset(＄gp)&lt;/li&gt;
&lt;li&gt; la ＄6, xyz # ＄6 = &amp;amp;xyz&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PC-relative addressing&lt;br&gt;&lt;code&gt;beq&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Pseudodirect addressing&lt;br&gt;&lt;code&gt;j 100&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;from-program-to-memory&#34;&gt;&lt;a href=&#34;#from-program-to-memory&#34; class=&#34;headerlink&#34; title=&#34;from program to memory&#34;&gt;&lt;/a&gt;from program to memory&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Program -----------&amp;gt; assembly ---------&amp;gt; object file:
          compiler            assembler
machine language module + library module ---------&amp;gt;  
                                           linker  
machine code program ---------&amp;gt; memory
                       loader&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Assembler&lt;/strong&gt;&lt;br&gt;Symbol table: translate variables into memory address&lt;br&gt;Psudoinstruction: common variation of assembly language instructions&lt;br&gt;&lt;strong&gt;Linker&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CA/exeheader.png&#34; alt=&#34;executable &#34;&gt;&lt;/p&gt;
&lt;p&gt;generate executables file header  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Place code and data modules symbolically in memory.&lt;/li&gt;
&lt;li&gt;Determine the addresses of data and instruction labels.&lt;/li&gt;
&lt;li&gt;Patch both the internal and external references&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Loader&lt;/strong&gt;&lt;br&gt;determine the size of the text and data segment&lt;br&gt;Creates an address space&lt;br&gt;Copies the instructions and data to memory&lt;br&gt;Initializes the machine registers and sets the stack pointer&lt;br&gt;Jump to a start-up routine&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dynamically Linked Libraries (DLL)&lt;/strong&gt;&lt;br&gt;Loading the whole library even if all of the library is not used =&amp;gt; libraries are not linked and loaded until the program is run, and use lazy procedure linkage&lt;/p&gt;
&lt;h3 id=&#34;java&#34;&gt;&lt;a href=&#34;#java&#34; class=&#34;headerlink&#34; title=&#34;java&#34;&gt;&lt;/a&gt;java&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CA/java.png&#34; alt=&#34;java&#34;&gt;&lt;br&gt;Java bytecode: use instruction set designed to interpret Java programs&lt;br&gt;Just In Time Compiler (JIT): compiler that operates at runtime, translating bytecodes into the native code of the compiler&lt;br&gt;Java Virtual Machine (JVM): The program that interprets Java bytecodes&lt;/p&gt;
&lt;h3 id=&#34;ARM&#34;&gt;&lt;a href=&#34;#ARM&#34; class=&#34;headerlink&#34; title=&#34;ARM&#34;&gt;&lt;/a&gt;ARM&lt;/h3&gt;&lt;p&gt;AMD64 (2003): extended architecture to 64 bits&lt;br&gt;AMD64 (announced 2007): SSE5 instructions&lt;br&gt;Intel declined to follow…&lt;/p&gt;
&lt;p&gt;Similar to MIPS&lt;br&gt;&lt;img data-src=&#34;/img/CA/armmips.png&#34; alt=&#34;arm mips&#34;&gt;&lt;br&gt;do anything for code density&lt;br&gt;include&lt;br&gt;32-bit ARM instruction&lt;br&gt;16-bit Thumb instruction&lt;br&gt;8-bit Java Instruction Set  &lt;/p&gt;
&lt;p&gt;Current program status register: Top four bits of CPSR&lt;br&gt;use for performance&lt;br&gt;N : Negative&lt;br&gt;Z : Zero&lt;br&gt;C : Carry&lt;br&gt;V : Overflow  &lt;/p&gt;
&lt;p&gt;Conditional execution&lt;br&gt;ADDEQ r0,r1,r2 =&amp;gt; r1-r2, If zero flag set then do r0 = r1 + r2&lt;/p&gt;
&lt;h3 id=&#34;Intel-x86-ISA&#34;&gt;&lt;a href=&#34;#Intel-x86-ISA&#34; class=&#34;headerlink&#34; title=&#34;Intel x86 ISA&#34;&gt;&lt;/a&gt;Intel x86 ISA&lt;/h3&gt;&lt;p&gt;History: skipped&lt;/p&gt;
&lt;p&gt;| IA-32                      | MIPS            |&lt;br&gt;| ————————– | ————— | —————– |&lt;br&gt;| RISC                       | RISC            |&lt;br&gt;| general purpose register   | 8               | 32                |&lt;br&gt;| operand operation          | 2 or 3          | 3                 |&lt;br&gt;| operations to be performed | Register-memory | register-register |&lt;br&gt;| addressing modes           | more            | less              |&lt;br&gt;| encoding                   | variable-length | fixed-length      |&lt;/p&gt;
&lt;p&gt;simple instruction -&amp;gt; higher performance&lt;br&gt;because complex instructions are hard to implement, slow down all instructions&lt;/p&gt;
&lt;p&gt;assembly code for high performance(x)&lt;br&gt;More lines of code -&amp;gt; more errors and less productivity&lt;/p&gt;
&lt;h2 id=&#34;Chap04-Building-Single-Cycle-Datapath-and-Control-Unit&#34;&gt;&lt;a href=&#34;#Chap04-Building-Single-Cycle-Datapath-and-Control-Unit&#34; class=&#34;headerlink&#34; title=&#34;Chap04 Building Single-Cycle Datapath and Control Unit&#34;&gt;&lt;/a&gt;Chap04 Building Single-Cycle Datapath and Control Unit&lt;/h2&gt;&lt;p&gt;How to Design a Processor&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Analyze instruction set =&amp;gt; datapath(include PC,… functional units) requirements&lt;/li&gt;
&lt;li&gt;Select set of datapath components and establish clocking methodology&lt;/li&gt;
&lt;li&gt;Assemble datapath&lt;/li&gt;
&lt;li&gt;Analyze &lt;strong&gt;implementation of each instruction&lt;/strong&gt; to determine control points&lt;/li&gt;
&lt;li&gt;Assemble the control logic&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Details&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;register-tranfer暫存器傳輸&lt;br&gt;RTL (Register Transfer Languages)&lt;br&gt;Ex. ADDUR[rd] &amp;lt;–R[rs] + R[rt], PC &amp;lt;–PC + 4  &lt;/li&gt;
&lt;li&gt;Combinational Elements: outputs only depend on input&lt;br&gt;Ex. ALU, MUX, Adder&lt;br&gt;Storage Elements: outputs depend on input and state(clock)&lt;br&gt;Ex. Flip-Flop, register, memory&lt;br&gt;Register&lt;br&gt;&lt;img data-src=&#34;/img/CA/regis.png&#34; alt=&#34;register graph&#34;&gt;&lt;br&gt;Edge-triggered clocking&lt;br&gt;until next edge would the value change&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Instruction Fetch Unit&lt;/strong&gt;: mem[PC]&lt;br&gt;Sequential code&lt;br&gt;PC &amp;lt;- PC + 4&lt;br&gt;Branch and Jump&lt;br&gt;PC &amp;lt;- Target addr&lt;br&gt;&lt;strong&gt;Memory Operations&lt;/strong&gt;&lt;br&gt;Mem[R[rs] + SignExt[imm16]]&lt;br&gt;sign extension: increasing the number of bits without   changing value (Ex. 10 0010 -&amp;gt; 0010 0010)&lt;br&gt;4.&lt;br&gt;Control Unit: set control flag to change the operation with the change of operation code&lt;br&gt;Control Flags&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MemWr: write memory&lt;/li&gt;
&lt;li&gt;MemtoReg: 0 =&amp;gt; use ALU output 1 =&amp;gt; use Mem value&lt;/li&gt;
&lt;li&gt;RegDst: 1 =&amp;gt; “rd” when 3 operand are all register; 0 =&amp;gt; “rt”&lt;/li&gt;
&lt;li&gt;RegWr: write to register&lt;/li&gt;
&lt;li&gt;ALUsrc: 1=&amp;gt; immed; 0=&amp;gt;regB&lt;/li&gt;
&lt;li&gt;ALUctr: “add”, “sub”&lt;/li&gt;
&lt;li&gt;PCSrc: 1=&amp;gt; PC = PC + 4; 0=&amp;gt; PC = branch target address&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;instruction&lt;/th&gt;
&lt;th&gt;MemWr&lt;/th&gt;
&lt;th&gt;MemtoReg&lt;/th&gt;
&lt;th&gt;RegDst&lt;/th&gt;
&lt;th&gt;RegWr&lt;/th&gt;
&lt;th&gt;ALUsrc&lt;/th&gt;
&lt;th&gt;ALUctr&lt;/th&gt;
&lt;th&gt;PCSrc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Add&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;add&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Load&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;add&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Store&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;add&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Branch&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;sub&lt;/td&gt;
&lt;td&gt;value(after sub)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ori&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jump&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;use k-map to make control flags simple&lt;br&gt;&lt;img data-src=&#34;/img/CA/aluctrl.png&#34; alt=&#34;ALU control&#34;&gt;&lt;br&gt;I-type: (00) add for load/store and (01) sub for beqand (10) for ori&lt;br&gt;R-type: (11, need to check funct field)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/table1.png&#34; alt=&#34;alu ctr truth table&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;/img/CA/tabl2.png&#34; alt=&#34;truth table for main&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/table3.png&#34; alt=&#34;functional unit used by instructions&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Chap05-Pipeline&#34;&gt;&lt;a href=&#34;#Chap05-Pipeline&#34; class=&#34;headerlink&#34; title=&#34;Chap05 Pipeline&#34;&gt;&lt;/a&gt;Chap05 Pipeline&lt;/h2&gt;&lt;p&gt;when CPI=1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load is too slow! -&amp;gt; Long Cycle Time&lt;/li&gt;
&lt;li&gt;Real memory is not so nice as our idealized memory&lt;ul&gt;
&lt;li&gt;cannot always get the job done in one (short) cycle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pipelining doesn’t help &lt;strong&gt;latency&lt;/strong&gt; of single task, it helps &lt;strong&gt;throughput&lt;/strong&gt; of entire workload&lt;br&gt;Multiple tasks operating simultaneously &lt;strong&gt;using different resources&lt;/strong&gt;&lt;br&gt;Pipeline rate &lt;strong&gt;limited by slowest pipeline stage&lt;/strong&gt;&lt;br&gt;Unbalanced lengths of pipe stages reduces speedup(切平均，增加效能最多)&lt;/p&gt;
&lt;p&gt;Break the instruction into smaller steps(5 steps in MIPS):&lt;br&gt;Execute each step in 1 clock cycle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instruction Fetch(Ifetch)&lt;/li&gt;
&lt;li&gt;Instruction Decode and Register Fetch(Reg/Dec)&lt;/li&gt;
&lt;li&gt;Execution, Memory Address Computation, or Branch Completion(Exec)&lt;/li&gt;
&lt;li&gt;Memory Access or R-type instruction completion(Mem)&lt;/li&gt;
&lt;li&gt;Write back to register(Wr)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;simplified: IF ID EX MEM WB&lt;/p&gt;
&lt;p&gt;The Four Stages of R-type: without Mem&lt;br&gt;The Four Stages of store: without Wr&lt;br&gt;The Three Stages of Beq: without Mem, Wr&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CA/pipe.png&#34; alt=&#34;pipe 2ns&#34;&gt;&lt;br&gt;Ideal speedup from pipelining == # of pipeline stages&lt;br&gt;(分成N段-&amp;gt;理想上，速度提升N倍)&lt;/p&gt;
&lt;h4 id=&#34;Pipeline-Hazards&#34;&gt;&lt;a href=&#34;#Pipeline-Hazards&#34; class=&#34;headerlink&#34; title=&#34;Pipeline Hazards&#34;&gt;&lt;/a&gt;Pipeline Hazards&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;structural hazards: use the same resource at the same time(Single Memory)&lt;br&gt;&lt;img data-src=&#34;/img/CA/pipe2.png&#34; alt=&#34;structure hazard&#34;&gt;&lt;/li&gt;
&lt;li&gt;data hazards: use item before it is ready(load, update)&lt;/li&gt;
&lt;li&gt;control hazards: make a decision before condition is evaluated(branch)&lt;br&gt;Can always resolve hazards by waiting&lt;br&gt;Need to detect and resolve hazards&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Way to Solve Hazards&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;structural&lt;ol&gt;
&lt;li&gt;Stall(put bubbles that do nothing)&lt;br&gt;&lt;img data-src=&#34;/img/CA/stall.png&#34; alt=&#34;stall&#34;&gt; &lt;/li&gt;
&lt;li&gt;Split instruction and data memory(2 different memories)&lt;/li&gt;
&lt;li&gt;Delay R-type’s Write by One Cycle()&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;data&lt;ol&gt;
&lt;li&gt;“Forward” result from one stage to another(算出答案後，在放入記憶體前，就先給之後的instruction使用)(可以同時read and save) &lt;/li&gt;
&lt;li&gt;Load-use data hazard: can’t solved by forward, can solved by reordering instructions, otherwise, need stall  &lt;img data-src=&#34;/img/CA/forward.png&#34; alt=&#34;lw hazard&#34;&gt;   &lt;img data-src=&#34;/img/CA/forward2.png&#34; alt=&#34;loaduse-&amp;gt;forward&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;control&lt;ol&gt;
&lt;li&gt;stall until the outcome of the branch is known&lt;/li&gt;
&lt;li&gt;solve branch earlier: put in enough extra hardware so that we can test registers, calculate the branch address, and update the PC&lt;/li&gt;
&lt;li&gt;Predict: flush if the assumption is wrong&lt;br&gt;dynamic scheme: history of branch (90% success)&lt;/li&gt;
&lt;li&gt;performance: 13% of branch instructions executed in SPECint2000, the CPI is slowdown of 1.13 versus the ideal case&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Pipelined-datapath&#34;&gt;&lt;a href=&#34;#Pipelined-datapath&#34; class=&#34;headerlink&#34; title=&#34;Pipelined datapath&#34;&gt;&lt;/a&gt;Pipelined datapath&lt;/h3&gt;&lt;p&gt;Pipeline registers&lt;br&gt;&lt;img data-src=&#34;/img/CA/pipegraph.png&#34; alt=&#34;4bar&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The registers are named between two stages&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;control-in-each-stage&#34;&gt;&lt;a href=&#34;#control-in-each-stage&#34; class=&#34;headerlink&#34; title=&#34;control in each stage&#34;&gt;&lt;/a&gt;control in each stage&lt;/h3&gt;&lt;p&gt;Pass control signals along just like the data&lt;br&gt;&lt;img data-src=&#34;/img/CA/pipectrl.png&#34; alt=&#34;control&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
