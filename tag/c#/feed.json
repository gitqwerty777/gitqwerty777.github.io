{
    "version": "https://jsonfeed.org/version/1",
    "title": "QWERTY • All posts by \"c#\" tag",
    "description": "Programming | Computer Science | Thought",
    "home_page_url": "http://gitqwerty777.github.io",
    "items": [
        {
            "id": "http://gitqwerty777.github.io/CSharp-codeconvension/",
            "url": "http://gitqwerty777.github.io/CSharp-codeconvension/",
            "title": "C# 程式碼風格指南",
            "date_published": "2020-10-22T07:00:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2MjL3Byb2dyYW1taW5nLWd1aWRlL2luc2lkZS1hLXByb2dyYW0vY29kaW5nLWNvbnZlbnRpb25z\">原文：C# Coding Conventions (C# Programming Guide)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"Naming-Conventions\"><a href=\"#Naming-Conventions\" class=\"headerlink\" title=\"Naming Conventions\"></a>Naming Conventions</h2><p>若句子太長，可以分段，結尾需為<code>.</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var currentPerformanceCounterCategory &#x3D; new System.Diagnostics.</span><br><span class=\"line\">        PerformanceCounterCategory();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Layout-Conventions\"><a href=\"#Layout-Conventions\" class=\"headerlink\" title=\"Layout Conventions\"></a>Layout Conventions</h2><ul>\n<li>四空格縮排, tabs 需要存為空格</li>\n<li>一行一個Statement/Declaration</li>\n<li>連續的行中，第二行需要多一個縮排</li>\n<li>方法的宣告和屬性的宣告中至少需要隔一行</li>\n<li>在判斷式中加上括號<ul>\n<li><code>if ((val1 &gt; val2) &amp;&amp; (val1 &gt; val3))</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Commenting-Conventions\"><a href=\"#Commenting-Conventions\" class=\"headerlink\" title=\"Commenting Conventions\"></a>Commenting Conventions</h2><ul>\n<li>將程式和註解放在不同行</li>\n<li>註解需以大寫開頭，逗號結尾，與<code>//</code>間隔一個空格<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; The following declaration creates a query. It does not run</span><br><span class=\"line\">&#x2F;&#x2F; the query.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Language-Guidelines\"><a href=\"#Language-Guidelines\" class=\"headerlink\" title=\"Language Guidelines\"></a>Language Guidelines</h2><ul>\n<li>使用字串插補(String interpolation)來連接短的字串<ul>\n<li><code>string displayName = $&quot;{nameList[n].LastName}, {nameList[n].FirstName}&quot;;</code></li>\n</ul>\n</li>\n<li>若要在迴圈中使用字串，使用<code>StringBuilder</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var phrase &#x3D; &quot;la&quot;;</span><br><span class=\"line\">var manyPhrases &#x3D; new StringBuilder();</span><br><span class=\"line\">for (var i &#x3D; 0; i &lt; 10000; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    manyPhrases.Append(phrase);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Implicitly-Typed-Local-Variables\"><a href=\"#Implicitly-Typed-Local-Variables\" class=\"headerlink\" title=\"Implicitly Typed Local Variables\"></a>Implicitly Typed Local Variables</h2><ul>\n<li>若變數的型別很明顯，使用隱式宣告<ul>\n<li><code>New</code>, 型別轉換, 基本型別等<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var var1 &#x3D; &quot;This is clearly a string.&quot;;</span><br><span class=\"line\">var var2 &#x3D; 27;</span><br><span class=\"line\">&#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">int var3 &#x3D; Convert.ToInt32(Console.ReadLine());</span><br><span class=\"line\">int var4 &#x3D; ExampleClass.ResultSoFar();</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>可以在for中使用隱式宣告，但不要在foreach中使用隱式宣告</li>\n</ul>\n<h2 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Preferred syntax. Note that you cannot use var here instead of string[].</span><br><span class=\"line\">string[] vowels1 &#x3D; &#123; &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot; &#125;;</span><br><span class=\"line\">&#x2F;&#x2F; If you use explicit instantiation, you can use var.</span><br><span class=\"line\">var vowels2 &#x3D; new string[] &#123; &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot; &#125;;</span><br><span class=\"line\">&#x2F;&#x2F; If you specify an array size, you must initialize the elements one at a time.</span><br><span class=\"line\">var vowels3 &#x3D; new string[5];</span><br><span class=\"line\">vowels3[0] &#x3D; &quot;a&quot;;</span><br><span class=\"line\">vowels3[1] &#x3D; &quot;e&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Delegates-委託\"><a href=\"#Delegates-委託\" class=\"headerlink\" title=\"Delegates(委託)\"></a>Delegates(委託)</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Define the type.</span><br><span class=\"line\">public delegate void Del(string message);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Define a method that has a matching signature.</span><br><span class=\"line\">public static void DelMethod(string str)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;DelMethod argument: &#123;0&#125;&quot;, str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; In the Main method, create an instance of Del.</span><br><span class=\"line\">&#x2F;&#x2F; Preferred: Create an instance of Del by using condensed syntax.</span><br><span class=\"line\">Del exampleDel2 &#x3D; DelMethod;</span><br><span class=\"line\">&#x2F;&#x2F; The following declaration uses the full syntax.</span><br><span class=\"line\">Del exampleDel1 &#x3D; new Del(DelMethod);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using\"><a href=\"#Using\" class=\"headerlink\" title=\"Using\"></a>Using</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Method1: try-finally statement with Dispose</span><br><span class=\"line\">Font font1 &#x3D; new Font(&quot;Arial&quot;, 10.0f);</span><br><span class=\"line\">try</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    byte charset &#x3D; font1.GdiCharSet;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">finally</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (font1 !&#x3D; null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ((IDisposable)font1).Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Method2: Using statement.</span><br><span class=\"line\">using (Font font2 &#x3D; new Font(&quot;Arial&quot;, 10.0f))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    byte charset &#x3D; font2.GdiCharSet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"amp-amp-and\"><a href=\"#amp-amp-and\" class=\"headerlink\" title=\"&amp;&amp; and ||\"></a>&amp;&amp; and ||</h2><ul>\n<li>用 <code>&amp;&amp;</code> 取代 <code>&amp;</code>, 用 <code>||</code> 取代 <code>|</code><ul>\n<li><code>&amp;&amp;</code> 會 short-circult (即不可能是True時直接return False)</li>\n<li><code>&amp;</code> 會判斷所有條件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if ((divisor !&#x3D; 0) &amp;&amp; (dividend &#x2F; divisor &gt; 0))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;Quotient: &#123;0&#125;&quot;, dividend &#x2F; divisor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;Attempted division by 0 ends up here.&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h2><ul>\n<li>使用new的時候，使用var <code>var instance1 = new ExampleClass();</code></li>\n<li>簡化Initialize<ul>\n<li><code>var instance3 = new ExampleClass { Name = &quot;Desktop&quot;, ID = 37414, Location = &quot;Redmond&quot;, Age = 2.3 };</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><ul>\n<li>使用lambda expression來產生一次性的event<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public Form2()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; You can use a lambda expression to define an event handler.</span><br><span class=\"line\">    this.Click +&#x3D; (s, e) &#x3D;&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(</span><br><span class=\"line\">                ((MouseEventArgs)e).Location.ToString());</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Using a lambda expression shortens the following traditional definition.</span><br><span class=\"line\">public Form1()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.Click +&#x3D; new EventHandler(Form1_Click);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Form1_Click(object sender, EventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MessageBox.Show(((MouseEventArgs)e).Location.ToString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h2><ul>\n<li>用類別名取得static成員 <code>ClassName.StaticMember</code><ul>\n<li>不要用繼承的類別名，直接用定義static成員的類別</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"LINQ-Queries\"><a href=\"#LINQ-Queries\" class=\"headerlink\" title=\"LINQ Queries\"></a>LINQ Queries</h2><p>使用有意義的變數名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var seattleCustomers &#x3D; from customer in customers</span><br><span class=\"line\">                       where customer.City &#x3D;&#x3D; &quot;Seattle&quot;</span><br><span class=\"line\">                       select customer.Name;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>排列在<code>from</code>下方</li>\n<li>使用多個<code>from</code>取代<code>join</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Use a compound from to access the inner sequence within each element.</span><br><span class=\"line\">var scoreQuery &#x3D; from student in students</span><br><span class=\"line\">                 from score in student.Scores</span><br><span class=\"line\">                 where score &gt; 90</span><br><span class=\"line\">                 select new &#123; Last &#x3D; student.LastName, score &#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "C#",
                "CodingStyle"
            ]
        }
    ]
}