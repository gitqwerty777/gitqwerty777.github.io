{
    "version": "https://jsonfeed.org/version/1",
    "title": "QWERTY",
    "description": "Programming | Computer Science | Thought",
    "home_page_url": "http://gitqwerty777.github.io",
    "items": [
        {
            "id": "http://gitqwerty777.github.io/how-to-make-slides/",
            "url": "http://gitqwerty777.github.io/how-to-make-slides/",
            "title": "簡報製作軟體比較",
            "date_published": "2022-03-22T03:45:23.000Z",
            "content_html": "<h2 id=\"分類\"><a href=\"#分類\" class=\"headerlink\" title=\"分類\"></a>分類</h2><ol>\n<li>編輯軟體</li>\n<li>Latex</li>\n<li>Markdown</li>\n<li>Javascript</li>\n<li>其他</li>\n</ol>\n<h2 id=\"編輯軟體\"><a href=\"#編輯軟體\" class=\"headerlink\" title=\"編輯軟體\"></a>編輯軟體</h2><ul>\n<li>優點<ul>\n<li>編輯方便</li>\n<li>功能齊全</li>\n<li>模版多</li>\n</ul>\n</li>\n<li>缺點<ul>\n<li>手動排版</li>\n<li>需要使用特定軟體才能編輯</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"軟體\"><a href=\"#軟體\" class=\"headerlink\" title=\"軟體\"></a>軟體</h3><ul>\n<li>PowerPoint</li>\n<li>Google Slides</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmV6aS5jb20veGNpdDR6YmF0NnN3L3N3ZWV0LXJlY2lwZS10by1zb2x2aW5nLXByb2JsZW1zLw==\">Prezi<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"Latex\"><a href=\"#Latex\" class=\"headerlink\" title=\"Latex\"></a>Latex</h2><ul>\n<li>優點<ul>\n<li>自訂性高</li>\n<li>寫公式、程式碼方便</li>\n</ul>\n</li>\n<li>缺點<ul>\n<li>指令過於複雜</li>\n<li>需要設定開發環境</li>\n</ul>\n</li>\n<li>模版<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3ZlcmxlYWYuY29tL2xlYXJuL2xhdGV4L0JlYW1lcg==\">Beamer<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hzdWFudGllbi9iZWFtZXJUYWl3YW4=\">BeamerTaiwan<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><ul>\n<li>優點<ul>\n<li>原始文字易於保存</li>\n<li>語法較Latex簡單</li>\n</ul>\n</li>\n<li>缺點<ul>\n<li>自訂性比Latex差</li>\n<li>難製作動畫</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"軟體-1\"><a href=\"#軟體-1\" class=\"headerlink\" title=\"軟體\"></a>軟體</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcnAtdGVhbS9tYXJwaXQ=\">Marp<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>可以寫html tag</li>\n<li>簡易的css支援</li>\n<li>動畫功能較少</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL3BtJUU3JTlBJTg0JUU3JTk0JTlGJUU3JTk0JUEyJUU1JThBJTlCJUU1JUI3JUE1JUU1JTg1JUI3JUU3JUFFJUIxLyVFNSVBNiU4MiVFNCVCRCU5NSVFNSVCRiVBQiVFOSU4MCU5RiVFNSVBRSU4QyVFNiU4OCU5MCVFNyVCMCVBMSVFNSVBMCVCMSVFNiU4RSU5MiVFNyU4OSU4OC0lRTUlQjAlODclRTclQjIlQkUlRTclQTUlOUUlRTUlQjAlODglRTYlQjMlQTglRTUlOUMlQTglRTYlQkElOTYlRTUlODIlOTklRTYlQkMlOTQlRTglQUMlOUIlRTQlQjglOEEtZWFiOGEwNjY4NzMz\">教學<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><ul>\n<li>用js擴充功能</li>\n<li>用css排版</li>\n</ul>\n<h3 id=\"軟體-2\"><a href=\"#軟體-2\" class=\"headerlink\" title=\"軟體\"></a>軟體</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXZlYWxqcy5jb20v\">Reveal.js<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>支援Markdown語法</li>\n<li><a href=\"/revealjs-markdown\">教學:Reveal.js配合Markdown</a></li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbGkuZGV2Lw==\">Slidev<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>支援Markdown語法</li>\n<li>支援類Vue語法</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbXByZXNzLmpzLm9yZy8=\">Impress.js<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>類似Prezi</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS9kZWNrLmpzLw==\">Deck.js<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2tpcmthcy5jaC9hc2NlbnNvci8j\">Ascensor<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xhbmRzbGlkZS5hZGFtemFwLmNvbS8jc2xpZGUx\">LandSlide<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>用遊戲引擎做簡報</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1VuaXR5VGVjaG5vbG9naWVzL1ByZXNlbnRhdGlvbg==\">Unity<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>可以將動畫和特效做到非常好，只是過於麻煩</li>\n</ul>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><ul>\n<li>使用純文字(即Markdown)儲存簡報，較沒有相容性的問題，版本控制也容易<ul>\n<li>但排版較困難</li>\n</ul>\n</li>\n<li>css是目前排版的最好方法</li>\n<li>所以最好的方法為Markdown+html</li>\n<li>推薦使用<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcnAtdGVhbS9tYXJwaXQ=\">Marp<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXZlYWxqcy5jb20v\">Reveal.js<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbGkuZGV2Lw==\">Slidev<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Markdown",
                "簡報",
                "軟體",
                "PowerPoint",
                "Latex",
                "JavaScript",
                "CSS",
                "Unity"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/linux-screen-tmux-byobu/",
            "url": "http://gitqwerty777.github.io/linux-screen-tmux-byobu/",
            "title": "byobu指令和設定",
            "date_published": "2022-02-21T10:00:45.000Z",
            "content_html": "<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>byobu是基於screen或tmux的一層操作介面<br>預設為基於tmux</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90YW8tb2YtdG11eC5yZWFkdGhlZG9jcy5pby96aF9DTi9sYXRlc3QvbWFudXNjcmlwdC8wMC1mb3Jld29yZC5odG1s\">tmux教學<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"使用byobu\"><a href=\"#使用byobu\" class=\"headerlink\" title=\"使用byobu\"></a>使用byobu</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">byobu-enable <span class=\"comment\">#登入就開啟byobu</span></span><br><span class=\"line\">byobu-disable <span class=\"comment\">#取消</span></span><br><span class=\"line\">byobu new -s &lt;session name&gt; <span class=\"comment\"># 新建一個byobu 會話</span></span><br><span class=\"line\"><span class=\"comment\"># 如果新建兩個以上，每次進入byobu的時候需要選擇</span></span><br></pre></td></tr></table></figure>\n\n<p>滑鼠操作</p>\n<ul>\n<li>選擇文字 <code>Shift+選擇</code></li>\n<li>複製文字 <code>Shift+右鍵</code></li>\n<li>開/關滑鼠操作 <code>Shift+F12</code></li>\n</ul>\n<h2 id=\"名詞解釋\"><a href=\"#名詞解釋\" class=\"headerlink\" title=\"名詞解釋\"></a>名詞解釋</h2><p>用瀏覽器的名詞解釋</p>\n<ul>\n<li>session → 視窗：不同視窗包含不同分頁<ul>\n<li>window → 分頁<ul>\n<li>split → 分割：同一個分頁的不同終端</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/img/Other/byobu-cheat-sheet.jpg\" alt=\"cheetsheet\"></p>\n<h2 id=\"指令表\"><a href=\"#指令表\" class=\"headerlink\" title=\"指令表\"></a>指令表</h2><h3 id=\"新建-F2\"><a href=\"#新建-F2\" class=\"headerlink\" title=\"新建(F2)\"></a>新建(F2)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Ctrl-F2</code></td>\n<td>新增垂直分割(分為左右兩塊)</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F2</code></td>\n<td>新增新視窗</td>\n</tr>\n<tr>\n<td><code>F2</code></td>\n<td>新增分頁</td>\n</tr>\n<tr>\n<td><code>Shift-F2</code></td>\n<td>新增水平分割(分為上下兩塊)</td>\n</tr>\n</tbody></table>\n<h3 id=\"移動-F3-F4\"><a href=\"#移動-F3-F4\" class=\"headerlink\" title=\"移動(F3/F4)\"></a>移動(F3/F4)</h3><p>移動的前後順序為編號順序</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-↑/↓</code></td>\n<td>前/後一個視窗</td>\n</tr>\n<tr>\n<td><code>Ctrl-F3/F4</code></td>\n<td>交換兩個分割的位置</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F3/F4</code></td>\n<td>移動分頁的位置(編號)</td>\n</tr>\n<tr>\n<td><code>F3/F4</code>, <code>Alt-←/→</code></td>\n<td>前/後一個分頁</td>\n</tr>\n<tr>\n<td><code>Shift-Alt-Left/Right/Up/Down</code></td>\n<td>修改目前的分割大小</td>\n</tr>\n<tr>\n<td><code>Shift-F3/F4</code></td>\n<td>移動至前/後分割</td>\n</tr>\n<tr>\n<td><code>Shift-←/→/↑/↓</code></td>\n<td>移動至其他分割</td>\n</tr>\n</tbody></table>\n<h3 id=\"設定-F5-F12\"><a href=\"#設定-F5-F12\" class=\"headerlink\" title=\"設定(F5, F12)\"></a>設定(F5, F12)</h3><p>記<code>F9</code>即可</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-F12</code></td>\n<td>切換滑鼠支援</td>\n</tr>\n<tr>\n<td><code>Alt-F5</code></td>\n<td>切換 UTF-8 支援</td>\n</tr>\n<tr>\n<td><code>Ctrl-F5</code></td>\n<td>Reconnect ssh/gpg/dbus sockets(註：應該是重新連線的意思)</td>\n</tr>\n<tr>\n<td><code>F5</code></td>\n<td>重新讀取設定</td>\n</tr>\n<tr>\n<td><code>F9</code></td>\n<td><strong>開啟 byobu 設定頁面</strong></td>\n</tr>\n<tr>\n<td><code>Shift-F12</code></td>\n<td>開/關 byobu 指令快捷鍵</td>\n</tr>\n<tr>\n<td><code>Shift-F5</code></td>\n<td>切換底部狀態列資訊</td>\n</tr>\n</tbody></table>\n<h3 id=\"取消-F6\"><a href=\"#取消-F6\" class=\"headerlink\" title=\"取消(F6)\"></a>取消(F6)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-F6</code></td>\n<td>使連線到相同視窗的 terminal 離開(除了自己)</td>\n</tr>\n<tr>\n<td><code>Ctrl-F6</code></td>\n<td>關閉目前所在的分割</td>\n</tr>\n<tr>\n<td><code>F6</code></td>\n<td>離開 byobu 但不登出(=<code>byobu detach</code>)</td>\n</tr>\n<tr>\n<td><code>Shift-F6</code></td>\n<td>離開 byobu 且登出(註：不知道差別在哪)</td>\n</tr>\n</tbody></table>\n<h3 id=\"記錄-F7\"><a href=\"#記錄-F7\" class=\"headerlink\" title=\"記錄(F7)\"></a>記錄(F7)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-PageUp/PageDown</code></td>\n<td>於歷史記錄中翻頁</td>\n</tr>\n<tr>\n<td><code>F7</code></td>\n<td>瀏覽歷史記錄(Command line history)</td>\n</tr>\n<tr>\n<td><code>Shift-F7</code></td>\n<td>儲存歷史記錄於 <code>$BYOBU_RUN_DIR/printscreen</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"管理-F8\"><a href=\"#管理-F8\" class=\"headerlink\" title=\"管理(F8)\"></a>管理(F8)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-Shift-F8</code></td>\n<td>選擇分割佈局</td>\n</tr>\n<tr>\n<td><code>Ctrl-F8</code></td>\n<td>命名目前視窗</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F8</code></td>\n<td>儲存目前的分割佈局</td>\n</tr>\n<tr>\n<td><code>F8</code></td>\n<td>命名目前分頁</td>\n</tr>\n<tr>\n<td><code>Shift-F8</code></td>\n<td>切換為不同的分割佈局</td>\n</tr>\n</tbody></table>\n<h3 id=\"廣播-F9\"><a href=\"#廣播-F9\" class=\"headerlink\" title=\"廣播(F9)\"></a>廣播(F9)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-F9</code></td>\n<td>開/關 同時輸入分割</td>\n</tr>\n<tr>\n<td><code>Ctrl-F9</code></td>\n<td>視窗中的所有分頁執行同一指令</td>\n</tr>\n<tr>\n<td><code>Shift-F9</code></td>\n<td>分頁中的所有分割執行同一指令</td>\n</tr>\n</tbody></table>\n<h3 id=\"其他-F11-F12\"><a href=\"#其他-F11-F12\" class=\"headerlink\" title=\"其他(F11, F12)\"></a>其他(F11, F12)</h3><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Alt-F11</code></td>\n<td>目前分割最大化</td>\n</tr>\n<tr>\n<td><code>Ctrl-F11</code></td>\n<td>將目前分割合併至前一個分頁(Join window into a vertical split)</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F12</code></td>\n<td>顯示蒙德裡安圖(Mondrian squares)</td>\n</tr>\n<tr>\n<td><code>Ctrl-Shift-F5</code></td>\n<td>隨機切換狀態列的顏色</td>\n</tr>\n<tr>\n<td><code>F12</code></td>\n<td>Escape sequence(等同 screen 的<code>Ctrl+a</code>)</td>\n</tr>\n<tr>\n<td><code>Shift-F11</code></td>\n<td>最大化/還原 目前分割</td>\n</tr>\n<tr>\n<td><code>Shift-F1</code></td>\n<td>顯示指令列表</td>\n</tr>\n</tbody></table>\n<h2 id=\"設定\"><a href=\"#設定\" class=\"headerlink\" title=\"設定\"></a>設定</h2><p>預設放在<code>~/.byobu/</code></p>\n<h3 id=\"修改狀態列\"><a href=\"#修改狀態列\" class=\"headerlink\" title=\"修改狀態列\"></a>修改狀態列</h3><p><code>~/.byobu/status</code></p>\n<p>預設是長這樣</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tmux has one status line, with 2 halves for status</span></span><br><span class=\"line\">tmux_left=<span class=\"string\">\"#logo distro release #arch #session\"</span></span><br><span class=\"line\"><span class=\"comment\"># You can have as many tmux right lines below here, and cycle through them using Shift-F5</span></span><br><span class=\"line\">tmux_right=<span class=\"string\">\"network #disk_io #custom #entropy #raid reboot_required #updates_available #apport #services #mail #users uptime #ec2_cost #rcs_cost #fan_speed #cpu_temp #battery #wifi_quality #processes load_average cpu_count cpu_freq memory #swap disk users whoami #hostname ip_address #time_utc #date time\"</span></span><br><span class=\"line\"><span class=\"comment\">#tmux_right=\"network #disk_io #custom entropy raid reboot_required updates_available #apport #services #mail users uptime #ec2_cost #rcs_cost fan_speed cpu_temp battery wifi_quality #processes load_average cpu_count cpu_freq memory #swap #disk whoami hostname ip_address #time_utc date time\"</span></span><br><span class=\"line\"><span class=\"comment\">#tmux_right=\"network #disk_io custom #entropy raid reboot_required updates_available #apport #services #mail users uptime #ec2_cost #rcs_cost #fan_speed #cpu_temp battery wifi_quality #processes load_average cpu_count cpu_freq memory #swap #disk #whoami #hostname ip_address #time_utc date time\"</span></span><br><span class=\"line\"><span class=\"comment\">#tmux_right=\"#network disk_io #custom entropy #raid #reboot_required #updates_available #apport #services #mail #users #uptime #ec2_cost #rcs_cost fan_speed cpu_temp #battery #wifi_quality #processes #load_average #cpu_count #cpu_freq #memory #swap whoami hostname ip_address #time_utc disk date time\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Left</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>說明</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>arch</code></td>\n<td>CPU 架構</td>\n<td><code>x86_64</code></td>\n</tr>\n<tr>\n<td><code>distro</code></td>\n<td>作業系統名稱</td>\n<td><code>Ubuntu</code></td>\n</tr>\n<tr>\n<td><code>logo</code></td>\n<td>作業系統的 Logo，可設定</td>\n<td><code>u</code></td>\n</tr>\n<tr>\n<td><code>release</code></td>\n<td>作業系統版本</td>\n<td><code>20.04</code></td>\n</tr>\n<tr>\n<td><code>session</code></td>\n<td>視窗名字</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>Right</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>說明</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>apport</code></td>\n<td>提醒尚未讀的 Crash Report</td>\n<td></td>\n</tr>\n<tr>\n<td><code>battery</code></td>\n<td>剩餘電量</td>\n<td></td>\n</tr>\n<tr>\n<td><code>cpu_count</code></td>\n<td>CPU 核心數</td>\n<td><code>16x</code></td>\n</tr>\n<tr>\n<td><code>cpu_freq</code></td>\n<td>CPU 時脈</td>\n<td><code>4.0GHz</code></td>\n</tr>\n<tr>\n<td><code>cpu_temp</code></td>\n<td>CPU 溫度</td>\n<td><code>30C</code></td>\n</tr>\n<tr>\n<td><code>custom</code></td>\n<td>自訂腳本，需要額外設定</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>日期，可自行設定</td>\n<td><code>2011-11-11</code></td>\n</tr>\n<tr>\n<td><code>disk_io</code></td>\n<td>即時 IO 讀/寫速度</td>\n<td><code>◁11KB/s ▷188KB/s</code></td>\n</tr>\n<tr>\n<td><code>disk</code></td>\n<td>磁碟用量</td>\n<td><code>256G90%</code></td>\n</tr>\n<tr>\n<td><code>entropy</code></td>\n<td>系統的 Entropy</td>\n<td><code>e3363</code></td>\n</tr>\n<tr>\n<td><code>fan_speed</code></td>\n<td>風扇速度，需要額外設定</td>\n<td></td>\n</tr>\n<tr>\n<td><code>hostname</code></td>\n<td>主機名稱</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ip_address</code></td>\n<td>系統 ip 位址</td>\n<td><code>111.111.111.111</code></td>\n</tr>\n<tr>\n<td><code>load_average</code></td>\n<td>前一分鐘 CPU 的平均用量</td>\n<td><code>0.12</code></td>\n</tr>\n<tr>\n<td><code>mail</code></td>\n<td>是否有新信件</td>\n<td><code>[M]</code></td>\n</tr>\n<tr>\n<td><code>memory</code></td>\n<td>記憶體用量</td>\n<td><code>32G50%</code></td>\n</tr>\n<tr>\n<td><code>network</code></td>\n<td>即時網路上傳/下載速度</td>\n<td><code>△11KB/s ▽188KB/s</code></td>\n</tr>\n<tr>\n<td><code>processes</code></td>\n<td>總程序(Process)數</td>\n<td><code>100&amp;</code></td>\n</tr>\n<tr>\n<td><code>raid</code></td>\n<td>Raid 失敗警告</td>\n<td></td>\n</tr>\n<tr>\n<td><code>reboot_required</code></td>\n<td>是否需要重啟</td>\n<td></td>\n</tr>\n<tr>\n<td><code>services</code></td>\n<td>監控中的服務，需要額外設定</td>\n<td></td>\n</tr>\n<tr>\n<td><code>swap</code></td>\n<td>Swap 用量</td>\n<td><code>s32G50%</code></td>\n</tr>\n<tr>\n<td><code>time_utc</code></td>\n<td>UTC 時間</td>\n<td><code>04:00UTC</code></td>\n</tr>\n<tr>\n<td><code>time</code></td>\n<td>時間</td>\n<td><code>11:11:11</code></td>\n</tr>\n<tr>\n<td><code>updates_available</code></td>\n<td>是否需要更新軟體</td>\n<td><code>!</code>為一般更新 <code>!!</code>為重要更新</td>\n</tr>\n<tr>\n<td><code>uptime</code></td>\n<td>系統開機時間</td>\n<td><code>12d23h</code></td>\n</tr>\n<tr>\n<td><code>users</code></td>\n<td>用 ssh 登入的人數</td>\n<td><code>#1</code></td>\n</tr>\n<tr>\n<td><code>whoami</code></td>\n<td>目前登入帳戶</td>\n<td><code>qwerty</code></td>\n</tr>\n<tr>\n<td><code>wifi_quality</code></td>\n<td>Wifi 訊號強度</td>\n<td><code>[M]</code></td>\n</tr>\n</tbody></table>\n<p>也可以用<code>F9</code>設定</p>\n<h3 id=\"顏色設定\"><a href=\"#顏色設定\" class=\"headerlink\" title=\"顏色設定\"></a>顏色設定</h3><p><code>~/.byobu/color</code><br><code>~/.byobu/color.tmux</code></p>\n<h3 id=\"VSCode設定\"><a href=\"#VSCode設定\" class=\"headerlink\" title=\"VSCode設定\"></a>VSCode設定</h3><p>避免和預設的快捷鍵重覆</p>\n<p>設定 → 終端機</p>\n<ol>\n<li>取消勾選<code>Integrated: Allow Chords</code></li>\n<li><code>Integrated: Commands To Skip Shell</code>增加下列<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.quickOpen</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.terminal</span><span class=\"selector-class\">.findNext</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.terminal</span><span class=\"selector-class\">.findPrevious</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.continue</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.restart</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.run</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.start</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.stop</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.focusNextPart</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.focusPreviousPart</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.debug</span><span class=\"selector-class\">.pause</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.quickOpen</span></span><br><span class=\"line\"><span class=\"selector-tag\">-workbench</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.terminal</span><span class=\"selector-class\">.focusFind</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYnlvYnUub3Jn\">byobu<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGV2aGVyby83YjlhNzI4MWRiMGFjNGJhNjgzZg==\">byobu_cheatsheet<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBlcnVzZXIuY29tL2EvNDIzMzk3\">Byobu vs. GNU Screen vs. tmux — usefulness and transferability of skills<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvbnNwbmcuY29tL2ltYWdlcy9ieW9idS1jaGVhdC1zaGVldC9ieW9idS1jaGVhdC1zaGVldC5qcGc=\">byobu-cheat-sheet<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYnlvYnUub3JnL2RvY3VtZW50YXRpb24=\">官方文件<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zemxpbi5tZS8yMDE2LzEwLzA1LyVFNSU4OCU5RCVFNiU4RSVBMi1saW51eC1rZXJuZWwtJUU0JUJBJTgyJUU2JTk1JUI4JUU3JTk0JUEyJUU3JTk0JTlGJUU1JTk5JUE4LXJhbmRvbS1nZW5lcmF0b3Iv\">Entropy說明<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYWlzYWt1LXRlY2guaGF0ZW5hYmxvZy5jb20vZW50cnkvMjAyMC8wOS8wNS8xNzUzMjA=\">VS codeのターミナルでbyobuを使う<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "Linux",
                "byobu",
                "screen",
                "tmux"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/factorization-machines/",
            "url": "http://gitqwerty777.github.io/factorization-machines/",
            "title": "Factorization Machines(FM) 和 Field-Aware Factorization Machine(FFM)：推薦系統中的瑞士軍刀",
            "date_published": "2022-01-21T03:11:11.000Z",
            "content_html": "<h2 id=\"Factorization-Machines-FM\"><a href=\"#Factorization-Machines-FM\" class=\"headerlink\" title=\"Factorization Machines(FM)\"></a>Factorization Machines(FM)</h2><ul>\n<li>SVM<ul>\n<li>難以在稀疏資料中學習</li>\n</ul>\n</li>\n<li>Factorization Models(如Matrix Factorization)<ul>\n<li>擴展性低：需要特定的輸入格式</li>\n</ul>\n</li>\n</ul>\n<p>FM：克服SVM和Factorization Models的缺點</p>\n<ul>\n<li>可在稀疏資料中學習</li>\n<li>輸入資料可擴展</li>\n<li><strong>訓練時間為線性複雜度</strong></li>\n</ul>\n<h3 id=\"理論\"><a href=\"#理論\" class=\"headerlink\" title=\"理論\"></a>理論</h3><p>FM將權重 $w_{ij}$ 設為兩個長度為k的<strong>隱向量</strong>$V_i, V_j$的<strong>內積</strong>，表示為$\\langle V_i, V_j \\rangle$</p>\n<p><img data-src=\"/img/recommend/fm-formula.png\" alt=\"2維的FM公式\"></p>\n<ol>\n<li>$w_0$​是bias</li>\n<li>$w_i​$是特徵$i$的一維權重</li>\n<li>$w_{i,j}$​是特徵$i$和特徵$j$的二次交叉權重</li>\n</ol>\n<ul>\n<li>隱向量長度$k$為hyperparameter</li>\n<li>FM將權重矩陣分解為隱向量的內積，破壞了權重的獨立性，所以在稀疏資料中仍能學習<ol>\n<li>已知一正定矩陣$W$，必存在$V$使$W=VV^t$</li>\n<li>權重矩陣$W$必為正定</li>\n<li>所以$W$必能分解成隱向量矩陣$V$乘自身的轉置</li>\n</ol>\n</li>\n<li>原本$W$的大小為$\\frac{n^2}{2}$，改成隱向量$V$之後大小為$kn$，$k$通常不會設很大，明顯減少參數數量<ul>\n<li>限制$k$的大小也能限制FM模型的表達力，泛化能力較好</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/img/recommend/FM-structure.png\" alt=\"結構\"></p>\n<h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><p><img data-src=\"/img/recommend/fm-time-complexity.png\" alt=\"\"></p>\n<p>整理公式後，Inference的時間複雜度從$O(kn^2)$降到了$O(kn)$，$n$為特徵維度</p>\n<ul>\n<li>第2行公式推導：表示為整個矩陣扣掉對角項再除以2，因為$W$是對稱矩陣</li>\n<li>詳細推導可看<span class=\"exturl\" data-url=\"aHR0cHM6Ly95dWxvbmd0c2FpLm1lZGl1bS5jb20vZmFjdG9yaXphdGlvbi1tYWNoaW5lLTYzMTYwYmMyYzA2Yg==\">這篇<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>實作上只須計算非0元素的乘積，時間複雜度再下降到$O(km)$，$m$為平均一筆輸入資料中，值非0的特徵數</li>\n</ul>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>使用gradient descent學習參數<br><img data-src=\"/img/recommend/fm-gradient.png\" alt=\"\"></p>\n<p>$\\sum^n_{j=1}v_{j, f}x_j$可以事先計算，所以每次梯度更新的時間複雜度為$O(1)$</p>\n<p>因此FM的訓練時間複雜度也是$O(km)$</p>\n<h3 id=\"高維度FM\"><a href=\"#高維度FM\" class=\"headerlink\" title=\"高維度FM\"></a>高維度FM</h3><p><img data-src=\"/img/recommend/fm-dway.png\" alt=\"\"></p>\n<p>經過公式簡化(和二維的方法相似)，也可以在線性時間內計算</p>\n<h3 id=\"FM-和-Factorization-Model-SVM-比較\"><a href=\"#FM-和-Factorization-Model-SVM-比較\" class=\"headerlink\" title=\"FM 和 Factorization Model, SVM 比較\"></a>FM 和 Factorization Model, SVM 比較</h3><p>論文中證明了兩件事</p>\n<ol>\n<li>各種Factorization Model為FM的特化</li>\n<li>FM可以解決SVM在稀疏資料中無法成功訓練的問題</li>\n</ol>\n<p>詳細證明看不懂，略過</p>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><ul>\n<li>FM速度快、容易實作，於2012~14年為業界主流模型</li>\n<li>FM產生的隱向量可視為一種embedding<ul>\n<li>所以拿user的隱向量找相似隱向量的item，就是一個簡易且快速的推薦方法</li>\n</ul>\n</li>\n<li>FM適合類型特徵(離散)而非數值特徵(連續)，因為<ul>\n<li>類型特徵可有多個隱向量，而數值特徵只有一個</li>\n<li>數值特徵不應使用同一個隱向量，如10歲和40歲</li>\n<li>FM速度和非零特徵數有關，數值特徵類型化後不影響訓練速度</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Field-aware-factorization-machines-FFM\"><a href=\"#Field-aware-factorization-machines-FFM\" class=\"headerlink\" title=\"Field-aware factorization machines(FFM)\"></a>Field-aware factorization machines(FFM)</h2><ul>\n<li>FM：一個特徵有<strong>一個</strong>隱向量</li>\n<li>FFM：一個特徵有<strong>一組</strong>隱向量<ul>\n<li>每個隱向量對應不同的<strong>特徵域</strong></li>\n<li>特徵域通常為一群代表相同性質的特徵，如one-hot特徵</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/img/recommend/ffm-formula.png\" alt=\"\"></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><ul>\n<li>出版商特徵域(P): ESPN, Vogue, and NBC</li>\n<li>廣告商特徵域(A): Nike, Gucci, and Adidas</li>\n<li>消費者性別特徵域(G): Male, Female</li>\n</ul>\n<p>在(ESPN, Nike) 和 (ESPN, Male) 中，ESPN的隱向量是不同的($V_{ESPN, A}$和 $V_{ESPN, G}$)</p>\n<p>FM的隱向量：$$V_{ESPN}V_{Nike}, V_{ESPN}V_{Male}, V_{Nike}V_{Male}$$<br>FFM的隱向量：$$V_{ESPN, A}V_{Nike, P}, V_{ESPN, G}V_{Male,P}, V_{Nike, G}V_{Male,A}$$</p>\n<h3 id=\"結論-1\"><a href=\"#結論-1\" class=\"headerlink\" title=\"結論\"></a>結論</h3><ul>\n<li>訓練時間複雜度為$O(kn^2)$</li>\n<li>因為FFM的隱向量限制在一個特徵域，FFM的$k$可以比FM的$k$小</li>\n</ul>\n<h2 id=\"公式比較\"><a href=\"#公式比較\" class=\"headerlink\" title=\"公式比較\"></a>公式比較</h2><p>只比較二次交叉項</p>\n<p>$$FM(v, x) = … + \\sum^n_{j_1=1}{\\sum^n_{j_2=j_1+1}{\\langle v_{j_1}, v_{j_2}\\rangle x_{j_1}x_{j_2}}}$$<br>$$FFM(v, x) = … + \\sum^n_{j_1=1}{\\sum^n_{j_2=j_1+1}{\\langle v_{j_1, f_2}, v_{j_2, f_1}\\rangle x_{j_1}x_{j_2}}}$$</p>\n<h2 id=\"方法比較\"><a href=\"#方法比較\" class=\"headerlink\" title=\"方法比較\"></a>方法比較</h2><ul>\n<li>FM：在LR(Logistic Regression)的基礎上，加入特徵交叉 </li>\n<li>FFM：在FM的基礎上，加入特徵域交叉</li>\n</ul>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>就算Deep Learning盛行，FM也是一個很好的Baseline Model</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3NpZS5udHUuZWR1LnR3L35iOTcwNTMvcGFwZXIvUmVuZGxlMjAxMEZNLnBkZg==\">Rendle, Steffen. “Factorization machines.” 2010 IEEE International conference on data mining. IEEE, 2010<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzE3MDEuMDQwOTk=\">Juan, Yuchin, et al. “Field-aware factorization machines for CTR prediction.” Proceedings of the 10th ACM conference on recommender systems. 2016<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNDMxNzQxMDg=\">FM：推薦算法中的瑞士軍刀<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93bmdhdy5naXRodWIuaW8vZmllbGQtYXdhcmUtZmFjdG9yaXphdGlvbi1tYWNoaW5lcy13aXRoLXhsZWFybi8=\">Field-aware Factorization Machines with xLearn<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dlYi5jcy51Y2xhLmVkdS9+Y2hvaHNpZWgvdGVhY2hpbmcvQ1MyNjBfV2ludGVyMjAxOS9sZWN0dXJlMTMucGRm\">http://web.cs.ucla.edu/~chohsieh/teaching/CS260_Winter2019/lecture13.pdf<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84OTYzOTMwNg==\">推薦系統系列（一）：FM理論與實踐<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly95dWxvbmd0c2FpLm1lZGl1bS5jb20vZmFjdG9yaXphdGlvbi1tYWNoaW5lLTYzMTYwYmMyYzA2Yg==\">初探Factorization Machine<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyODkyNTE0Mw==\">推薦系統算法FM、FFM使用時，連續性特徵，是直接作為輸入，還是經過離散化後one-hot處理呢？<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NTMyMzk2NzU=\">FM模型連續特徵離散化<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "推薦系統",
                "FM",
                "FFM",
                "SVM",
                "Embedding"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/why-linear-shuffle-works/",
            "url": "http://gitqwerty777.github.io/why-linear-shuffle-works/",
            "title": "隨機排序演算法實作",
            "date_published": "2022-01-15T10:12:50.000Z",
            "content_html": "<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>說到隨機排序(shuffle)演算法，最著名的肯定是Fisher–Yates，它是一個$O(N)$時間的演算法，偽碼如下</p>\n<a id=\"more\"></a>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"constructor\">Shuffle(Array <span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    N = a.length</span><br><span class=\"line\">    for (i = <span class=\"number\">0</span> ~ N-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"constructor\">Swap(<span class=\"params\">a</span>[<span class=\"params\">i</span>], <span class=\"params\">a</span>[Random <span class=\"params\">value</span> <span class=\"params\">between</span> <span class=\"params\">i</span> <span class=\"params\">and</span> N])</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>簡單來說就是每個元素都和之後(包含自身)的隨機一個元素交換</p>\n<h2 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">N = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Shuffle</span><span class=\"params\">(arr)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(N<span class=\"number\">-1</span>):</span><br><span class=\"line\">        j = random.randint(i, N<span class=\"number\">-1</span>)</span><br><span class=\"line\">        arr[i], arr[j] = arr[j], arr[i]</span><br><span class=\"line\"></span><br><span class=\"line\">total = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(N)] <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(N)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(<span class=\"number\">1000000</span>):</span><br><span class=\"line\">    arr = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(N)]</span><br><span class=\"line\">    Shuffle(arr)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> enumerate(arr):</span><br><span class=\"line\">        total[v][i] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(N):</span><br><span class=\"line\">    print(<span class=\"string\">f\"數字<span class=\"subst\">&#123;i&#125;</span>分佈\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\",\"</span>.join(str(v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> total[i]))</span><br></pre></td></tr></table></figure>\n\n<p>執行1000000次Shuffle，各數字的分布</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">數字<span class=\"number\">0</span>分佈</span><br><span class=\"line\"><span class=\"number\">99656</span>,<span class=\"number\">99624</span>,<span class=\"number\">100636</span>,<span class=\"number\">100081</span>,<span class=\"number\">99957</span>,<span class=\"number\">100149</span>,<span class=\"number\">100238</span>,<span class=\"number\">100287</span>,<span class=\"number\">99710</span>,<span class=\"number\">99662</span></span><br><span class=\"line\">數字<span class=\"number\">1</span>分佈</span><br><span class=\"line\"><span class=\"number\">100043</span>,<span class=\"number\">100292</span>,<span class=\"number\">99499</span>,<span class=\"number\">100262</span>,<span class=\"number\">100141</span>,<span class=\"number\">99847</span>,<span class=\"number\">100098</span>,<span class=\"number\">100164</span>,<span class=\"number\">99655</span>,<span class=\"number\">99999</span></span><br><span class=\"line\">數字<span class=\"number\">2</span>分佈</span><br><span class=\"line\"><span class=\"number\">100032</span>,<span class=\"number\">100412</span>,<span class=\"number\">99857</span>,<span class=\"number\">100035</span>,<span class=\"number\">100148</span>,<span class=\"number\">99738</span>,<span class=\"number\">100139</span>,<span class=\"number\">99765</span>,<span class=\"number\">99681</span>,<span class=\"number\">100193</span></span><br><span class=\"line\">數字<span class=\"number\">3</span>分佈</span><br><span class=\"line\"><span class=\"number\">100031</span>,<span class=\"number\">99868</span>,<span class=\"number\">100572</span>,<span class=\"number\">99418</span>,<span class=\"number\">99965</span>,<span class=\"number\">99918</span>,<span class=\"number\">99889</span>,<span class=\"number\">100107</span>,<span class=\"number\">100279</span>,<span class=\"number\">99953</span></span><br><span class=\"line\">數字<span class=\"number\">4</span>分佈</span><br><span class=\"line\"><span class=\"number\">100214</span>,<span class=\"number\">99716</span>,<span class=\"number\">100181</span>,<span class=\"number\">100315</span>,<span class=\"number\">99764</span>,<span class=\"number\">99667</span>,<span class=\"number\">100270</span>,<span class=\"number\">99829</span>,<span class=\"number\">99871</span>,<span class=\"number\">100173</span></span><br><span class=\"line\">數字<span class=\"number\">5</span>分佈</span><br><span class=\"line\"><span class=\"number\">99952</span>,<span class=\"number\">100282</span>,<span class=\"number\">99670</span>,<span class=\"number\">99642</span>,<span class=\"number\">99919</span>,<span class=\"number\">100401</span>,<span class=\"number\">99785</span>,<span class=\"number\">100627</span>,<span class=\"number\">100215</span>,<span class=\"number\">99507</span></span><br><span class=\"line\">數字<span class=\"number\">6</span>分佈</span><br><span class=\"line\"><span class=\"number\">100332</span>,<span class=\"number\">99879</span>,<span class=\"number\">99976</span>,<span class=\"number\">100143</span>,<span class=\"number\">99614</span>,<span class=\"number\">100319</span>,<span class=\"number\">99665</span>,<span class=\"number\">100169</span>,<span class=\"number\">100380</span>,<span class=\"number\">99523</span></span><br><span class=\"line\">數字<span class=\"number\">7</span>分佈</span><br><span class=\"line\"><span class=\"number\">99878</span>,<span class=\"number\">100407</span>,<span class=\"number\">99804</span>,<span class=\"number\">99669</span>,<span class=\"number\">100115</span>,<span class=\"number\">99760</span>,<span class=\"number\">100251</span>,<span class=\"number\">99602</span>,<span class=\"number\">100124</span>,<span class=\"number\">100390</span></span><br><span class=\"line\">數字<span class=\"number\">8</span>分佈</span><br><span class=\"line\"><span class=\"number\">100104</span>,<span class=\"number\">99888</span>,<span class=\"number\">99876</span>,<span class=\"number\">100575</span>,<span class=\"number\">100181</span>,<span class=\"number\">100229</span>,<span class=\"number\">100083</span>,<span class=\"number\">99398</span>,<span class=\"number\">99632</span>,<span class=\"number\">100034</span></span><br><span class=\"line\">數字<span class=\"number\">9</span>分佈</span><br><span class=\"line\"><span class=\"number\">99758</span>,<span class=\"number\">99632</span>,<span class=\"number\">99929</span>,<span class=\"number\">99860</span>,<span class=\"number\">100196</span>,<span class=\"number\">99972</span>,<span class=\"number\">99582</span>,<span class=\"number\">100052</span>,<span class=\"number\">100453</span>,<span class=\"number\">100566</span></span><br></pre></td></tr></table></figure>\n\n<p>但為何只要這樣交換，就是隨機排序？ 🤔</p>\n<h2 id=\"不嚴謹的證明\"><a href=\"#不嚴謹的證明\" class=\"headerlink\" title=\"不嚴謹的證明\"></a>不嚴謹的證明</h2><p>已知N=1或2時，使用此法皆可使陣列為隨機排序。<br>若N=n時成立，考慮N=n+1時的情況：<br>Without loss of generality，令陣列為[0, 1, 2, …, n]<br>第一個位置的數0會和後面的隨機一個元素交換，此時第一個位置是0到n的數的機率是平均的 $P_0(v)=\\frac{1}{n+1}, v \\in {0, 1, 2, .. n}$<br>此時子陣列(<code>[1:]</code>)即為N=n的情況，依照假設，使用此法後，其餘數字會是隨機排序，<br>所以N=n+1時也成立。<br>依數學歸納法，N=1,2時成立，且N=n成立時，N=n+1也成立；所以N為自然數時，使用此法皆可使陣列為隨機排序。$\\blacksquare$</p>\n<hr>\n<p>一個更直觀的解釋是，每一次交換都是在隨機選擇剩下還沒選的值。</p>\n<h2 id=\"錯誤版本\"><a href=\"#錯誤版本\" class=\"headerlink\" title=\"錯誤版本\"></a>錯誤版本</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"constructor\">WrongShuffle(Array <span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    N = a.length</span><br><span class=\"line\">    for (i = <span class=\"number\">0</span> ~ N-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"constructor\">Swap(<span class=\"params\">a</span>[<span class=\"params\">i</span>], <span class=\"params\">a</span>[Random <span class=\"params\">value</span> <span class=\"params\">between</span> 0 <span class=\"params\">and</span> N])</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此版本的所有元素對陣列中的一個元素交換<br>雖然接近，但不是隨機排序</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">數字<span class=\"number\">0</span>分佈</span><br><span class=\"line\"><span class=\"number\">99993</span>,<span class=\"number\">100886</span>,<span class=\"number\">99773</span>,<span class=\"number\">100749</span>,<span class=\"number\">100077</span>,<span class=\"number\">99675</span>,<span class=\"number\">99556</span>,<span class=\"number\">99589</span>,<span class=\"number\">99798</span>,<span class=\"number\">99904</span></span><br><span class=\"line\">數字<span class=\"number\">1</span>分佈</span><br><span class=\"line\"><span class=\"number\">128185</span>,<span class=\"number\">93869</span>,<span class=\"number\">94816</span>,<span class=\"number\">95112</span>,<span class=\"number\">96020</span>,<span class=\"number\">96324</span>,<span class=\"number\">97355</span>,<span class=\"number\">98316</span>,<span class=\"number\">99545</span>,<span class=\"number\">100458</span></span><br><span class=\"line\">數字<span class=\"number\">2</span>分佈</span><br><span class=\"line\"><span class=\"number\">120180</span>,<span class=\"number\">124118</span>,<span class=\"number\">89932</span>,<span class=\"number\">91055</span>,<span class=\"number\">91953</span>,<span class=\"number\">92791</span>,<span class=\"number\">94813</span>,<span class=\"number\">96518</span>,<span class=\"number\">98183</span>,<span class=\"number\">100457</span></span><br><span class=\"line\">數字<span class=\"number\">3</span>分佈</span><br><span class=\"line\"><span class=\"number\">112478</span>,<span class=\"number\">115941</span>,<span class=\"number\">120497</span>,<span class=\"number\">86991</span>,<span class=\"number\">88766</span>,<span class=\"number\">90575</span>,<span class=\"number\">92353</span>,<span class=\"number\">94732</span>,<span class=\"number\">97465</span>,<span class=\"number\">100202</span></span><br><span class=\"line\">數字<span class=\"number\">4</span>分佈</span><br><span class=\"line\"><span class=\"number\">104476</span>,<span class=\"number\">109125</span>,<span class=\"number\">113448</span>,<span class=\"number\">119119</span>,<span class=\"number\">85554</span>,<span class=\"number\">88077</span>,<span class=\"number\">90897</span>,<span class=\"number\">92827</span>,<span class=\"number\">96727</span>,<span class=\"number\">99750</span></span><br><span class=\"line\">數字<span class=\"number\">5</span>分佈</span><br><span class=\"line\"><span class=\"number\">97764</span>,<span class=\"number\">101507</span>,<span class=\"number\">106920</span>,<span class=\"number\">112440</span>,<span class=\"number\">118047</span>,<span class=\"number\">85835</span>,<span class=\"number\">89281</span>,<span class=\"number\">92036</span>,<span class=\"number\">96476</span>,<span class=\"number\">99694</span></span><br><span class=\"line\">數字<span class=\"number\">6</span>分佈</span><br><span class=\"line\"><span class=\"number\">91910</span>,<span class=\"number\">96017</span>,<span class=\"number\">101046</span>,<span class=\"number\">105743</span>,<span class=\"number\">112624</span>,<span class=\"number\">119489</span>,<span class=\"number\">87594</span>,<span class=\"number\">91230</span>,<span class=\"number\">94797</span>,<span class=\"number\">99550</span></span><br><span class=\"line\">數字<span class=\"number\">7</span>分佈</span><br><span class=\"line\"><span class=\"number\">86177</span>,<span class=\"number\">90650</span>,<span class=\"number\">96260</span>,<span class=\"number\">101089</span>,<span class=\"number\">107061</span>,<span class=\"number\">113865</span>,<span class=\"number\">120411</span>,<span class=\"number\">90146</span>,<span class=\"number\">94617</span>,<span class=\"number\">99724</span></span><br><span class=\"line\">數字<span class=\"number\">8</span>分佈</span><br><span class=\"line\"><span class=\"number\">81888</span>,<span class=\"number\">86070</span>,<span class=\"number\">90840</span>,<span class=\"number\">96392</span>,<span class=\"number\">101840</span>,<span class=\"number\">109008</span>,<span class=\"number\">115726</span>,<span class=\"number\">124044</span>,<span class=\"number\">93945</span>,<span class=\"number\">100247</span></span><br><span class=\"line\">數字<span class=\"number\">9</span>分佈</span><br><span class=\"line\"><span class=\"number\">76949</span>,<span class=\"number\">81817</span>,<span class=\"number\">86468</span>,<span class=\"number\">91310</span>,<span class=\"number\">98058</span>,<span class=\"number\">104361</span>,<span class=\"number\">112014</span>,<span class=\"number\">120562</span>,<span class=\"number\">128447</span>,<span class=\"number\">100014</span></span><br></pre></td></tr></table></figure>\n\n<p>為何不是隨機排序？ 🤔 目前想不到直觀解釋</p>\n<p>參考維基的證明：<br>總共有$n^n$種選法，但可能的排列只有$n!$種，在$n&gt;2$時並不能整除</p>\n<h2 id=\"更簡單的實作\"><a href=\"#更簡單的實作\" class=\"headerlink\" title=\"更簡單的實作\"></a>更簡單的實作</h2><p>對每個index設一隨機數，對隨機數排序<br>時間複雜度為$O(n\\log n)$</p>\n<h2 id=\"各語言Shuffle實作\"><a href=\"#各語言Shuffle實作\" class=\"headerlink\" title=\"各語言Shuffle實作\"></a>各語言Shuffle實作</h2><p>都是Fisher-Yates</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B5dGhvbi9jcHl0aG9uL2Jsb2IvY2IwNzQ4ZDM5MzljMzExNjhhYjVkM2I4MGUzNjc3NDk0NDk3ZDVlMy9MaWIvcmFuZG9tLnB5I0wyODY=\">Python<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9saWJjeHgvYmxvYi8yN2M4MzZmZjNhOWM1MDVkZWI5ZmQxNjE2MDEyOTI0ZGU4ZmY5Mjc5L2luY2x1ZGUvYWxnb3JpdGhtI0wyNzg3\">LLVM C++<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyJUUyJTgwJTkzWWF0ZXNfc2h1ZmZsZQ==\">Wiki<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW9wbGUuY3MudW1hc3MuZWR1L35waGFhcy9DUzU5ME0vaGFuZG91dHMvRmlzaGVyLVlhdGVzLXByb29mLnBkZg==\">https://people.cs.umass.edu/~phaas/CS590M/handouts/Fisher-Yates-proof.pdf<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcy5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMjE1Mi9ob3ctdG8tcHJvdmUtY29ycmVjdG5lc3Mtb2YtYS1zaHVmZmxlLWFsZ29yaXRobQ==\">https://cs.stackexchange.com/questions/2152/how-to-prove-correctness-of-a-shuffle-algorithm<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "演算法",
                "隨機排序",
                "洗牌",
                "Fisher-Yates",
                "證明"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/ifttt/",
            "url": "http://gitqwerty777.github.io/ifttt/",
            "title": "用IFTTT實作簡單的自動化",
            "date_published": "2022-01-04T07:18:44.000Z",
            "content_html": "<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pZnR0dC5jb20=\">IFTTT<i class=\"fa fa-external-link-alt\"></i></span>通過其他不同平台的條件來決定是否執行下一條命令。即對網路服務透過其他網路服務作出反應</li>\n<li>IFTTT = “IF This Then ThaT”<ul>\n<li>If A Then B(當 A 就 B)</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"怎麼唸？\"><a href=\"#怎麼唸？\" class=\"headerlink\" title=\"怎麼唸？\"></a>怎麼唸？</h3><p>我都唸<code>IFTTT</code></p>\n<h2 id=\"支援的平台-節錄\"><a href=\"#支援的平台-節錄\" class=\"headerlink\" title=\"支援的平台(節錄)\"></a>支援的平台(節錄)</h2><ul>\n<li>android/ios<ul>\n<li>電量/電話/簡訊/拍照/地點</li>\n</ul>\n</li>\n<li>email</li>\n<li>社交<ul>\n<li>twitter</li>\n<li>facebook</li>\n<li>reddit</li>\n<li>telegram</li>\n<li>github</li>\n<li>discord</li>\n<li>line</li>\n</ul>\n</li>\n<li>RSS<ul>\n<li>feedly(付費)</li>\n<li>inoreader</li>\n<li>instapaper</li>\n</ul>\n</li>\n<li>筆記<ul>\n<li>onenote</li>\n<li>evernote</li>\n<li>pocket</li>\n<li>notion</li>\n</ul>\n</li>\n<li>影音<ul>\n<li>spotify</li>\n<li>youtube</li>\n</ul>\n</li>\n<li>工作<ul>\n<li>microsoft todo</li>\n<li>trello</li>\n</ul>\n</li>\n<li>Google<ul>\n<li>calendar</li>\n<li>drive</li>\n<li>sheet</li>\n<li>docs</li>\n</ul>\n</li>\n</ul>\n<!--\n## 例子：一天一次，隨機傳line訊息\n\n做不到，需要用line api\n-->\n\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><ul>\n<li>把發在Facebook的一篇廢文同步發在Twitter <img data-src=\"/img/Other/ifttt1.png\" alt=\"\"></li>\n<li>將Youtube按讚的影片存到Onenote <img data-src=\"/img/Other/ifttt2.png\" alt=\"\"></li>\n<li>手機 簡訊/照片 備份到Discord <img data-src=\"/img/Other/ifttt3.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"彈性較大的選擇\"><a href=\"#彈性較大的選擇\" class=\"headerlink\" title=\"彈性較大的選擇\"></a>彈性較大的選擇</h3><p>使用Email, RSS, Webhook可以支援更多平台</p>\n<p>例如某新聞網站支援RSS，可將其內容發送到支援IFTTT的所有平台</p>\n<ol>\n<li>Email<ul>\n<li>(if)傳送郵件到<code>trigger@applet.ifttt.com</code>，(then)…</li>\n</ul>\n</li>\n<li>RSS<ul>\n<li>(if)新RSS消息，(then)…</li>\n<li>參照<a href=\"/rss-social-network\">此篇</a></li>\n</ul>\n</li>\n<li>Webhook<ul>\n<li>可以用程式接收/傳送Webhook，大幅提升使用彈性</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pZnR0dC5jb20vbWFrZXJfd2ViaG9va3M=\">https://ifttt.com/maker_webhooks<i class=\"fa fa-external-link-alt\"></i></span> → Documentation</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ul>\n<li><code>If then</code> 的語法限制了使用的彈性<ul>\n<li>解法即為Webhook</li>\n</ul>\n</li>\n<li>許多平台為了<del>綁住用戶</del>保護資料不提供讀取API，使可用性降低，如line</li>\n<li>配合物聯網效果較好，如智慧音箱、掃地機器人<ul>\n<li>e.g., 回到家時(手機定位)，自動開燈(智慧燈泡)</li>\n</ul>\n</li>\n<li>若只需要讀取，RSS還是最佳選擇</li>\n<li>使用到的所有服務都需要提供很多權限</li>\n</ul>\n<h2 id=\"類似服務\"><a href=\"#類似服務\" class=\"headerlink\" title=\"類似服務\"></a>類似服務</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96YXBpZXIuY29tLw==\">zapier<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2h1Z2lubi9odWdpbm4=\">huginn<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdXRvbWF0ZS5pby8=\">automate<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW50ZWdyb21hdC5jb20vZW4=\">integromat<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "IFTTT",
                "自動化",
                "備份",
                "webhook"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/recommender-wide-and-deep/",
            "url": "http://gitqwerty777.github.io/recommender-wide-and-deep/",
            "title": "Wide And Deep 論文簡介：快思慢想的神經網路版",
            "date_published": "2021-12-20T07:18:44.000Z",
            "content_html": "<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>Wide And Deep 模型由簡單的Wide模型和複雜的Deep模型組成</p>\n<a id=\"more\"></a>\n\n<ul>\n<li>Wide<ul>\n<li>Memorization(記憶)<ul>\n<li><strong>Generalized linear model</strong>(e.g., Linear Regression Model)</li>\n<li>適合學習稀疏、簡單的規則<ul>\n<li>看了 A 電影的使用者經常喜歡看電影 B，這種「因為 A 所以 B」式的規則</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>從歷史資料學習規則(exploit)</li>\n<li>讓模型記住大量的直接且重要的規則，這正是單層的線性模型所擅長的</li>\n</ul>\n</li>\n<li>Deep<ul>\n<li>Generalization(泛化)<ul>\n<li><strong>Embedding-based models</strong>(e.g., Deep Neural Network)</li>\n<li>適合學習通用、深層的規則</li>\n</ul>\n</li>\n<li>學習新的特徵組合(explore)</li>\n</ul>\n</li>\n<li>合併 Wide and Deep(Jointly Training) <img data-src=\"/img/recommend/wide-and-deep.png\" alt=\"\"><ul>\n<li>既能快速處理和記憶大量歷史行為特徵，又具有強大的表達能力</li>\n<li>和 Deep-only 比: 準確率高</li>\n<li>和 Wide-only 比: 更好的泛化規則</li>\n</ul>\n</li>\n<li>當user-item matrix非常稀疏時，例如有獨特愛好的users以及很小眾的items，NN很難為users和items學習到有效的embedding。導致over-generalize，並推薦不怎麼相關的物品。此時Memorization就展示了優勢，它可以「記住」這些特殊的特徵組合</li>\n</ul>\n<h2 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h2><h3 id=\"Wide\"><a href=\"#Wide\" class=\"headerlink\" title=\"Wide\"></a>Wide</h3><ul>\n<li>$y = w^Tx+b$</li>\n<li>Cross product transformation<ul>\n<li><img data-src=\"/img/recommend/wide-and-deep-cross-product.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>Optimizer: Follow-the-regularized-leader (FTRL) + L1 regularization<ul>\n<li>FTRL with L1非常注重模型的稀疏性。採用L1 FTRL是想讓Wide部分變得更加稀疏<ul>\n<li>但是兩個id類特徵向量進行組合，在維度爆炸的同時，會讓原本已經非常稀疏的multihot特徵向量，變得更加稀疏。正因如此，wide部分的權重數量其實是海量的。為了不把數量如此之巨的權重都搬到線上進行model serving，採用FTRL過濾掉哪些稀疏特徵無疑是非常好的工程經驗</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Wide的輸入特徵較少<ul>\n<li>只有已安裝app和瀏覽過的app</li>\n<li>希望能充份發揮Wide記憶能力強的優勢</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Deep\"><a href=\"#Deep\" class=\"headerlink\" title=\"Deep\"></a>Deep</h3><ul>\n<li>特徵(節錄)<ul>\n<li>用戶特徵<ul>\n<li>年齡、國家、語言</li>\n<li>行為特徵<ul>\n<li>已安裝App個數</li>\n<li>已安裝的App</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>情境特徵<ul>\n<li>使用裝置</li>\n<li>目前時間(星期，小時)</li>\n</ul>\n</li>\n<li>App特徵<ul>\n<li>發佈時間</li>\n<li>下載數</li>\n</ul>\n</li>\n<li>候選App</li>\n<li>部份特徵有做embedding(Wide完全沒有)<ul>\n<li>32 dimension</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Optimizer: AdaGrad</li>\n</ul>\n<h3 id=\"Jointly-Training\"><a href=\"#Jointly-Training\" class=\"headerlink\" title=\"Jointly Training\"></a>Jointly Training</h3><ul>\n<li>同時更新Wide和Deep的權重<ul>\n<li><img data-src=\"/img/recommend/wide-and-deep-joint-train.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>結構圖<ul>\n<li><img data-src=\"/img/recommend/wide-and-deep-features.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"結果\"><a href=\"#結果\" class=\"headerlink\" title=\"結果\"></a>結果</h2><p>實際用在 Google Play Store App 推薦</p>\n<p><img data-src=\"/img/recommend/wide-and-deep-exp.png\" alt=\"\"></p>\n<ul>\n<li>Deep雖然離線結果較差，但實際結果仍比Wide好<ul>\n<li>深層模型有學習到使用者的隱含喜好，而非直接記憶規則</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>這就是<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFuYWdlcnRvZGF5LmNvbS50dy9hcnRpY2xlcy92aWV3LzUwOTA1Pw==\">快思慢想<i class=\"fa fa-external-link-alt\"></i></span>的神經網路版</p>\n<p>Wide處理簡單的規則且省力，Deep處理複雜的規則但費力</p>\n<p>和純粹的deep learning相比，適合需要記憶大量簡易規則的情境。如App推薦中，有安裝A就推薦B</p>\n<p>Wide and Deep是一個架構，Wide模型和Deep模型可以為任意實作，所以衍生出許多變形，如DeepFM, Deep and Cross等</p>\n<!--\ndeep的效率跟不上，可以固定住deep，對wide進行online learning來增強記憶性。\n非常贊 跟我們的討論結果基本一致，deep部分做batch update保證准確性和充足表達能力，wide部分做online learning保證實效性。\n\n用戶-物品互動太少 → over-generalize\nwide部分的引入是為瞭解決 niche items的問題，對於很長尾的物品，dense features是沒法學到什麼東西的\n\nHowever,deep neural networks with embeddings can over-generalize\nand recommend less relevant items when the user-item inter-\nactions are sparse and high-rank.\n當user-item matrix非常稀疏時，例如有和獨特愛好的users以及很小眾的items，NN很難為users和items學習到有效的embedding。這種情況下，大部分user-item應該是沒有關聯的，但dense embedding 的方法還是可以得到對所有 user-item pair 的非零預測，因此導致 over-generalize並推薦不怎麼相關的物品。此時Memorization就展示了優勢，它可以“記住”這些特殊的特徵組合。\nhttps://en.wikipedia.org/wiki/Rank_(linear_algebra)\n-->\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzE2MDYuMDc3OTI=\">Cheng, Heng-Tze, et al. “Wide &amp; deep learning for recommender systems.” Proceedings of the 1st workshop on deep learning for recommender systems. 2016.<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL2RhdGEtc2NpZW50aXN0cy1wbGF5Z3JvdW5kL3dpZGUtZGVlcCVFNiVBOCVBMSVFNSU5RSU4Qi0lRTYlOEUlQTglRTglOTYlQTYlRTclQjMlQkIlRTclQjUlQjEtJUU1JThFJTlGJUU3JTkwJTg2LThiYWRhY2Y3NzdmMw==\">https://medium.com/data-scientists-playground/wide-deep%E6%A8%A1%E5%9E%8B-%E6%8E%A8%E8%96%A6%E7%B3%BB%E7%B5%B1-%E5%8E%9F%E7%90%86-8badacf777f3<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDI5NTg4MzQ=\">https://zhuanlan.zhihu.com/p/142958834<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MzM2MTUxOQ==\">https://zhuanlan.zhihu.com/p/53361519<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "推薦系統",
                "WideAndDeep",
                "Google"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/revealjs-markdown/",
            "url": "http://gitqwerty777.github.io/revealjs-markdown/",
            "title": "使用revealJS + markdown 製作簡報",
            "date_published": "2021-12-17T01:53:00.000Z",
            "content_html": "<p>優點：減少排版時間、資料為純文字、版本控制容易</p>\n<p><a href=\"https://gitqwerty777.github.io/revealjs-markdown/\">說明簡報連結</a></p>\n<p>之後會再分析其他簡報製作方法</p>\n",
            "tags": [
                "簡報",
                "revealJS",
                "markdown"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/observer-pattern/",
            "url": "http://gitqwerty777.github.io/observer-pattern/",
            "title": "觀察者模式(Observer Pattern)",
            "date_published": "2020-11-21T07:00:00.000Z",
            "content_html": "<h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><p>一對多的依賴關係，當物件狀態改變時，所有依賴者會被通知。</p>\n<h2 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h2><p><img data-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Observer_w_update.svg/1024px-Observer_w_update.svg.png?1618077346924\" alt=\"From Wiki\"></p>\n<ul>\n<li><code>Subject</code>：主題<ul>\n<li>特定事件發生時，會通知觀察者<ul>\n<li>如資料改變</li>\n</ul>\n</li>\n<li>新增/移除觀察者：<code>Attach(Observer), Detach(Observer)</code></li>\n<li>用<code>Notify(data)</code>通知觀察者主題有更新</li>\n</ul>\n</li>\n<li><code>Observer</code>：觀察者<ul>\n<li>訂閱主題，以便在更新時收到通知</li>\n<li>觀察者收到通知時呼叫<code>Update(Subject)</code>以處理事件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>設計守則：盡量讓需要互動的物件的關係鬆綁</p>\n<ul>\n<li>主題和觀察者鬆綁<ul>\n<li>主題只知道觀察者有實作特定介面(<code>Observer</code>)，不用知道觀察者的具體類別</li>\n<li>任何時候都可以加入新的觀察者，且主題的程式碼不需修改</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h2><p>有一觀測工作站數據的物件，在數據異常時可以通知到多個平台(Email, 簡訊, App)，<br>且使用者可以自由調整各平台的通知設定。</p>\n<ul>\n<li>觀察者之間彼此獨立，不可依頼通知觀察者的順序</li>\n<li>主題可以控制改變的定義(如溫度變化超過1度)</li>\n<li>Push model/Pull model<ul>\n<li>Push model<ul>\n<li>推送所有資料給Observer</li>\n<li>Subject要知道Observer需要什麼，彈性較差</li>\n<li>Observer會接收到不必要的資料</li>\n</ul>\n</li>\n<li>Pull model<ul>\n<li>提供必要的資料或其來源(如data id或Subject本身)給Observer，由Observer自行取得相關資料</li>\n<li>每個Observer都要重新取得資料，效率較差</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>C#的實作：委託，可看作對函數的抽象，是函數的類別<ul>\n<li>委託物件所搭載的方法並不需要屬於同一個類別(即不需要Observer介面)</li>\n</ul>\n</li>\n<li>可以實作一個<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1dpdGhvdXRVbWJyZWxsYS1Cb3kvRGVzaWduLXBhdHRlcm5zLWluLWdhbWUtZGV2ZWxvcG1lbnQvYmxvYi8zODgzYzI3OGJiZWY2MzRlMzdiYzFlYTZmNDY2N2I5MjE4NDcwYmY3L1JlZEFsZXJ0UHJvamVjdC9Bc3NldHMvU2NyaXB0cy9HYW1lRXZlbnRTeXN0ZW0vR2FtZUV2ZW50U3lzdGVtLmNz\">Subject管理員<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><p>當一個物件的改變需要同時改變其他物件時</p>\n<ul>\n<li>訂閱服務</li>\n<li>MVC架構: 後端資料更新、前端顯示資料</li>\n<li>UI操作: OnClick, OnHover</li>\n<li>觸發事件</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>RSS訂閱後可取得所有資料，目前的社群網站則是訂閱後仍會篩選並提供部份資料</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li>Wiki</li>\n<li>Head-First Design Pattern</li>\n<li>大話設計模式</li>\n<li>設計模式與遊戲開發的完美結合</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3RmYWxzZS5uZXQvMTAvb2JzZXJ2ZXItcGF0dGVybg==\">https://notfalse.net/10/observer-pattern<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "設計模式",
                "觀察者",
                "訂閱",
                "委託"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/mementos-pattern/",
            "url": "http://gitqwerty777.github.io/mementos-pattern/",
            "title": "備忘錄模式(Mementos Pattern)",
            "date_published": "2020-11-05T07:00:00.000Z",
            "content_html": "<p><img data-src=\"/img/Other/morgana.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><p>在不破壞封裝及單一職責原則的情況下創立/還原類別的備份。</p>\n<p>若要建立備份，簡單的方法是在類別內部建立<code>Save()</code>/<code>Load()</code>等方法，但會使類別多了備份的職責。<br>若在其他類別執行備份，則需要將想備份的資料設為public或設定Getter，破壞封裝。</p>\n<h2 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h2><p><img data-src=\"https://upload.wikimedia.org/wikipedia/commons/3/38/W3sDesign_Memento_Design_Pattern_UML.jpg?1615662505582\" alt=\"\"></p>\n<p>想法：Originator只產生Memento/使用Memento還原, 由Caretaker管理Memento</p>\n<ul>\n<li>Originator: 需要備份的類別，產生Memento並可用其還原<ul>\n<li><code>Memento CreateMemento()</code></li>\n<li><code>void RestoreFromMemento(Memento)</code></li>\n</ul>\n</li>\n<li>Memento: 儲存備份檔案的類別<ul>\n<li>純資料，不可變(immutable)</li>\n</ul>\n</li>\n<li>Caretaker: 管理備份的類別<ul>\n<li>呼叫 Originator 執行 備份/還原的操作</li>\n<li>管理備份<ul>\n<li>存讀檔，路徑</li>\n<li>管理多份備份</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h2><!-- - Memento可以是interface或abstract class，以避免被Originator以外的類別修改 -->\n\n<ul>\n<li>Originator可以hold Caretaker reference使兩個物件的生命周期同步</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>缺點</p>\n<ul>\n<li>Memento會額外占用記憶體</li>\n</ul>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><ul>\n<li>備份/還原(存/讀檔)</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>單詞Memento有「印象」、「紀念」的意思，有同名電影譯為「記憶拼圖」，在Persona5譯為「印象空間」</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li>Wiki</li>\n<li>Head-First Design Pattern</li>\n<li>大話設計模式</li>\n<li>設計模式與遊戲開發的完美結合</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3R3bWh0LmdpdGh1Yi5pby9ibG9nL3Bvc3RzL2Rlc2lnbi1wYXR0ZXJuL21lbWVudG8uaHRtbA==\">http://twmht.github.io/blog/posts/design-pattern/memento.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<!--TODO: 看三本書,補足 -->",
            "tags": [
                "設計模式",
                "備份",
                "備忘錄",
                "存檔"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/unicode/",
            "url": "http://gitqwerty777.github.io/unicode/",
            "title": "漢字的異體字及其Unicode編碼",
            "date_published": "2020-10-29T07:00:00.000Z",
            "content_html": "<h2 id=\"異體字\"><a href=\"#異體字\" class=\"headerlink\" title=\"異體字\"></a>異體字</h2><p>異體字為意思一樣、但寫法不同的字集合。<br>因為漢字在多個國家使用，每個國家的正式寫法不同，且在歷史中會出現字形改變的情形，自然字形也不同。</p>\n<a id=\"more\"></a>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>Unicode只是編碼標準，不是字形標準。因此其官方說法是：<strong>它只對字（Character）編碼，而非字形（Glyph，每個字的具體形狀、寫法）</strong>。</p>\n<p>陸、港、臺、韓的「港」字右下從「巳」，日本的「港」字右下從「己」；港、臺、韓、日的「角」字中豎不穿頭，大陸的「角」字中豎穿頭；港、臺「起」字從「巳」，陸、日、韓從「己」……這些異形同字，Unicode都不分別編碼。例如「港」就是「6E2F」，不論從「巳」還是從「己」。</p>\n<p>爲了相容不同地區的編碼， Unicode 又有「<strong>字源分離原則</strong>」。日本 JIS 編碼同時收錄了「剣」、「劍」二形， Unicode 爲了與之兼容，即使它們是同一個字， Unicode 也分別給予編碼：「剣」是「5263」，「劍」是「528D」。</p>\n<p><strong>結果，有些異形同字，被編進同一碼位，有些則區分作兩碼，造成了 Unicode 內的自相矛盾。</strong></p>\n<h2 id=\"歷史\"><a href=\"#歷史\" class=\"headerlink\" title=\"歷史\"></a>歷史</h2><p>國際標準組織於 1993 年 5 月出版了「通用碼架構及基本多語文字面」（UCSArchitecture and Basic Multilingual Plane）草案，該草案將此標準定名為 Universal MultipleOctet Coded Character Set（通用多八位組編碼字符集），並說明其編碼架構為 4 個位元組（4 Bytes），共組成 128 個群（Group），每一個群有 256 個字面（Plane)，每一個字面有256×256 個編碼空間，其中第 32 群的第 32 個字面為基本多語文字面（Basic MultilingualPlane；簡稱 BMP）。到了 1993 年 ISO 10646-1 正式版本，此標準定名為 Universal Multiple-Octet Coded Character Set（廣用多八位元組編碼字元集；簡稱 UCS），BMP 則定義在第 0 群第 0 個字面。在使用上，假如需用的字集都在 BMP 中，則只要使用 2 個八位元組的編碼架構即可，否則就必須使用 4 個八位元組的編碼架構；而且這兩種編碼架構不能混合使用，不是使用 2 個八位元組，就是使用 4 個八位元組的固定長度編碼架構，其用意就是要避免 ISO 2022 不定長度的缺點。</p>\n<p>參與制定 ISO 10646 的代表莫不儘量爭取把自己國家使用的字集編入 BMP，目的就是希望能利用 BMP 只用 2 個八位元組的優勢，取得比 4 個八位元組更高的資訊處理效率。BMP 的爭取如此重要，然其編碼位置卻有限，因此如何充份利用這些編碼空間處理更多常用字符集，就成為標準研訂時的一個重要考慮因素。過去在 BMP 的設計中，除編入西方拼音文字及符號外，在漢字方面只蒐集日本、南韓及中國三個地區使用的漢字字集，並沒有考慮到我國的字集，我國遂積極組團以民間團體－臺北市電腦商業同業公會（TCA）的名義，參加 ISO 10646 的制定，以爭取將我國使用的正體字編入 BMP 中。</p>\n<p>ISO 10646 編碼基本原則為「一字一碼」，我國及中國的代表因此就共同提出了 HCS（Han Character Set） 的構想，這個構想同時獲得美國及其它國家代表的支持，進而一步步發展至今。1993 年公布的 ISO 10646-1 之 BMP 中，已經將臺灣、大陸、日本和南韓所使用之漢字整合成獨立的<strong>「中日韓認同表意文字區（ CJK Unified Ideographs）」</strong>，使<br>得亞洲幾個主要使用漢字的國家，有圓滿的解決方案。</p>\n<p>然而，當初進行中日韓漢字編碼時，因各國所提出的漢字集有重複及形、體不盡相同，進行重複字比對、篩選及形、體認同（ unify） 原則討論等工作。歷經五次會議完成的「中日韓認同表意文字」（ CJK Unified Ideographs），其字序主要是參考康熙字典、大漢和詞典、漢語大詞典及大字源字典，以先部首後筆劃的順序排列。<br>完成了 ISO 10646:1993 之 BMP 中 I 區的表意文字編碼標準，總計含 20,902 個漢字，其中包含了 CNS 11643 用字共 17,011 個。</p>\n<p>1998 年 IRG 完成「中日韓認同表意文字擴充 A」(CJK Unified Ideographs Extension A)，編訂 6,582 字，送交 SC2／WG2 通過，編碼於 BMP 之 A 區的3400～4DFF，其中包含 CNS 11643 用字共 5,879 個。</p>\n<p>被認定相同的 CNS11643 字元 527 個，收容於「中日韓相容表意文字擴充 A 區」，編碼範圍為 0002-F800 ～0002-FA16h。</p>\n<p>「中日韓認同表意文字擴充 B」（CJK Unified Ideographs Extension B）的整理，這套字集涵蓋康熙字典全部用字、漢語大字典全部用字及中國、臺灣、韓國、越南、香港所提的國家標準字集。擴充 B 字集係編碼於 ISO 10646 第二輔助字面(Plane 2)，總計 42,807 中日韓越漢字，編碼範圍為 0002-0100～0002-A836h，其中含我國 CNS 11643 第 4~7 字面共約 3 萬字。「中日韓認同表意文字擴充 B」擴編完成後，CNS 11643 第 1 至 7 字面有 95%以上的用字全部納入 ISO 10646 標準中，其餘 5%是被認定相同(unified)的字。</p>\n<h2 id=\"範例：不同Unicode的異體字\"><a href=\"#範例：不同Unicode的異體字\" class=\"headerlink\" title=\"範例：不同Unicode的異體字\"></a>範例：不同Unicode的異體字</h2><ul>\n<li>剣(5263)、劍(528D)</li>\n<li>數(6578)、數(f969)</li>\n<li>靑(9751)、青(9752)</li>\n<li><img data-src=\"http://founder.acgvlyric.org/iu/lib/exe/fetch.php/%E8%AA%AA%E6%96%87:cing_unified.png?cache=\" alt=\"\"></li>\n</ul>\n<h2 id=\"範例：相同Unicode的異體字\"><a href=\"#範例：相同Unicode的異體字\" class=\"headerlink\" title=\"範例：相同Unicode的異體字\"></a>範例：相同Unicode的異體字</h2><p>早期Unicode碰到在有關國家或地區既有碼表已分別編碼的字，像「値」與「值」，就會放棄認同原則，改以原字集分離原則來把兩個字形分別編碼。<br>但若當時有關國家或地區沒有把異體字分別編碼，像日本的JIS90只收錄了一個「葛」字，Unicode就不會分別編碼。如「直、殖、植」等字皆沒有像「値」與「值」般分別編碼。</p>\n<p><img data-src=\"https://mojikiban.ipa.go.jp/contents/2013/11/IVS_fig1.png\" alt=\"\"></p>\n<h3 id=\"異體字選擇器\"><a href=\"#異體字選擇器\" class=\"headerlink\" title=\"異體字選擇器\"></a>異體字選擇器</h3><p>異體字選擇器是一種在Unicode上，用來準確、具體地指定選擇哪個文字字形的程序。有標準化的異體字選擇器（Standardized Variation Sequence，簡稱「SVS」），以及漢字異體字選擇器（Ideographic Variation Sequence，簡稱「IVS」）。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yaC5uYWVyLmVkdS50dy9jZ2ktYmluL2dzMzIvZ3N3ZWIuY2dpP289ZGlycHJvamVjdCZzPWlkPSUyMlJQMDAwMDAwMDAwNjM3JTIyLiZzZWFyY2htb2RlPWJhc2lj\">李鵑娟-異體字字典港澳陸規範字收錄研究<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTk1JUIwJUU5JUFCJTk0JUU1JUFEJTk3JUU5JTgxJUI4JUU2JTkzJTg3JUU1JTk5JUE4\">異體字選擇器<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy51bmljb2RlLm9yZy9QdWJsaWMvMTIuMS4wL3VjZC9TdGFuZGFyZGl6ZWRWYXJpYW50cy50eHQ=\">SVS<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmljb2RlLm9yZy9pdmQvZGF0YS8yMDE3LTEyLTEyL0lWRF9TZXF1ZW5jZXMudHh0\">IVS<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jTnYyQnJtUDlTWQ==\">顯示表意文字字形變化序列示範<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb2ppa2liYW4uaXBhLmdvLmpwLzEyOTIuaHRtbA==\">IVD/IVSとは<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "漢字",
                "中文",
                "異體字",
                "unicode"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/CSharp-codeconvension/",
            "url": "http://gitqwerty777.github.io/CSharp-codeconvension/",
            "title": "C# 程式碼風格指南",
            "date_published": "2020-10-22T07:00:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2MjL3Byb2dyYW1taW5nLWd1aWRlL2luc2lkZS1hLXByb2dyYW0vY29kaW5nLWNvbnZlbnRpb25z\">原文：C# Coding Conventions (C# Programming Guide)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"Naming-Conventions\"><a href=\"#Naming-Conventions\" class=\"headerlink\" title=\"Naming Conventions\"></a>Naming Conventions</h2><p>若句子太長，可以分段，結尾需為<code>.</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var currentPerformanceCounterCategory &#x3D; new System.Diagnostics.</span><br><span class=\"line\">        PerformanceCounterCategory();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Layout-Conventions\"><a href=\"#Layout-Conventions\" class=\"headerlink\" title=\"Layout Conventions\"></a>Layout Conventions</h2><ul>\n<li>四空格縮排, tabs 需要存為空格</li>\n<li>一行一個Statement/Declaration</li>\n<li>連續的行中，第二行需要多一個縮排</li>\n<li>方法的宣告和屬性的宣告中至少需要隔一行</li>\n<li>在判斷式中加上括號<ul>\n<li><code>if ((val1 &gt; val2) &amp;&amp; (val1 &gt; val3))</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Commenting-Conventions\"><a href=\"#Commenting-Conventions\" class=\"headerlink\" title=\"Commenting Conventions\"></a>Commenting Conventions</h2><ul>\n<li>將程式和註解放在不同行</li>\n<li>註解需以大寫開頭，逗號結尾，與<code>//</code>間隔一個空格<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; The following declaration creates a query. It does not run</span><br><span class=\"line\">&#x2F;&#x2F; the query.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Language-Guidelines\"><a href=\"#Language-Guidelines\" class=\"headerlink\" title=\"Language Guidelines\"></a>Language Guidelines</h2><ul>\n<li>使用字串插補(String interpolation)來連接短的字串<ul>\n<li><code>string displayName = $&quot;{nameList[n].LastName}, {nameList[n].FirstName}&quot;;</code></li>\n</ul>\n</li>\n<li>若要在迴圈中使用字串，使用<code>StringBuilder</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var phrase &#x3D; &quot;la&quot;;</span><br><span class=\"line\">var manyPhrases &#x3D; new StringBuilder();</span><br><span class=\"line\">for (var i &#x3D; 0; i &lt; 10000; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    manyPhrases.Append(phrase);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Implicitly-Typed-Local-Variables\"><a href=\"#Implicitly-Typed-Local-Variables\" class=\"headerlink\" title=\"Implicitly Typed Local Variables\"></a>Implicitly Typed Local Variables</h2><ul>\n<li>若變數的型別很明顯，使用隱式宣告<ul>\n<li><code>New</code>, 型別轉換, 基本型別等<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var var1 &#x3D; &quot;This is clearly a string.&quot;;</span><br><span class=\"line\">var var2 &#x3D; 27;</span><br><span class=\"line\">&#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">int var3 &#x3D; Convert.ToInt32(Console.ReadLine());</span><br><span class=\"line\">int var4 &#x3D; ExampleClass.ResultSoFar();</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>可以在for中使用隱式宣告，但不要在foreach中使用隱式宣告</li>\n</ul>\n<h2 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Preferred syntax. Note that you cannot use var here instead of string[].</span><br><span class=\"line\">string[] vowels1 &#x3D; &#123; &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot; &#125;;</span><br><span class=\"line\">&#x2F;&#x2F; If you use explicit instantiation, you can use var.</span><br><span class=\"line\">var vowels2 &#x3D; new string[] &#123; &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot; &#125;;</span><br><span class=\"line\">&#x2F;&#x2F; If you specify an array size, you must initialize the elements one at a time.</span><br><span class=\"line\">var vowels3 &#x3D; new string[5];</span><br><span class=\"line\">vowels3[0] &#x3D; &quot;a&quot;;</span><br><span class=\"line\">vowels3[1] &#x3D; &quot;e&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Delegates-委託\"><a href=\"#Delegates-委託\" class=\"headerlink\" title=\"Delegates(委託)\"></a>Delegates(委託)</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Define the type.</span><br><span class=\"line\">public delegate void Del(string message);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Define a method that has a matching signature.</span><br><span class=\"line\">public static void DelMethod(string str)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;DelMethod argument: &#123;0&#125;&quot;, str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; In the Main method, create an instance of Del.</span><br><span class=\"line\">&#x2F;&#x2F; Preferred: Create an instance of Del by using condensed syntax.</span><br><span class=\"line\">Del exampleDel2 &#x3D; DelMethod;</span><br><span class=\"line\">&#x2F;&#x2F; The following declaration uses the full syntax.</span><br><span class=\"line\">Del exampleDel1 &#x3D; new Del(DelMethod);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Using\"><a href=\"#Using\" class=\"headerlink\" title=\"Using\"></a>Using</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Method1: try-finally statement with Dispose</span><br><span class=\"line\">Font font1 &#x3D; new Font(&quot;Arial&quot;, 10.0f);</span><br><span class=\"line\">try</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    byte charset &#x3D; font1.GdiCharSet;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">finally</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (font1 !&#x3D; null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ((IDisposable)font1).Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Method2: Using statement.</span><br><span class=\"line\">using (Font font2 &#x3D; new Font(&quot;Arial&quot;, 10.0f))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    byte charset &#x3D; font2.GdiCharSet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"amp-amp-and\"><a href=\"#amp-amp-and\" class=\"headerlink\" title=\"&amp;&amp; and ||\"></a>&amp;&amp; and ||</h2><ul>\n<li>用 <code>&amp;&amp;</code> 取代 <code>&amp;</code>, 用 <code>||</code> 取代 <code>|</code><ul>\n<li><code>&amp;&amp;</code> 會 short-circult (即不可能是True時直接return False)</li>\n<li><code>&amp;</code> 會判斷所有條件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if ((divisor !&#x3D; 0) &amp;&amp; (dividend &#x2F; divisor &gt; 0))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;Quotient: &#123;0&#125;&quot;, dividend &#x2F; divisor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;Attempted division by 0 ends up here.&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"New\"><a href=\"#New\" class=\"headerlink\" title=\"New\"></a>New</h2><ul>\n<li>使用new的時候，使用var <code>var instance1 = new ExampleClass();</code></li>\n<li>簡化Initialize<ul>\n<li><code>var instance3 = new ExampleClass { Name = &quot;Desktop&quot;, ID = 37414, Location = &quot;Redmond&quot;, Age = 2.3 };</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><ul>\n<li>使用lambda expression來產生一次性的event<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public Form2()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; You can use a lambda expression to define an event handler.</span><br><span class=\"line\">    this.Click +&#x3D; (s, e) &#x3D;&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(</span><br><span class=\"line\">                ((MouseEventArgs)e).Location.ToString());</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Using a lambda expression shortens the following traditional definition.</span><br><span class=\"line\">public Form1()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.Click +&#x3D; new EventHandler(Form1_Click);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Form1_Click(object sender, EventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MessageBox.Show(((MouseEventArgs)e).Location.ToString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h2><ul>\n<li>用類別名取得static成員 <code>ClassName.StaticMember</code><ul>\n<li>不要用繼承的類別名，直接用定義static成員的類別</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"LINQ-Queries\"><a href=\"#LINQ-Queries\" class=\"headerlink\" title=\"LINQ Queries\"></a>LINQ Queries</h2><p>使用有意義的變數名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var seattleCustomers &#x3D; from customer in customers</span><br><span class=\"line\">                       where customer.City &#x3D;&#x3D; &quot;Seattle&quot;</span><br><span class=\"line\">                       select customer.Name;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>排列在<code>from</code>下方</li>\n<li>使用多個<code>from</code>取代<code>join</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Use a compound from to access the inner sequence within each element.</span><br><span class=\"line\">var scoreQuery &#x3D; from student in students</span><br><span class=\"line\">                 from score in student.Scores</span><br><span class=\"line\">                 where score &gt; 90</span><br><span class=\"line\">                 select new &#123; Last &#x3D; student.LastName, score &#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "C#",
                "CodingStyle"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/linux-save-memory-disk/",
            "url": "http://gitqwerty777.github.io/linux-save-memory-disk/",
            "title": "在Linux系統中 節省硬碟和記憶體用量",
            "date_published": "2020-10-15T07:46:00.000Z",
            "content_html": "<p>最近發現 VM 和遠端主機的使用空間都太大了，找到一些相關處理方法</p>\n<a id=\"more\"></a>\n\n<h2 id=\"硬碟用量\"><a href=\"#硬碟用量\" class=\"headerlink\" title=\"硬碟用量\"></a>硬碟用量</h2><h3 id=\"檢查\"><a href=\"#檢查\" class=\"headerlink\" title=\"檢查\"></a>檢查</h3><ul>\n<li><code>df -h</code> 查看磁碟使用情形</li>\n<li><code>df -i</code> 檢查inode使用情形</li>\n<li><code>du -sh</code> 查看各資料夾用量</li>\n<li><code>du -sh * | sort -nr</code> 依序列出大檔案</li>\n<li><code>ls -a</code> 顯示隱藏檔案(<code>.</code>開頭的檔案)</li>\n<li><code>dpkg-query -Wf &#39;${Installed-Size}\\t${Package}\\n&#39; | sort -n</code> 顯示已安裝的的大package</li>\n<li><code>wajig large</code><!--  /lib/modules/<kernel_release>/extra/ -->\n\n</li>\n</ul>\n<h3 id=\"apt\"><a href=\"#apt\" class=\"headerlink\" title=\"apt\"></a>apt</h3><figure class=\"highlight dsconfig\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">sudo </span><span class=\"string\">apt </span><span class=\"string\">autoremove</span></span><br><span class=\"line\"><span class=\"string\">sudo </span><span class=\"string\">apt </span><span class=\"string\">autoremove </span><span class=\"built_in\">--purge</span> <span class=\"comment\"># remove old kernels</span></span><br><span class=\"line\"><span class=\"string\">sudo </span><span class=\"string\">apt </span><span class=\"string\">clean </span><span class=\"comment\"># 清除 apt 快取</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h3><p><code>git gc --aggressive --prune=all</code> 清理並壓縮 history</p>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p><code>docker builder prune</code> 移除沒在使用的build</p>\n<h2 id=\"記憶體用量\"><a href=\"#記憶體用量\" class=\"headerlink\" title=\"記憶體用量\"></a>記憶體用量</h2><h3 id=\"檢查-1\"><a href=\"#檢查-1\" class=\"headerlink\" title=\"檢查\"></a>檢查</h3><ul>\n<li><code>free</code></li>\n</ul>\n<h3 id=\"硬碟容量換記憶體容量\"><a href=\"#硬碟容量換記憶體容量\" class=\"headerlink\" title=\"硬碟容量換記憶體容量\"></a>硬碟容量換記憶體容量</h3><p>當然，會比較慢</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3BlbmNsaS5jb20vbGludXgvbGludXgtYWRkLXN3YXA=\">使用 swap<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"CPU-用量\"><a href=\"#CPU-用量\" class=\"headerlink\" title=\"CPU 用量\"></a>CPU 用量</h2><ul>\n<li>各process用量<ul>\n<li><code>top</code></li>\n<li><code>htop</code></li>\n</ul>\n</li>\n<li><code>kill &lt;pid&gt;</code></li>\n</ul>\n",
            "tags": [
                "linux",
                "硬碟",
                "記憶體",
                "效能"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/foreign-language-police/",
            "url": "http://gitqwerty777.github.io/foreign-language-police/",
            "title": "如何當稱職的支語警察？",
            "date_published": "2020-09-13T09:25:34.000Z",
            "content_html": "<p><img data-src=\"/img/Other/foreign-terms-police.png\" alt=\"\"></p>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>PTT 上常有支語警察</p>\n<p>也常發現 google 翻譯的中文常常會<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2V0bi5jb20vTmV3cy5hc3B4P05ld3NJRD03NDY3OTM=\">翻譯成中國慣用語<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>所以就寫了一個支語警察的網站：<a href=\"/foreign-terms-police\">支語警察</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>文章分詞</li>\n<li>標出非台灣習慣用語</li>\n<li>從資料庫尋找對應的用語</li>\n<li>若無對應用語則尋找其解釋</li>\n</ol>\n<h2 id=\"資料庫\"><a href=\"#資料庫\" class=\"headerlink\" title=\"資料庫\"></a>資料庫</h2><p>基本上都是使用現有的詞典，其資料都是人工更新的，<strong>目前還沒有自動辨識習慣用語的方法</strong>。</p>\n<h3 id=\"萌典\"><a href=\"#萌典\" class=\"headerlink\" title=\"萌典\"></a>萌典</h3><p>從萌典的兩岸字典獲取用語中台灣和中國的意思不同者(同字不同義，同義不同字)</p>\n<h3 id=\"開放中文轉換-OpenCC\"><a href=\"#開放中文轉換-OpenCC\" class=\"headerlink\" title=\"開放中文轉換 OpenCC\"></a>開放中文轉換 OpenCC</h3><p>支持詞彙級別的轉換、異體字轉換和地區習慣用語及字體轉換（中國大陸、臺灣、香港、日本）。</p>\n<p>使用詞典對應的方式實作，像是簡體轉繁體就使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0JZVm9pZC9PcGVuQ0MvYmxvYi9tYXN0ZXIvZGF0YS9kaWN0aW9uYXJ5L1NUUGhyYXNlcy50eHQ=\">此詞典<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h2><ul>\n<li>支援單字或文章檢測</li>\n<li>Google Trends<ul>\n<li>使用台灣的搜尋趨勢比較原本用語及對應的外來用語</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"困難\"><a href=\"#困難\" class=\"headerlink\" title=\"困難\"></a>困難</h3><ol>\n<li>資料庫通常沒有收錄網路流行語</li>\n<li>同詞不同義<ol>\n<li>質量：中國常用於表示「品質」，但兩岸都有「重量」的意思 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHR0LmNjL2Jicy9DX0NoYXQvTS4xNTk1NTU0NDM0LkEuNjc2Lmh0bWw=\">範例<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>土豆：中國為「馬鈴薯」，台灣為「花生」</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9lZGljdC50dy8=\">萌典<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0JZVm9pZC9PcGVuQ0M=\">OpenCC<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHR0LmNjL2Jicy9DX0NoYXQvTS4xNTk1NTEyNDgwLkEuNTY5Lmh0bWw=\">[閒聊] 支語警察是誰畫的？<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "自然語言處理",
                "外國用語",
                "萌典",
                "opencc",
                "PTT",
                "vuejs"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/art-of-readme/",
            "url": "http://gitqwerty777.github.io/art-of-readme/",
            "title": "README 寫法",
            "date_published": "2020-09-06T17:11:22.000Z",
            "content_html": "<p>此篇文章大多參考自 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZmZsZS9hcnQtb2YtcmVhZG1lL2Jsb2IvbWFzdGVyL1JFQURNRS16aC5tZA==\">art-of-readme<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"基本的-README-組成\"><a href=\"#基本的-README-組成\" class=\"headerlink\" title=\"基本的 README 組成\"></a>基本的 README 組成</h2><p>建議順序</p>\n<ul>\n<li>一句話解釋模組的目的</li>\n<li>簡潔可運行的範例</li>\n<li>詳細的API文件</li>\n<li>安裝說明</li>\n<li>注意事項和限制</li>\n<li>授權條款(license)</li>\n<li>必要的背景資料或連結</li>\n<li>專業術語解譯</li>\n</ul>\n<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>README 的目的：<strong>這是進行下一步之前的重要資訊</strong></p>\n<p>README 是寫給模組使用者的。</p>\n<p>README 也是寫給模組建立者的。一個沒有文件的模組，往往時隔 6 個月後，就連作者自己都會覺得陌生。每個模組的作者同時也是該模組的使用者。</p>\n<p><strong>README 是使用者首先（或唯一）審視你作品的入口。</strong></p>\n<p>編寫優秀的文件可以讓使用者不用閱讀原始碼就能理解你模組的精妙之處。<br>沒有 README 意味著開發者需要閱讀原始碼才能理解你的模組。<br>使用者希望模組能滿足他們的需要，所以你要清楚的說明你的模組的主要作用和優勢。</p>\n<blockquote>\n<p>只要你的文件是完備的，使用者就可以直接使用你的模組而無需去閱讀原始碼。透過文件可以在很大程度上將你的模組的外部介面和內部實現進行分離。這樣就可以在保持介面不變的情況下，靈活的修改內部實現。<br>定義模組的是文件而不是程式碼。 ——<span class=\"exturl\" data-url=\"aHR0cDovL21hdGhmb3J1bS5vcmcva2VuL3BlcmxfbW9kdWxlcy5odG1sI2RvY3VtZW50\">Ken Williams<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><p>讓讀者了解</p>\n<ol>\n<li>這是什麼</li>\n<li>使用情境</li>\n<li>如何使用</li>\n<li>實作及相關細節</li>\n</ol>\n<h2 id=\"原則\"><a href=\"#原則\" class=\"headerlink\" title=\"原則\"></a>原則</h2><h3 id=\"簡潔\"><a href=\"#簡潔\" class=\"headerlink\" title=\"簡潔\"></a>簡潔</h3><p>理想的 README 應該儘可能的短。詳細的文件可以在單獨的頁面裡描述</p>\n<h3 id=\"快速理解\"><a href=\"#快速理解\" class=\"headerlink\" title=\"快速理解\"></a>快速理解</h3><ul>\n<li>這些關鍵要素的排序應該<strong>讓人儘快放棄你的模組</strong></li>\n<li>當你用利他主義思想來做的時候，不是為了銷售給別人，而是為了讓人們儘可能客觀公正的評估你的作品，並判斷是否滿足他們的需要。而不是讓你的下載量和使用者數最大化</li>\n</ul>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"使用模版\"><a href=\"#使用模版\" class=\"headerlink\" title=\"使用模版\"></a>使用模版</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZmZsZS9jb21tb24tcmVhZG1l\">common-readme<i class=\"fa fa-external-link-alt\"></i></span>用的文件格式，一個README寫作指南和方便的command-line生成器。<br>你也可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JpY2hhcmRsaXR0L3N0YW5kYXJkLXJlYWRtZQ==\">標準Readme(standard readme)<i class=\"fa fa-external-link-alt\"></i></span>中領略下更具結構化的通用Readme格式。</p>\n<h3 id=\"以史為鑑\"><a href=\"#以史為鑑\" class=\"headerlink\" title=\"以史為鑑\"></a>以史為鑑</h3><p>古人云：以史為鑑，可以知興替。<br>開發者編寫文件已經有多年的歷史了。值得我們花時間去看看之前人們是怎麼正確寫文件的。</p>\n<p><del>註：就是抄別人的</del></p>\n<h3 id=\"順序：以使用者的角度分析\"><a href=\"#順序：以使用者的角度分析\" class=\"headerlink\" title=\"順序：以使用者的角度分析\"></a>順序：以使用者的角度分析</h3><p>當我想要一個 2D 碰撞檢測模組時我找到了<a href=\"https://github.com/noffle/collide-2d-aabb-aabb\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"><code>collide-2d-aabb-aabb</code></a>。</p>\n<p>我開始從頭開始檢查這個模組：</p>\n<ol>\n<li><strong>取名</strong>：名字要能做到“其義自見”。<code>collide-2d-aabb-aabb</code> 聽起來是個不錯的匹配，儘管它假設我知道”aabb”是什麼意思。</li>\n<li><strong>簡介</strong>：透過一句話簡明扼要的說明了這個模組是做什麼的。<ol>\n<li><code>collide-2d-aabb-aabb</code> 的描述是：<blockquote>\n<p>Determines whether a moving axis-aligned bounding box (AABB) collides with other AABBs.<br>太棒了 —— 描述了 AABB 的定義是什麼，並且說明了這個模組是做什麼的。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><strong>用法</strong>：在開始探究 API 文件之前，最好看看這個模組在實際應用中是什麼樣子。我可以快速決定用js寫的範例程式是否符合我的程式碼樣式和我要解決的問題。</li>\n<li><strong>API</strong>：模組的名字，描述和使用方法都符合我的胃口。在這一點上我很樂意使用這個模組。我需要瀏覽API來確定這就是我需要的，並且很容易整合到我的程式碼中。API 部分應該詳述模組的物件和函式，以及它們的定義、回傳值和事件。</li>\n<li><strong>安裝</strong>：如果不是通用的安裝說明，就需要在這兒進行描述。即使是一句簡單的<code>npm install</code>也好。 對於使用Node的新使用者來說，放一個指向npmjs.org的連結和安裝命令，可以讓使用者快速上手使用模組。</li>\n<li><strong>授權</strong>：大多數模組把這個放在最末尾，但是最好還是往前放一些；非常有可能在把這個模組整合完後才發現授權協議不合適。我通常使用 MIT/BSD/X11/ISC。如果你的協議不是很寬容，最好是放到最前面。</li>\n</ol>\n<h3 id=\"順序：認知漏斗\"><a href=\"#順序：認知漏斗\" class=\"headerlink\" title=\"順序：認知漏斗\"></a>順序：認知漏斗</h3><p>可以想象成是一個直立的漏斗，越往下移動細節越具體，最寬的部分相關細節最寬泛，只有對你的作品足夠感興趣的人才會關注這部分內容。最後，底部可以放一些作品背景的細節</p>\n<blockquote>\n<p>Perl模組的文件對於細節的描述是從少到多的。<br>你的簡介部分應該包含一個小的例子程式<br>（或許只有一行程式碼，省略掉不常用的用例或大多數使用者用不到的功能）<br>描述部分應該從總體上描述你的模組，<br>通常只需要幾個段落；在隨後的章節中再詳細描述模組的例程或方法，長的程式碼示例，或其它的資料。<br>理想情況下，在點“下一頁”之前就能讓人大體上了解你的模組。<br>隨著使用者繼續閱讀文件，他們能夠漸進的獲得更多的知識。<br> —— <code>perlmodstyle</code></p>\n</blockquote>\n<h2 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h2><p><mark>API改的越多，越要努力的去更新文件</mark></p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>如果你的模組依賴於重要但是不為人所熟知的抽象或生態系統，考慮包含一個 <strong>背景知識</strong> 部分 (background)。</p>\n<p><a href=\"https://github.com/noffle/bisecting-between\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"><code>bisecting-between</code></a>的函式從它的名字上看不是特別明顯，所以在背景部分會描述定義，並且給出具體概念和抽象的連結，以便需要的人去使用和獲取。如果已經有相似的模組在npm上存在了，這兒也是一個非常適合描述建立模組的動機的地方</p>\n<h3 id=\"連結\"><a href=\"#連結\" class=\"headerlink\" title=\"連結\"></a>連結</h3><p>如果你談及其它的模組，想法，或者其他人的時候，在相關的引用內容上加上連結，這樣訪客就可以很容易的得到你的模組背後的想法。極少有模組是憑空誕生的：所有的作品來源於其它作品，因此很有必要讓使用者追溯你的模組的歷史和靈感</p>\n<h3 id=\"範例檔案\"><a href=\"#範例檔案\" class=\"headerlink\" title=\"範例檔案\"></a>範例檔案</h3><p>範例程式碼在repo中以檔案的形式體現 – 例如<code>example.js</code>。這樣當用戶clone專案後，就可以直接執行README中提及的程式碼</p>\n<h3 id=\"徽章-badge\"><a href=\"#徽章-badge\" class=\"headerlink\" title=\"徽章(badge)\"></a>徽章(badge)</h3><p>使用徽章要慎重。經常會被濫用。它們會容易引起爭論。它們在你的README中加入了視覺噪聲，並且只有當用戶在聯網的瀏覽器裡閱讀你的markdown時才能看到徽章，因為圖片是存放在網際網路上的其它地方。對於每一個徽章，需要考慮：README中的徽章提供給典型讀者的真實含義是什麼？用一個CI徽章來顯示build/test狀態？這個訊號更應該發郵件給維護者，或者自動建立一個issue – 永遠要考慮你的README中的資料的受眾並且自問一下是否有一個流程能夠讓資料更好的送達到目標受眾。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>API 文件格式沒有局限。使用任何你認為是清晰的格式，但是要包含重要的細節：</p>\n<ol>\n<li>引數是否可選，以及預設值</li>\n<li>包含型別資訊，如果型別不能清楚的根據約定進行體現</li>\n<li>對於 <code>opts</code> 物件引數，描述它所接受的所有的 keys 和 values</li>\n<li>為每個API提供一個小的呼叫示例，如果它們的用法不明顯或是在用法部分沒有體現。<ol>\n<li>不過，也有可能是函式太複雜了，需要進行重構，劃分成更細粒度的函式，或者整體刪除。</li>\n</ol>\n</li>\n<li>為特殊術語建立連結! 在markdown中你可以把<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXJpbmdmaXJlYmFsbC5uZXQvcHJvamVjdHMvbWFya2Rvd24vc3ludGF4I2xpbms=\">腳註<i class=\"fa fa-external-link-alt\"></i></span> 放在文件的末尾，可以很方便的多次引用它們。</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZmZsZS9jb21tb24tcmVhZG1lL2Jsb2IvbWFzdGVyL2FwaV9mb3JtYXR0aW5nLm1k\">這兒<i class=\"fa fa-external-link-alt\"></i></span>有一些我的API文件格式的個人偏好。</p>\n<ul>\n<li>放一些呼叫和返回值的範例<ul>\n<li>如果你的模組提供了 CLI (command line interface)而不是 API，用命令呼叫的方式展示呼叫示例和輸出。如果你建立了或更改了一個檔案，<code>cat</code> 它來展示更改前後的變化。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"關鍵字\"><a href=\"#關鍵字\" class=\"headerlink\" title=\"關鍵字\"></a>關鍵字</h3><p>github 和 npm 皆有提供手動填寫關鍵字(tag)</p>\n<h3 id=\"內嵌圖片\"><a href=\"#內嵌圖片\" class=\"headerlink\" title=\"內嵌圖片\"></a>內嵌圖片</h3><p>最後，請記住你的程式碼倉庫和其中的README存在的時間要比你的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29t\">程式碼倉庫託管主機<i class=\"fa fa-external-link-alt\"></i></span>和你連結到的其它任何東西–特別是圖片–的時間都要長久。所以<strong>內嵌任何對將來要獲取你的作品的使用者來說是重要的東西</strong>。</p>\n<p>註：還是可以上傳到圖床或Youtube等，但是要將這些圖片、影片等額外的資源也放在版本控制中</p>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>我個人使用Repo的順序</p>\n<ol>\n<li>觀察<ol>\n<li>會看主要使用的程式語言、支援的OS</li>\n<li>Description: 一句話形容Repo的作用</li>\n<li>指令、圖片、影片或是線上的使用範例</li>\n</ol>\n</li>\n<li>決定試用<ol>\n<li>安裝方法、或是Release可直接下載</li>\n<li>實際使用<ol>\n<li>使用失敗：回去看Document或README</li>\n</ol>\n</li>\n<li>覺得好用：Star</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"實例評價\"><a href=\"#實例評價\" class=\"headerlink\" title=\"實例評價\"></a>實例評價</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dhbGl0eTM2OS9DUy1Mb2FkZXI=\">CS-Loader<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>About欄位：CS免殺<ul>\n<li>Google後才知道是繞過掃毒軟體的方法</li>\n</ul>\n</li>\n<li>❌沒有對專有名詞的說明</li>\n<li>❌沒有使用方法</li>\n<li>只看README的話我是完全不會用的</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL251bXRpZGUvZGV2c2hlbGw=\">devshell<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>副標題: ⭕like virtualenv, but for all the languages<ul>\n<li>有用過Python的virtualenv的人可以馬上理解</li>\n</ul>\n</li>\n<li>About欄位: ➖Per project developer environments</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9udW10aWRlLmdpdGh1Yi5pby9kZXZzaGVsbC9pbnRyby5odG1s\">文件<i class=\"fa fa-external-link-alt\"></i></span>: ❌沒有簡短的設定教學<!-- - TODO: --></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "readme",
                "文件",
                "github"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/vuejs/",
            "url": "http://gitqwerty777.github.io/vuejs/",
            "title": "vuejs 語法",
            "date_published": "2020-09-06T06:50:12.000Z",
            "content_html": "<blockquote>\n<p>因為mustache語法(雙大括號)會被判斷成render命令，改成全形符號</p>\n</blockquote>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>採用簡潔的模板語法來宣告式地將資料渲染進 DOM 的系統</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html part --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  ｛｛ message ｝｝</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js part</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello Vue.js!'</span></span><br><span class=\"line\">    todo: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 html tag 中 加入<code>v-</code>開頭的attributes以實作邏輯</p>\n<a id=\"more\"></a>\n\n<h2 id=\"元件化應用構建\"><a href=\"#元件化應用構建\" class=\"headerlink\" title=\"元件化應用構建\"></a>元件化應用構建</h2><p><code>v-bind</code>: todo-item 元件接受一個”prop”，類似於一個自定義 attribute。這個 prop 名為 todo。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;ol&gt;</span><br><span class=\"line\">    &lt;todo-item</span><br><span class=\"line\">      v-<span class=\"keyword\">for</span>=<span class=\"string\">\"item in groceryList\"</span></span><br><span class=\"line\">      v-bind:todo=<span class=\"string\">\"item\"</span></span><br><span class=\"line\">      v-bind:key=<span class=\"string\">\"item.id\"</span></span><br><span class=\"line\">    &gt;&lt;<span class=\"regexp\">/todo-item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>ol&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Vue.component('todo-item', &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['todo'],</span></span><br><span class=\"line\"><span class=\"regexp\">  template: '&lt;li&gt;｛｛ todo.text ｝｝&lt;/</span>li&gt;<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">var app = new Vue(&#123;</span></span><br><span class=\"line\">  el: '#app',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    groceryList: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">text</span>: <span class=\"string\">'蔬菜'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'乳酪'</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'隨便其它什麼人吃的東西'</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Instance\"><a href=\"#Instance\" class=\"headerlink\" title=\"Instance\"></a>Instance</h2><p>用 Vue 函式建立一個新的 Vue 例項<br>當一個 Vue 例項被建立時，它將 data 物件中的所有的 property 加入到 Vue 的響應式系統中<br>只有當例項被建立時就已經存在於 data 中的 property 才是響應式的<br>唯一的例外是使用<code>Object.freeze()</code>，這會阻止修改現有的 property，也意味著響應系統無法再追蹤變化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我們的資料物件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 該物件被加入到一個 Vue 例項中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 獲得這個例項上的 property</span></span><br><span class=\"line\"><span class=\"comment\">// 返回源資料中對應的欄位</span></span><br><span class=\"line\">vm.a == data.a <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 設定 property 也會影響到原始資料</span></span><br><span class=\"line\">vm.a = <span class=\"number\">2</span></span><br><span class=\"line\">data.a <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ……反之亦然</span></span><br><span class=\"line\">data.a = <span class=\"number\">3</span></span><br><span class=\"line\">vm.a <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">vm.$data === data <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">vm.$el === <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// $watch 是一個例項方法</span></span><br><span class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue, oldValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這個回撥將在 `vm.a` 改變後呼叫</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命週期鉤子\"><a href=\"#生命週期鉤子\" class=\"headerlink\" title=\"生命週期鉤子\"></a>生命週期鉤子</h2><p><code>created</code>、<code>mounted</code>、<code>updated</code> 和 <code>destroyed</code></p>\n<p><strong>不要在選項 property 或 callback 使用箭頭函式</strong>。因為箭頭函式並沒有 this，this 會作為變數一直向上級詞法作用域查詢，直至找到為止，經常導致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之類的錯誤。</p>\n<h2 id=\"資料繫結\"><a href=\"#資料繫結\" class=\"headerlink\" title=\"資料繫結\"></a>資料繫結</h2><p>資料繫結最常見的形式就是使用“Mustache”語法 (雙大括號) 的文字插值：<br>雙大括號會將資料解釋為普通文字，而非 HTML 程式碼</p>\n<p><code>&lt;span&gt;Message: ｛｛ msg ｝｝&lt;/span&gt;</code></p>\n<p>可使用表示式<br><code>｛｛ ok ? &#39;YES&#39; : &#39;NO&#39; ｝｝</code></p>\n<p>透過使用 <code>v-once</code> 指令，你也能執行一次性地插值，當資料改變時，插值處的內容不會更新。但請留心這會影響到該節點上的其它資料繫結：</p>\n<p><code>&lt;span v-once&gt;這個將不會改變: ｛｛ msg ｝｝&lt;/span&gt;</code></p>\n<p>為了輸出真正的 HTML，你需要使用 <code>v-html</code> 指令<br><code>&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;</code><br><strong>動態渲染 HTML 可能會非常危險，因為它很容易導致 XSS 攻擊。請只對可信內容使用 HTML 插值，絕不要對使用者提供的內容使用插值。</strong></p>\n<p>Mustache 語法不能作用在 HTML attribute 上，應該使用 <code>v-bind</code> 指令：<br><code>&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</code><br><code>&lt;div v-bind:id=&quot;&#39;list-&#39; + id&quot;&gt;&lt;/div&gt;</code></p>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>指令 (Directives) 是帶有 <code>v-</code> 字首的特殊 attribute。<br>指令 attribute 的值預期是單個 JavaScript 表示式 (<code>v-for</code> 是例外)。<br>指令的職責是，當表示式的值改變時，將其產生的連帶影響，響應式地作用於 DOM。</p>\n<p>一些指令能夠接收一個“引數”，在指令名稱之後以冒號表示。例如，<code>v-bind</code> 指令可以用於響應式地更新 HTML attribute<br><code>&lt;a v-bind:href&gt;</code></p>\n<p>從 2.6.0 開始，可以用方括號括起來的 JavaScript 表示式作為一個指令的引數：<br><code>&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;</code></p>\n<p>動態引數預期會求出一個字串，異常情況下值為 null。這個特殊的 null 值可以用於移除繫結。任何其它非字串型別的值都將會觸發一個警告。</p>\n<h3 id=\"修飾符\"><a href=\"#修飾符\" class=\"headerlink\" title=\"修飾符\"></a>修飾符</h3><p>修飾符 (modifier) 是以 <code>.</code> 指明的特殊字尾，用於指出一個指令應該以特殊方式繫結。例如<code>.prevent</code> 修飾符告訴 <code>v-on</code> 指令對於觸發的事件呼叫 <code>event.preventDefault()</code></p>\n<p><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;</code></p>\n<p>Vue 為 <code>v-bind</code> 和 <code>v-on</code> 這兩個最常用的指令，提供了特定簡寫：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 完整語法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 縮寫 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 完整語法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 縮寫 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"計算屬性-computed\"><a href=\"#計算屬性-computed\" class=\"headerlink\" title=\"計算屬性(computed)\"></a>計算屬性(computed)</h3><p>對於任何複雜邏輯，你都應當使用計算屬性<br>計算屬性只在相關響應式依賴發生改變時它們才會重新求值，這是比使用function好的地方</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 計算屬性的 getter</span></span><br><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// `this` 指向 vm 例項</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)<span class=\"comment\">//olleH</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>下面的計算屬性將不再更新，因為 Date.now() 不是響應式依賴：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  now: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>計算屬性預設只有 getter，不過在需要時你也可以提供一個 setter：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  fullName: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// better than set two variables seperately</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function (newValue) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><p>監視某個資料，當其發生改變，這個函式就會執行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"watch-example\"</span>&gt;</span><br><span class=\"line\">  &lt;p&gt;</span><br><span class=\"line\">    Ask a yes/no question:</span><br><span class=\"line\">    &lt;input v-model=<span class=\"string\">\"question\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;｛｛ answer ｝｝&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!-- 因為 AJAX 庫和通用工具的生態已經相當豐富，Vue 核心程式碼沒有重複 --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;!-- 提供這些功能以保持精簡。這也可以讓你自由選擇自己更熟悉的工具。 --&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"https:/</span><span class=\"regexp\">/cdn.jsdelivr.net/</span>npm/axios@<span class=\"number\">0.12</span><span class=\"number\">.0</span>/dist/axios.min.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script src=\"</span>https:<span class=\"comment\">//cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#watch-example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    question: <span class=\"string\">''</span>,</span><br><span class=\"line\">    answer: <span class=\"string\">'I cannot give you an answer until you ask a question!'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 `question` 發生改變，這個函式就會執行</span></span><br><span class=\"line\">    question: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Waiting for you to stop typing...'</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.debouncedGetAnswer()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// `_.debounce` 是一個透過 Lodash 限制操作頻率的函式。</span></span><br><span class=\"line\">    <span class=\"comment\">// 在這個例子中，我們希望限制訪問 yesno.wtf/api 的頻率</span></span><br><span class=\"line\">    <span class=\"comment\">// AJAX 請求直到使用者輸入完畢才會發出。想要瞭解更多關於</span></span><br><span class=\"line\">    <span class=\"comment\">// `_.debounce` 函式 (及其近親 `_.throttle`) 的知識，</span></span><br><span class=\"line\">    <span class=\"comment\">// 請參考：https://lodash.com/docs#debounce</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"keyword\">this</span>.getAnswer, <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getAnswer: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.question.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Questions usually contain a question mark. ;-)'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Thinking...'</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span><br><span class=\"line\">      axios.get(<span class=\"string\">'https://yesno.wtf/api'</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">          vm.answer = _.capitalize(response.data.answer)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">          vm.answer = <span class=\"string\">'Error! Could not reach the API. '</span> + error</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Class-與-Style-繫結\"><a href=\"#Class-與-Style-繫結\" class=\"headerlink\" title=\"Class 與 Style 繫結\"></a>Class 與 Style 繫結</h2><p><code>&lt;div v-bind:class=&quot;{ active: isActive }&quot;&gt;&lt;/div&gt;</code><br>上面的語法表示 active 這個 class 存在與否將取決於資料 property isActive 的 truthiness。</p>\n<p>我們也可以在這裡繫結一個返回物件的計算屬性。這是一個常用且強大的模式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"classObject\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">data: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  isActive: true,</span></span><br><span class=\"line\"><span class=\"regexp\">  error: null</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  classObject: function () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      active: this.isActive &amp;&amp; !this.error,</span></span><br><span class=\"line\"><span class=\"regexp\">      'text-danger': this.error &amp;&amp; this.error.type === 'fatal'</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>陣列語法中也可以使用物件語法：<br><code>&lt;div v-bind:class=&quot;[{ active: isActive }, errorClass]&quot;&gt;&lt;/div&gt;</code></p>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'A'\"</span>&gt;</span></span><br><span class=\"line\">  A</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'B'\"</span>&gt;</span></span><br><span class=\"line\">  B</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'C'\"</span>&gt;</span></span><br><span class=\"line\">  C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  Not A/B/C</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在html用<code>template</code>作為隱形元素，不渲染</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"ok\"</span>&gt;</span><br><span class=\"line\">  &lt;h1&gt;Title&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;Paragraph 1&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;Paragraph <span class=\"number\">2</span>&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Vue 會儘可能高效地渲染元素，通常會復用已有元素而不是從頭開始渲染。這麼做除了使 Vue 變得非常快之外，還有其它一些好處。例如，如果你允許使用者在不同的登入方式之間切換：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Username&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your username\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\">&lt;template v-<span class=\"keyword\">else</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Email&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your email address\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>那麼在上面的程式碼中切換 loginType 將不會清除使用者已經輸入的內容。因為兩個模板使用了相同的元素，<code>&lt;input&gt;</code> 不會被替換掉——僅僅是替換了它的 placeholder。</p>\n<p>帶有 <code>v-show</code> 的元素始終會被渲染並保留在 DOM 中。<code>v-show</code> 只是簡單地切換元素的 CSS property display。<br>注意，<code>v-show</code> 不支援 <code>&lt;template&gt;</code> 元素，也不支援 <code>v-else</code>。</p>\n<p><code>v-if</code> 是“真正”的條件渲染，因為它會確保在切換過程中條件塊內的事件監聽器和子元件適當地被銷毀和重建。</p>\n<p><code>v-if</code> 也是惰性的：如果在初始渲染時條件為假，則什麼也不做——直到條件第一次變為真時，才會開始渲染條件塊。</p>\n<p>相比之下，<code>v-show</code> 就簡單得多——不管初始條件是什麼，元素總是會被渲染，並且只是簡單地基於 CSS 進行切換。</p>\n<blockquote>\n<p>一般來說，v-if 有更高的切換開銷，而 v-show 有更高的初始渲染開銷。因此，如果需要非常頻繁地切換，則使用 v-show 較好；如果在執行時條件很少改變，則使用 v-if 較好。</p>\n</blockquote>\n<p><strong>不推薦同時使用 v-if 和 v-for</strong>。請查閱風格指南以獲取更多資訊。</p>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><p><code>v-for</code> 還支援一個可選的第二個引數，即當前項的索引。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"example-2\"</span>&gt;</span><br><span class=\"line\">  &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span><br><span class=\"line\">    ｛｛ parentMessage ｝｝ - ｛｛ index ｝｝ - ｛｛ item.message ｝｝</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以用 <code>of</code> 替代 <code>in</code> 作為分隔符，因為它更接近 JavaScript 迭代器的語法：</p>\n<p><code>&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</code></p>\n<p>可以用 <code>v-for</code> 來遍歷一個物件的 property。<br>也可以提供第二個的引數為 property 名稱 (也就是key)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"v-for-object\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"demo\"</span>&gt;</span><br><span class=\"line\">  &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"value in object\"</span>&gt;</span><br><span class=\"line\">    ｛｛ value ｝｝</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>l&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 在遍歷物件時，會按 <span class=\"built_in\">Object</span>.keys() 的結果遍歷，但是不能保證它的結果在不同的 JavaScript 引擎下都一致。 --&gt;</span><br><span class=\"line\">&lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(value, name) in object\"</span>&gt;</span><br><span class=\"line\">  ｛｛ name ｝｝: ｛｛ value ｝｝</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>v-for</code> 渲染的元素列表時，它預設使用“就地更新”的策略。如果資料項的順序被改變，Vue 將不會移動 DOM 元素來匹配資料項的順序，而是就地更新每個元素，並且確保它們在每個索引位置正確渲染</p>\n<p>這個預設的模式是高效的，但是隻適用於不依賴子元件狀態或臨時 DOM 狀態 (例如：表單輸入值) 的列表渲染輸出。</p>\n<p>為了給 Vue 一個提示，以便它能跟蹤每個節點的身份，從而重用和重新排序現有元素，<strong>你需要為每項提供一個唯一的 key attribute</strong></p>\n<h3 id=\"自動檢測變化的限制\"><a href=\"#自動檢測變化的限制\" class=\"headerlink\" title=\"自動檢測變化的限制\"></a>自動檢測變化的限制</h3><p><strong>由於 JavaScript 的限制，Vue 不能檢測陣列(array)和物件(object)的變化</strong></p>\n<p>Vue 將被偵聽的陣列的變更方法進行了包裹，所以它們也將會觸發檢視更新。這些被包裹過的方法包括：</p>\n<ul>\n<li><code>push()</code></li>\n<li><code>pop()</code></li>\n<li><code>shift()</code></li>\n<li><code>unshift()</code></li>\n<li><code>splice()</code></li>\n<li><code>sort()</code></li>\n<li><code>reverse()</code></li>\n</ul>\n<p>相比之下，也有非變更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它們不會變更原始陣列，而總是返回一個新陣列</p>\n<h3 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h3><p>注意這裡的 <code>is=&quot;todo-item&quot;</code> attribute。這種做法在使用 DOM 模板時是十分必要的，因為在 <code>&lt;ul&gt;</code> 元素內只有 <code>&lt;li&gt;</code> 元素會被看作有效內容。這樣做實現的效果與 <code>&lt;todo-item&gt;</code> 相同，但是可以避開一些潛在的瀏覽器解析錯誤。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo-list-example\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"addNewTodo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"new-todo\"</span>&gt;</span>Add a todo<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-model</span>=<span class=\"string\">\"newTodoText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">\"new-todo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">placeholder</span>=<span class=\"string\">\"E.g. Feed the cat\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">is</span>=<span class=\"string\">\"todo-item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"(todo, index) in todos\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"todo.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"todo.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-on:remove</span>=<span class=\"string\">\"todos.splice(index, 1)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v-on-dom-event\"><a href=\"#v-on-dom-event\" class=\"headerlink\" title=\"v-on: dom event\"></a>v-on: dom event</h3><p>用特殊變數 <code>$event</code>訪問原始的 DOM 事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span><br><span class=\"line\">  Submit</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ ...</span></span><br><span class=\"line\"><span class=\"regexp\">methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  warn: function (message, event) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 現在我們可以訪問原生事件物件</span></span><br><span class=\"line\"><span class=\"regexp\">    if (event) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      event.preventDefault()</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    alert(message)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Vue.js 為 <code>v-on</code> 提供了事件修飾符。之前提過，修飾符是由點開頭的指令字尾來表示的。</p>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n<li><code>.passive</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止單擊事件繼續傳播 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再過載頁面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修飾符可以串聯 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只有修飾符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 新增事件監聽器時使用事件捕獲模式 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即內部元素觸發的事件先在此處理，然後才交由內部元素進行處理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只當在 event.target 是當前元素自身時觸發處理函式 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即事件不是從內部元素觸發的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-on-input\"><a href=\"#v-on-input\" class=\"headerlink\" title=\"v-on: input\"></a>v-on: input</h2><p>Vue 允許為 <code>v-on</code> 在監聽鍵盤事件時新增按鍵修飾符：<br>你可以直接將 KeyboardEvent.key 暴露的任意有效按鍵名轉換為 kebab-case 來作為修飾符。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 只有在 `key` 是 `Enter` 時呼叫 `vm.submit()` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.page-down</span>=<span class=\"string\">\"onPageDown\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即使 Alt 或 Shift 被一同按下時也會觸發 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.ctrl</span>=<span class=\"string\">\"onClick\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 有且只有 Ctrl 被按下的時候才觸發 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.ctrl.exact</span>=<span class=\"string\">\"onCtrlClick\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>滑鼠按鈕修飾符</p>\n<ul>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n<li><code>.middle</code></li>\n</ul>\n<h2 id=\"v-model-Input\"><a href=\"#v-model-Input\" class=\"headerlink\" title=\"v-model: Input\"></a>v-model: Input</h2><blockquote>\n<p>這是 Vue 完全贏過 React 的部分</p>\n</blockquote>\n<p>你可以用 <code>v-model</code> 指令在表單 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上建立雙向資料繫結。它會根據控制元件型別自動選取正確的方法來更新元素。儘管有些神奇，但 <code>v-model</code> 本質上不過是語法糖。它負責監聽使用者的輸入事件以更新資料，並對一些極端場景進行一些特殊處理。</p>\n<p><code>v-model</code> 只看binding data的值，會忽略所有表單元素的 value、checked、selected attribute 的初始值</p>\n<p><code>v-model</code> 在內部為不同的輸入元素使用不同的 property 並丟擲不同的事件：</p>\n<ul>\n<li>text 和 textarea 元素使用 value property 和 input 事件；</li>\n<li>checkbox 和 radio 使用 checked property 和 change 事件；</li>\n<li>select 欄位將 value 作為 prop 並將 change 作為事件。<!-- (? need example) -->\n\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchText\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">等價於：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"searchText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:input</span>=<span class=\"string\">\"searchText = $event.target.value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- checkbox example --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"jack\"</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"john\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"John\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"john\"</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mike\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Mike\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"mike\"</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Checked names: ｛｛ checkedNames ｝｝<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '...',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checkedNames: []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- select example --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>請選擇<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: ｛｛ selected ｝｝<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: '...',</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    selected: ''</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>v-model</code> 表示式的初始值未能匹配任何選項，<code>&lt;select&gt;</code> 元素將被渲染為“未選中”狀態。在 iOS 中，這會使使用者無法選擇第一個選項。因為這樣的情況下，iOS 不會觸發 <code>change</code> 事件。因此，更推薦像上面這樣提供一個值為空的禁用選項。</p>\n<h3 id=\"input-繫結-variable\"><a href=\"#input-繫結-variable\" class=\"headerlink\" title=\"input 繫結 variable\"></a>input 繫結 variable</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">true-value</span>=<span class=\"string\">\"yes\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">false-value</span>=<span class=\"string\">\"no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">// 當選中時</span><br><span class=\"line\">vm.toggle === 'yes'</span><br><span class=\"line\">// 當沒有選中時</span><br><span class=\"line\">vm.toggle === 'no'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"pick\"</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"a\"</span>&gt;</span></span><br><span class=\"line\">// 當選中時</span><br><span class=\"line\">vm.pick === vm.a</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- v-model as object --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 內聯物件字面量 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"&#123; number: 123 &#125;\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 當選中時</span><br><span class=\"line\">typeof vm.selected // =&gt; 'object'</span><br><span class=\"line\">vm.selected.number // =&gt; 123</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v-model-修飾符\"><a href=\"#v-model-修飾符\" class=\"headerlink\" title=\"v-model: 修飾符\"></a>v-model: 修飾符</h3><p><code>.lazy</code><br>在預設情況下，v-model 在每次 input 事件觸發後將輸入框的值與資料進行同步 (除了上述輸入法組合文字時)。</p>\n<p>新增 lazy 修飾符，等到滑鼠移到輸入框外，觸發 change 事件才更新。</p>\n<p><code>.number</code><br>自動將使用者的輸入值轉為數值型別</p>\n<p><code>&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</code><br>這通常很有用，因為即使在 type=”number” 時，HTML 輸入元素的值也總會返回字串。如果這個值無法被 parseFloat() 解析，則會返回原始的值。</p>\n<p><code>.trim</code><br>如果要自動過濾使用者輸入的首尾空白字元，可以給 v-model 新增 trim 修飾符：</p>\n<h2 id=\"元件-Components\"><a href=\"#元件-Components\" class=\"headerlink\" title=\"元件 Components\"></a>元件 Components</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定義一個名為 button-counter 的新元件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;button v-on:click=\"count++\"&gt;You clicked me ｛｛ count ｝｝ times.&lt;/button&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>元件是可復用的 Vue 例項，且帶有一個名字：在這個例子中是 <code>&lt;button-counter&gt;</code>。我們可以在一個透過 new Vue 建立的 Vue 根例項中，把這個元件作為自定義元素來使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"components-demo\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因為元件是可復用的 Vue 例項，所以它們與 new Vue 接收相同的選項，例如 data、computed、watch、methods 以及生命週期鉤子等。<strong>僅有的例外是像 el 這樣根例項特有的選項</strong>。</p>\n<p>為了能在模板中使用，這些元件必須先註冊以便 Vue 能夠識別。這裡有兩種元件的註冊型別：全域性註冊和區域性註冊。至此，我們的元件都只是透過 Vue.component 全域性註冊的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component-name'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... options ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>全域性註冊的元件可以用在其被註冊之後的任何 (透過 new Vue) 新建立的 Vue 根例項，也包括其元件樹中的所有子元件的模板中。</p>\n<p>而區域性註冊的好處是當你使用的是webpack這樣的構建系統時，如果是用全域性註冊的這種方法註冊的元件，那麼當你不使用某一個元件的時候，它仍然會存在最終的構建結果之中，這就增加的無謂的js下載。</p>\n<h3 id=\"data-是一個函式\"><a href=\"#data-是一個函式\" class=\"headerlink\" title=\"data 是一個函式\"></a>data 是一個函式</h3><p>data 是一個函式，因此每個例項可以維護一份被返回物件的獨立的複製：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>每個元件必須只有一個根元素。你可以將模板的內容包裹在一個父元素內，來修復這個問題，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blog-post\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>｛｛ title ｝｝<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>當元件變得越來越複雜的時候，為每個相關的資訊定義一個 prop 會變得很麻煩：<br>所以是時候重構一下這個 <code>&lt;blog-post&gt;</code> 元件了，讓它變成接受一個單獨的 post prop：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"post in posts\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"post.title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:content</span>=<span class=\"string\">\"post.content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:publishedAt</span>=<span class=\"string\">\"post.publishedAt\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:comments</span>=<span class=\"string\">\"post.comments\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-for</span>=<span class=\"string\">\"post in posts\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"post.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:post</span>=<span class=\"string\">\"post\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\">Vue.component('blog-post', &#123;</span><br><span class=\"line\">  props: ['post'],</span><br><span class=\"line\">  template: `</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blog-post\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>｛｛ post.title ｝｝<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"post.content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- other props --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    `</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>父級元件可以像處理 native DOM 事件一樣透過 <code>v-on</code> 監聽子元件例項的任意事件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">\"postFontSize += 0.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br><span class=\"line\">同時子元件可以透過呼叫內建的 `$emit` 方法並傳入事件名稱來觸發一個事件：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"$emit('enlarge-text')\"</span>&gt;</span></span><br><span class=\"line\">  Enlarge text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用事件傳遞一個值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"$emit('enlarge-text', 0.1)\"</span>&gt;</span></span><br><span class=\"line\">  Enlarge text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 透過 $event 訪問到被拋出的這個值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-on:enlarge-text</span>=<span class=\"string\">\"postFontSize += $event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>emit input的值使 custom-input 可以更新<code>v-model</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;custom-input v-model=<span class=\"string\">\"searchText\"</span>&gt;&lt;<span class=\"regexp\">/custom-input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Vue.component('custom-input', &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  props: ['value'],</span></span><br><span class=\"line\"><span class=\"regexp\">  template: `</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;input</span></span><br><span class=\"line\"><span class=\"regexp\">      v-bind:value=\"value\"</span></span><br><span class=\"line\"><span class=\"regexp\">      v-on:input=\"$emit('input', $event.target.value)\"</span></span><br><span class=\"line\"><span class=\"regexp\">    &gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  `</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;layout&gt;</span><br><span class=\"line\">    &lt;p slot=<span class=\"string\">\"header\"</span>&gt;這裡可能是一個頁面標題&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;主要內容的一個段落。&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p&gt;另一個主要段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p slot=\"footer\"&gt;這裡有一些聯繫信息&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/layout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'layout'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"container\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;header&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"header\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/header&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;main&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/main&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot name=\"footer\"&gt;&lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/footer&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;`</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"動態切換component\"><a href=\"#動態切換component\" class=\"headerlink\" title=\"動態切換component\"></a>動態切換component</h3><p>有的時候，在不同元件之間進行動態切換是非常有用的，比如在一個多標籤的介面裡：</p>\n<p>上述內容可以透過 Vue 的 <code>&lt;component&gt;</code> 元素加一個特殊的 is attribute 來實現：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 元件會在 `currentTabComponent` 改變時改變 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentTabComponent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，currentTabComponent 可以包括已註冊元件的名字，或一個元件的選項物件</p>\n<h3 id=\"解析-DOM-模板時的注意事項\"><a href=\"#解析-DOM-模板時的注意事項\" class=\"headerlink\" title=\"解析 DOM 模板時的注意事項\"></a>解析 DOM 模板時的注意事項</h3><p>有些 HTML 元素，諸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，對於哪些元素可以出現在其內部是有嚴格限制的。而有些元素，諸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出現在其它某些特定的元素內部。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- wrong --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">blog-post-row</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blog-post-row</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- correct --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"blog-post-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是如果我們從以下來源使用模板的話，這條限制是不存在的：</p>\n<ul>\n<li>字串 (例如：template: ‘…’)</li>\n<li>單檔案元件 (.vue)</li>\n<li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li>\n</ul>\n<h3 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL3Byb3RvdHlwaW5nLmh0bWw=\">使用vue cli<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>說回App.vue這個檔案，這是一個檢視（或者說元件和頁面），想像一下我們的index.html中什麼也沒有，只有一個檢視，這個檢視相當於一個容器，然後我們往這個容器中放各種各樣的積木（其他元件或者其他頁面）</p>\n<p>將<code>App.vue</code>放到<code>#app</code>中，然後以<code>&lt;App/&gt;</code>來指代我們的<code>#app</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span><span class=\"comment\">/*引入App這個元件*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span><span class=\"comment\">/*引入路由配置*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,<span class=\"comment\">/*最後效果將會替換頁面中id為app的div元素*/</span></span><br><span class=\"line\">  router,<span class=\"comment\">/*使用路由*/</span></span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span>,<span class=\"comment\">/*告知頁面這個元件用這樣的標籤來包裹著,並且使用它*/</span></span><br><span class=\"line\">  components: &#123; App &#125;<span class=\"comment\">/*告知當前頁面想使用App這個元件*/</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUv\">https://cn.vuejs.org/v2/guide/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZXRlcmhwY2hlbi5naXRodWIuaW8v\">https://peterhpchen.github.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeXRoaWx5YS5naXRodWIuaW8vMjAxNy8xMC8xMS92dWUtY29tcG9uZW50LXNsb3Qv\">https://cythilya.github.io/2017/10/11/vue-component-slot/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "vuejs",
                "javascript"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/simple-website-host/",
            "url": "http://gitqwerty777.github.io/simple-website-host/",
            "title": "自建網站方法",
            "date_published": "2020-08-18T16:45:00.000Z",
            "content_html": "<h2 id=\"不用免費架站服務的理由\"><a href=\"#不用免費架站服務的理由\" class=\"headerlink\" title=\"不用免費架站服務的理由\"></a>不用免費架站服務的理由</h2><p>若只是要純粹建blog，用github page + <a href=\"/build-hexo-blog/\">hexo</a> 即可。</p>\n<p>更簡單的方法就是用痞客邦、Blogger等免費部落格。</p>\n<p>不過自架有以下優點</p>\n<a id=\"more\"></a>\n\n<h3 id=\"資料轉移彈性\"><a href=\"#資料轉移彈性\" class=\"headerlink\" title=\"資料轉移彈性\"></a>資料轉移彈性</h3><p>要確認資料是容易轉移的，即匯出後的檔案可被其他平台匯入。</p>\n<p>即資料的格式是公開的，而非只有特定廠商才能讀取。</p>\n<p>像是 hexo 是用 markdown 格式儲存文章，日後若 hexo 不再更新，可以轉換到其他支援 markdown 的服務，如jekyll。</p>\n<p>儘量減少對特定服務商的依賴</p>\n<p>當轉移資料的成本太高時，就會失去選擇的自由。</p>\n<h3 id=\"更多功能\"><a href=\"#更多功能\" class=\"headerlink\" title=\"更多功能\"></a>更多功能</h3><p>免費廠商提供的設定選項不一定符合需求，若要自訂功能就會很麻煩。</p>\n<h2 id=\"網路主機\"><a href=\"#網路主機\" class=\"headerlink\" title=\"網路主機\"></a>網路主機</h2><p>考慮連線速度及品質，最好是找離台灣近一點的host，也可用電腦+固定IP自建。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9lYzIv\">amazon ec2<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>可選server地區，各地區價格不同</li>\n<li>有提供預設的image，包含LAMP</li>\n<li>第一年免費</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9saWdodHNhaWwv\">amazon lightsail<i class=\"fa fa-external-link-alt\"></i></span><ul>\n<li>簡化版的ec2，較便宜</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2l0ZWdyb3VuZC5jb20v\">siteground<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><a href=\"www.bluehost.com\">bluehost</a></li>\n</ul>\n<h2 id=\"網域\"><a href=\"#網域\" class=\"headerlink\" title=\"網域\"></a>網域</h2><p>非必要，直接用IP連也可。</p>\n<p>價格很浮動，和機票一樣，建議查完就買，不然可能會變貴。</p>\n<p>有些第一年特價的域名最好別買，不然續約時變原價，又要換域名。</p>\n<h3 id=\"網域商\"><a href=\"#網域商\" class=\"headerlink\" title=\"網域商\"></a>網域商</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nYW5kaS5saW5rL2YvMGFjZjQzZmE=\">gandi<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9yb3V0ZTUzLw==\">route53<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90dy5nb2RhZGR5LmNvbS8=\">godaddy<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><a href=\"www.namecheap.com\">namecheap</a></li>\n</ul>\n<h3 id=\"SSL憑證\"><a href=\"#SSL憑證\" class=\"headerlink\" title=\"SSL憑證\"></a>SSL憑證</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZXRzZW5jcnlwdC5vcmcvemgtdHcv\">letsencrypt<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>若用amazon主機，也有<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9jZXJ0aWZpY2F0ZS1tYW5hZ2VyLw==\">免費提供<i class=\"fa fa-external-link-alt\"></i></span>，</li>\n</ul>\n<h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>建議用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20v\">cloudflare<i class=\"fa fa-external-link-alt\"></i></span>設定，要換網域商時較方便</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><ul>\n<li><a href=\"/rss-social-network/\">RSS服務</a></li>\n<li>個人主頁</li>\n<li>子網域</li>\n</ul>\n<h2 id=\"備註\"><a href=\"#備註\" class=\"headerlink\" title=\"備註\"></a>備註</h2><ul>\n<li>若有學生身份可用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lZHVjYXRpb24uZ2l0aHViLmNvbS9wYWNr\">github學生禮包<i class=\"fa fa-external-link-alt\"></i></span>，提供免費域名及amazon 100鎂額度<ul>\n<li>可以用多個同學的github人頭帳號，當長時間的免費仔</li>\n</ul>\n</li>\n<li>個人目前已非學生，amazon T2.micro(1GB memory, 8GB Disk, 一個月8鎂) + gandi 的 <code>.me</code> 網域(一年17鎂)，還算堪用</li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuanl0MDUzMi5jb20vMjAxNy8xMi8xMS9sYXVuY2gtZWMyLWluLXRlbi1taW51dGVzLw==\">十分鐘在AWS架好個人部落格<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "hexo",
                "blog",
                "markdown",
                "amazon",
                "webhost",
                "ssl"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/zen-of-python/",
            "url": "http://gitqwerty777.github.io/zen-of-python/",
            "title": "Python 之禪",
            "date_published": "2020-08-17T16:45:00.000Z",
            "content_html": "<h2 id=\"import-this\"><a href=\"#import-this\" class=\"headerlink\" title=\"import this\"></a>import this</h2><blockquote>\n<p>The Zen of Python, by Tim Peters</p>\n</blockquote>\n<blockquote>\n<p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"翻譯和解釋\"><a href=\"#翻譯和解釋\" class=\"headerlink\" title=\"翻譯和解釋\"></a>翻譯和解釋</h2><p>基本上在解釋 clean code 的做法</p>\n<p>優美優於醜陋，</p>\n<p>明瞭優於隱晦；</p>\n<p>簡單優於複雜，</p>\n<p>複雜優於凌亂，</p>\n<blockquote>\n<p>如果復雜不可避免，那代碼間也不能有難懂的關係，要保持接口簡潔</p>\n</blockquote>\n<p>扁平優於嵌套，</p>\n<p>稀疏優於稠密，</p>\n<p>可讀性很重要！</p>\n<p>即使實用比純粹更優，</p>\n<p>特例亦不可違背原則。</p>\n<p>錯誤絕不能悄悄忽略，</p>\n<p>除非它明確需要如此。</p>\n<p>面對不確定性，</p>\n<p>拒絕妄加猜測。</p>\n<p>任何問題應有一種，</p>\n<p>且最好只有一種，</p>\n<p>顯而易見的解決方法。</p>\n<p>儘管這方法一開始並非如此直觀，</p>\n<p>除非你是荷蘭人。</p>\n<blockquote>\n<p>解決一個問題的方法可能會有很多種，但在Python中，只選擇最明顯的那一個</p>\n</blockquote>\n<p>做優於不做，</p>\n<p>然而不假思索還不如不做。</p>\n<p>很難解釋的，必然是壞方法。</p>\n<p>很好解釋的，可能是好方法。</p>\n<p>命名空間是個絕妙的主意，</p>\n<p>我們應好好利用它。</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraXdhbmQuY29tL3poLXR3L1B5dGhvbiVFNCVCOSU4QiVFNyVBNiU4NQ==\">wiki<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXAtMDAyMC8=\">PEP-20<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/comment-meaning/",
            "url": "http://gitqwerty777.github.io/comment-meaning/",
            "title": "程式註解的常用標記",
            "date_published": "2020-08-06T12:08:03.000Z",
            "content_html": "<ul>\n<li><code>TODO</code></li>\n<li><code>FIXME</code></li>\n<li><code>XXX</code></li>\n<li><code>NOTE</code></li>\n<li><code>HACK</code></li>\n</ul>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li>需要實作的部份<ul>\n<li>Bug, 錯誤, 改進等都不是<code>TODO</code>，見下述</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"FIXME\"><a href=\"#FIXME\" class=\"headerlink\" title=\"FIXME\"></a>FIXME</h2><ul>\n<li>錯誤的、需要修正的部份</li>\n<li>相似的標記:  <code>BUG</code><ul>\n<li><code>FIXME</code> 解釋如何修正</li>\n<li><code>BUG</code> 記錄錯誤如何發生</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"XXX\"><a href=\"#XXX\" class=\"headerlink\" title=\"XXX\"></a>XXX</h2><ul>\n<li>需要改進的實作方式</li>\n<li>相似的標記: <code>REFACT</code><ul>\n<li>想重構時可用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h2><ul>\n<li>說明程式碼的如何使用<ul>\n<li>就是註解原本的用途</li>\n<li>所以實際上不用加<code>NOTE</code>，直接寫也可以</li>\n</ul>\n</li>\n<li>相似的標記: <code>MARK</code></li>\n</ul>\n<h2 id=\"HACK\"><a href=\"#HACK\" class=\"headerlink\" title=\"HACK\"></a>HACK</h2><ul>\n<li>一個暫時、骯髒的解法</li>\n<li>不應該進commit</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>VSCode 中的套件<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPUdydW50ZnVnZ2x5LnRvZG8tdHJlZQ==\">TODO tree<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n<li>除了標記，還需要說明文字，多人協作時也可署名</li>\n<li>範例<ul>\n<li>❌<code>TODO:</code></li>\n<li>➖<code>TODO: lowercase</code></li>\n<li>⭕<code>TODO(qwerty): lowercase</code></li>\n</ul>\n</li>\n<li>有些標記不需要寫在程式碼中<ul>\n<li><code>BUG</code>：應該有專用的Bug tracker</li>\n<li><code>TODO</code>：應記錄在Todo tracker</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L3RoZS1hcnQtb2YvOTc4MTQ0OTMxODQ4Mi8=\">The art of readable code<i class=\"fa fa-external-link-alt\"></i></span></p>\n",
            "tags": [
                "CodingStyle",
                "程式",
                "Todo",
                "註解"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/seo/",
            "url": "http://gitqwerty777.github.io/seo/",
            "title": "SEO實作方法",
            "date_published": "2020-08-03T13:52:12.000Z",
            "content_html": "<blockquote>\n<p>hexo 都實作得差不多了，純整理</p>\n</blockquote>\n<h2 id=\"html-tag\"><a href=\"#html-tag\" class=\"headerlink\" title=\"html tag\"></a>html tag</h2><h3 id=\"lt-title-gt\"><a href=\"#lt-title-gt\" class=\"headerlink\" title=\"&lt;title&gt;\"></a>&lt;title&gt;</h3><ul>\n<li>網頁的主題</li>\n<li><code>&lt;title&gt;</code>標記應該放在HTML文件的<code>&lt;head&gt;</code>標記區段中<a id=\"more\"></a>\n\n</li>\n</ul>\n<h3 id=\"lt-meta-gt\"><a href=\"#lt-meta-gt\" class=\"headerlink\" title=\"&lt;meta&gt;\"></a>&lt;meta&gt;</h3><ul>\n<li>網頁的摘要</li>\n<li>描述中繼標記<code>&lt;meta&gt;</code>也位於HTML文件的<code>&lt;head&gt;</code>標記部分中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">“description”</span> <span class=\"attr\">content</span>=<span class=\"string\">“Brandon’s</span> <span class=\"attr\">Baseball</span> <span class=\"attr\">Cards</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">provides</span> <span class=\"attr\">a</span> <span class=\"attr\">large</span> <span class=\"attr\">selection</span> <span class=\"attr\">of</span> <span class=\"attr\">vintage</span> <span class=\"attr\">and</span> <span class=\"attr\">modern</span> <span class=\"attr\">baseball</span> <span class=\"attr\">cards</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">for</span> <span class=\"attr\">sale.</span> <span class=\"attr\">We</span> <span class=\"attr\">also</span> <span class=\"attr\">offer</span> <span class=\"attr\">daily</span> <span class=\"attr\">baseball</span> <span class=\"attr\">news</span> <span class=\"attr\">and</span> <span class=\"attr\">events</span> <span class=\"attr\">in</span>”&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lt-a-gt\"><a href=\"#lt-a-gt\" class=\"headerlink\" title=\"&lt;a&gt;\"></a>&lt;a&gt;</h3><ul>\n<li>連結<ul>\n<li>用文字敘述來告知使用者和Google有關您所要連結網頁的部分內容</li>\n</ul>\n</li>\n<li>同時考慮內部連結的錨定文字<ul>\n<li>多加注意用於內部連結的錨定文字可以幫助使用者和Google更容易瀏覽您的網站</li>\n</ul>\n</li>\n<li>請避免<ul>\n<li>只是為了搜尋引擎而使用大量關鍵字或冗長的錨定文字</li>\n<li>建立不必要的連結，這對使用者瀏覽網站無益</li>\n</ul>\n</li>\n<li>將<code>rel</code>屬性值設定為<code>nofollow</code><ul>\n<li>告知搜尋引擎不應隨著您網站上的某些連結連至他處，也不應將您網頁的信譽情況傳給連上的網頁</li>\n<li>對評論欄和訊息板新增 <code>nofollow</code><ul>\n<li>評論中的連結可能將信譽傳給不願擔保的網頁</li>\n</ul>\n</li>\n<li>對個別內容、所有網頁等使用 <code>nofollow</code><ul>\n<li>想要參照某個網站，但是又不想把信譽傳給該網站<ul>\n<li>撰寫一篇以垃圾評論為主題的網誌文章</li>\n<li>並打算揭發一個最近經常在網誌上發表垃圾評論的網站</li>\n<li>希望提醒其他人對該網站提高警惕，因此將該網站的連結納入了內容中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在robots中繼標記中使用 <code>nofollow</code><ul>\n<li><code>&lt;meta name=&quot;robots&quot; content=&quot;nofollow&quot;&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"lt-img-gt\"><a href=\"#lt-img-gt\" class=\"headerlink\" title=\"&lt;img&gt;\"></a>&lt;img&gt;</h3><ul>\n<li><code>alt</code>屬性<ul>\n<li>如果因為某些原因而無法顯示圖片，<code>alt</code>屬性可允許您為圖片指定替代文字</li>\n</ul>\n</li>\n<li>將圖片檔案合併儲存於單一目錄中，而不要分散儲存在整個網域的許多目錄和子目錄下。這樣可以簡化圖片的連結路徑</li>\n<li>提供<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vd2VibWFzdGVycy9hbnN3ZXIvMTc4NjM2\">圖片Sitemap<i class=\"fa fa-external-link-alt\"></i></span>檔案</li>\n<li>簡單明瞭的檔案名稱</li>\n</ul>\n<h3 id=\"標題標記\"><a href=\"#標題標記\" class=\"headerlink\" title=\"標題標記\"></a>標題標記</h3><ul>\n<li>標題標記有六種不同大小，從<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>，其重要性依次降低<ul>\n<li>由於標題標記通常會使其中包含的文字比網頁上的普通文字大一些，因此使用者可以清楚意識到這部分文字比較重要</li>\n</ul>\n</li>\n<li>建立層次分明的結構</li>\n</ul>\n<h2 id=\"網站資訊\"><a href=\"#網站資訊\" class=\"headerlink\" title=\"網站資訊\"></a>網站資訊</h2><h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><ul>\n<li>簡單易懂的URL能夠更加容易的表達內容</li>\n<li>建立簡單的目錄架構</li>\n<li>在網址中使用文字而非數字<ul>\n<li><code>www.stasiasbakery.com/custom-cakes</code> (O)</li>\n<li><code>www.stasiasbakery.com/prodid?12345</code> (X)</li>\n</ul>\n</li>\n<li>為同一文件提供同一版本的網址<ul>\n<li>設定301重新導向，將不喜歡的網址重新導向到您所期望使用的網址，這是一個很好的解決方案</li>\n<li>無法重新導向時，也可以使用標準網頁或<code>rel=&quot;canonical&quot;</code>連結元素<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vd2VibWFzdGVycy9hbnN3ZXIvMTM5MDY2\">https://support.google.com/webmasters/answer/139066<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>請避免<ul>\n<li>無論從子域還是根目錄(例如<code>domain.com/page.htm</code>和<code>sub.domain.com/page.htm</code>)都可以瀏覽到相同的內容</li>\n<li>在網址中使用奇怪的大寫字母<ul>\n<li>大部分使用者喜歡小寫的網址， 並且小寫也便於使用者記憶</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"目錄\"><a href=\"#目錄\" class=\"headerlink\" title=\"目錄\"></a>目錄</h4><ul>\n<li>建立自然流暢的層級架構<ul>\n<li>將訪客從主網頁導向至包含特定內容的網頁</li>\n<li>導覽中儘量使用文字連結</li>\n</ul>\n</li>\n<li>移除部分網址<ul>\n<li>正在瀏覽：<code>http://www.brandonsbaseballcards.com/news/2010/upcoming-baseball-cardshows.htm</code></li>\n<li>輸入：<code>http://www.brandonsbaseballcards.com/news/2010/</code>，認為這樣就可以顯示2010年的所有新聞</li>\n<li>在這種情況下，您的網站是否已準備好顯示使用者想要的內容，還是只顯示一個404(「找不到網頁」錯誤)</li>\n</ul>\n</li>\n<li>建立實用的404網頁<ul>\n<li>使用自訂404網頁能夠確實幫助使用者返回您網站上的有效網頁，大幅改善使用者體驗</li>\n<li>最好能提供返回您網站根網頁的連結，以及前往網站中熱門或相關內容的連結</li>\n<li>Google提供了404小工具，可以將其嵌入您的404網頁，即可自動產生許多實用的功能</li>\n<li>可以使用Google網站管理員工具，找出導致「找不到網頁」錯誤的網址來源</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Sitemap\"><a href=\"#Sitemap\" class=\"headerlink\" title=\"Sitemap\"></a>Sitemap</h3><p>Sitemap(網站架構)用於顯示網站架構，通常由一份網站網頁的層級清單組成。當訪客在您的網站上找不到某些特定網頁時，即可瀏覽該網頁<br>雖然搜尋引擎也會瀏覽該網頁，以便對您網站上的網頁進行更全面的檢索，但其主要目的還是為了方便訪客</p>\n<ul>\n<li>準備兩種Sitemap：分別供使用者和搜尋引擎使用<ul>\n<li>在網站上放置HTML Sitemap</li>\n<li>建立XML Sitemap檔案並提交給搜尋引擎</li>\n</ul>\n</li>\n<li>請避免<ul>\n<li>HTML Sitemap中含有無效連結，無法到達相應的網頁</li>\n<li>建立的HTML Sitemap僅列出網頁，而沒有進行整理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"robots-txt\"><a href=\"#robots-txt\" class=\"headerlink\" title=\"robots.txt\"></a>robots.txt</h3><ul>\n<li>避免內容出現在搜尋結果中<ul>\n<li><code>robots.txt</code>檔案可告知搜尋引擎是否可以存取您網站的某些部分，進而對這些部分進行檢索</li>\n</ul>\n</li>\n<li>必須為該子網域建立一個單獨的<code>robots.txt</code>檔案</li>\n<li>其他方法<ul>\n<li>為robots中繼標記新增<code>NOINDEX</code><ul>\n<li><code>&lt;meta name=&quot;googlebot&quot; content=&quot;noindex&quot; /&gt;</code></li>\n</ul>\n</li>\n<li>使用<code>.htaccess</code>對目錄進行密碼保護</li>\n<li>使用Google網站管理員工具移除已檢索的內容</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"對敏感的內容使用更為安全的方法\"><a href=\"#對敏感的內容使用更為安全的方法\" class=\"headerlink\" title=\"對敏感的內容使用更為安全的方法\"></a>對敏感的內容使用更為安全的方法</h4><ul>\n<li><p>一些不符合條件的搜尋引擎或惡意搜尋引擎並不遵守「漫遊器排除標準」，可能會違背您的<code>robots.txt</code>指示</p>\n</li>\n<li><p>好奇的使用者可能會查看<code>robots.txt</code>檔案中的目錄或子目錄，並猜中不想曝光的內容網址</p>\n</li>\n<li><p>對內容加密或使用<code>.htaccess</code>對內容進行密碼保護是更安全的選擇</p>\n</li>\n<li><p>請避免</p>\n<ul>\n<li>允許檢索類似搜尋結果的網頁<ul>\n<li>使用者不喜歡從一個搜尋結果網頁進入另一個搜尋結果網頁，這對他們而言沒有多大價值</li>\n</ul>\n</li>\n<li>允許檢索大量自動產生的且內容相同或相似的網頁</li>\n<li>允許檢索因Proxy服務而建立的網址</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"https-和-SSL-憑證\"><a href=\"#https-和-SSL-憑證\" class=\"headerlink\" title=\"https 和 SSL 憑證\"></a>https 和 SSL 憑證</h3><p>安全性已經被視為 SEO 搜尋排名因素之一，而且當網站不安全時，人們也會感到擔心</p>\n<h3 id=\"行動網站\"><a href=\"#行動網站\" class=\"headerlink\" title=\"行動網站\"></a>行動網站</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWFyY2guZ29vZ2xlLmNvbS90ZXN0L21vYmlsZS1mcmllbmRseQ==\">Google提供的手機友善測試<i class=\"fa fa-external-link-alt\"></i></span></p>\n<ul>\n<li>驗證Google是否替行動網站製作索引<ul>\n<li>使用<code>site:</code> 運算子在Google行動搜尋</li>\n</ul>\n</li>\n<li>Googlebot可能無法存取您的網站<ul>\n<li>在網頁搜尋中使用<code>Googlebot</code></li>\n<li>在行動搜尋中使用<code>Googlebot-Mobile</code></li>\n<li>提供給<code>Googlebot</code>的內容應與電腦所見內容相同</li>\n<li>提供給<code>Googlebot-Mobile</code>的內容應與行動裝置所見的內容相同</li>\n</ul>\n</li>\n<li>請檢查易於行動裝置使用的網址，其DTD宣告是否為適當的行動格式，例如<code>XHTML</code>行動網頁或<code>Compact HTML</code></li>\n<li>正確指導行動裝置使用者<ul>\n<li>最常發生的問題就是在桌上型電腦中顯示行動版的網站，或是在行動裝置中顯示電腦版的網站</li>\n<li>重新導向至正確的版本<ul>\n<li>行動裝置使用者或行動檢索器(例如<code>Googlebot-Mobile</code>)存取電腦版的網址時，重新導向至對應的行動版網址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"網頁速度\"><a href=\"#網頁速度\" class=\"headerlink\" title=\"網頁速度\"></a>網頁速度</h3><ul>\n<li>如果讀取時間超過7秒鐘，訪客從您的網站反彈離開的可能性就會增加 113%</li>\n<li>使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZXN0bXlzaXRlLnRoaW5rd2l0aGdvb2dsZS5jb20v\">Google 的測試工具<i class=\"fa fa-external-link-alt\"></i></span> 瞭解網頁的載入速度</li>\n</ul>\n<h2 id=\"內容\"><a href=\"#內容\" class=\"headerlink\" title=\"內容\"></a>內容</h2><h3 id=\"提供優質內容和服務\"><a href=\"#提供優質內容和服務\" class=\"headerlink\" title=\"提供優質內容和服務\"></a>提供優質內容和服務</h3><ul>\n<li>內容引人注目的網站自然會受到肯定</li>\n<li>提供獨一無二的內容</li>\n<li>為使用者創作內容，而不是為搜尋引擎創作內容</li>\n<li>持續更新內容</li>\n</ul>\n<h3 id=\"宣傳\"><a href=\"#宣傳\" class=\"headerlink\" title=\"宣傳\"></a>宣傳</h3><ul>\n<li>離線宣傳<ul>\n<li>名片、信頭、海報</li>\n</ul>\n</li>\n<li>增加反向連結以提升網站的價值<ul>\n<li>撰寫網誌文章，讓訪客知道有新增內容，這是宣傳新內容或服務的絕佳方法</li>\n</ul>\n</li>\n<li>社群媒體</li>\n</ul>\n<h3 id=\"關鍵字\"><a href=\"#關鍵字\" class=\"headerlink\" title=\"關鍵字\"></a>關鍵字</h3><ul>\n<li>考量使用者為找到部分內容而可能搜尋的字詞。相較於對主題不瞭解的使用者，很瞭解該主題的使用者可能會在他們的搜尋查詢中使用不同的關鍵字<ul>\n<li>一個資深棒球愛好者可能會搜尋國家聯盟冠軍系列賽(National League Championship Series)的縮寫<code>nlcs</code></li>\n<li>一個剛剛接觸棒球的愛好者可能會使用<code>棒球季後賽</code>這樣較為普通的查詢</li>\n</ul>\n</li>\n<li>Google AdWords的關鍵字工具，可找出新的關鍵字變化，並查看每一個關鍵字的約略搜尋量</li>\n<li>Google網站管理員工具會提供網站上出現的熱門搜尋查詢</li>\n<li>請避免<ul>\n<li>針對搜尋引擎插入大量不必要的關鍵字，這些關鍵字對使用者毫無意義且令人感到厭煩</li>\n<li>欺騙性地對使用者隱藏一些文字，卻對搜尋引擎顯示這些文字</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"網站管理員工具\"><a href=\"#網站管理員工具\" class=\"headerlink\" title=\"網站管理員工具\"></a>網站管理員工具</h3><ul>\n<li>Google 網站管理員工具</li>\n<li>Yahoo! (Yahoo! Site Explorer)</li>\n<li>Microsoft (Live Search Webmaster Tools)</li>\n<li>Google Analytics(分析)</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"不符規定的方法\"><a href=\"#不符規定的方法\" class=\"headerlink\" title=\"不符規定的方法\"></a>不符規定的方法</h3><ul>\n<li>斗蓬法（cloaking）<ul>\n<li>用兩版不同的網頁來達到最佳化的效果。一個版本只給搜索引擎看，一個版本給人看</li>\n</ul>\n</li>\n<li>關鍵字隱密字 （hidden text with keyword stuffing）<ul>\n<li>設定關鍵字的顏色和網頁背景顏色一樣，或透過 css hidden attribute （隱密特性） 來達到優化效果</li>\n</ul>\n</li>\n<li>橋頁（doorway pages）<ul>\n<li>自動生成大量包含關鍵詞的網頁，然後從這些網頁做自動轉向到主頁。目的是希望這些以不同關鍵詞為目標的橋頁在搜索引擎中得到好的排名。</li>\n</ul>\n</li>\n<li>付費連結（paid link）<ul>\n<li>是利用支付費用方式要求其他網站提供連結至自身網站，藉此偽裝高信任網站來欺騙搜尋引擎，付費連結類型多為錨點文字（Anchor Text）類型</li>\n</ul>\n</li>\n<li>連結農場（link farm）<ul>\n<li>是故意在一些低質素，內容跟自己內容無關的網站上取得大量連結，藉以提高排名</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGF0aWMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL21lZGlhL3d3dy5nb29nbGUuY24vemgtVFcvY24vaW50bC96aC1UVy93ZWJtYXN0ZXJzL2RvY3Mvc2VhcmNoLWVuZ2luZS1vcHRpbWl6YXRpb24tc3RhcnRlci1ndWlkZS16aC10dy5wZGY=\">Google 搜尋引擎最佳化 (SEO) 速記指南<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGF0aWMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL21lZGlhL3d3dy5nb29nbGUuY24vemgtVFcvY24vaW50bC96aC1UVy93ZWJtYXN0ZXJzL2RvY3Mvc2VhcmNoLWVuZ2luZS1vcHRpbWl6YXRpb24tc3RhcnRlci1ndWlkZS16aC10dy5wZGY=\">搜尋引擎最佳化初學者指南<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraXdhbmQuY29tL3poLyVFNiU5MCU5QyVFNSVCMCU4QiVFNSVCQyU5NSVFNiU5MyU4RSVFNiU5QyU4MCVFNCVCRCVCMyVFNSU4QyU5Ng==\">搜尋引擎最佳化<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n",
            "tags": [
                "SEO",
                "google",
                "html"
            ]
        },
        {
            "id": "http://gitqwerty777.github.io/reactjs/",
            "url": "http://gitqwerty777.github.io/reactjs/",
            "title": "reactjs 語法",
            "date_published": "2020-07-29T06:50:12.000Z",
            "content_html": "<h2 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>這個語法叫做 JSX，是一個 JavaScript 的語法擴充，會產生 <strong>React element</strong></p>\n<a id=\"more\"></a>\n<p>Babel 將 JSX 編譯為呼叫 React.createElement() 的程式。</p>\n<p>React DOM 預設會在 render 之前 escape 所有嵌入在 JSX 中的變數。這保證你永遠不會不小心注入任何不是直接寫在你的應用程式中的東西。所有變數都會在 render 之前轉為字串，這可以避免 XSS（跨網站指令碼）攻擊。</p>\n<p>大括號內代表變數，可以放入任何javascript expression</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Josh Perez'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多行：包在小括號中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> element = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h2&gt;Good to see you here.&lt;/</span>h2&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Render\"><a href=\"#Render\" class=\"headerlink\" title=\"Render\"></a>Render</h2><p>使用 React 建立應用程式時，通常會有一個單一的 root DOM node。</p>\n<p>Render 一個 React element 到 root DOM node</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">ReactDOM.render(element, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n\n<p>React element 是 immutable 的，即不能更改</p>\n<p>Element 就像是電影中的一個幀：它代表特定時間點的 UI。</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"Component\"></a>Component</h2><p>Component 就像是 JavaScript 的 function，它接收參數（稱之為「props」，屬性）並且回傳描述畫面的 React element。</p>\n<p>Component 的字首須為大寫字母。React 會將小寫字母開頭的組件視為原始 DOM 標籤，舉例來說，<code>&lt;div /&gt;</code> 就會被視為是 HTML 的 div 標籤，但是 <code>&lt;Welcome /&gt;</code> 則是一個 component</p>\n<p>props 是唯讀的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此 function 是一個符合規範的 React component，因為它接受一個 props 物件並回傳一個 React element。</p>\n<p>我們稱之為 function component</p>\n<p>也可以使用 ES6 Class 來定義 component：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在JSX中使用component</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Welcome</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Sara\"</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>通常來說，每個 React 應用程式都有一個最高層級的 App component。然而，如果你將 React 結合至現存的應用程式中，你可能需要使用像 Button 這樣的小型 component，並由下往上，逐步應用到畫面的最高層級。</p>\n<p>在較大的應用程式中，建構可複用的 component 是非常值得的</p>\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>state 類似於 prop，但它是私有且由 component 完全控制的。</p>\n<p>需使用 class component，不能在 function component 使用</p>\n<p>在每次發生更新時，render 方法都會被呼叫</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;It is &#123;this.props.date.toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>加入state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>每當 Clock render 到 DOM 的時候，在 React 中稱為「mount」。</p>\n<p>每當產生的 Clock DOM 被移除時，在 React 中稱為「unmount」。</p>\n<p>在class內加入 <code>componentDidMount()</code>, <code>componentWillUnmount()</code>, 和 <code>setState()</code>，用 state 實作每秒更新的部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.timerID = setInterval(</span><br><span class=\"line\">      () =&gt; <span class=\"keyword\">this</span>.tick(),</span><br><span class=\"line\">      <span class=\"number\">1000</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.timerID);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  因為 props 和 state 可能是非同步的被更新，你不應該依賴它們的值來計算新的 state。</p>\n<p>  要修正這個問題，使用第二種形式的 setState()，它接受一個 function 而不是一個 object。Function 將接收先前的 state 作為第一個參數，並且將更新的 props 作為第二個參數：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">state, props</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  counter: state.counter + props.increment</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>React是「上至下」或「單向」的資料流：任何 state 總是由某個特地的 component 所擁有，任何從 state 得到的資料或 UI，state 只能影響自身和 child component。</p>\n<h2 id=\"事件處理\"><a href=\"#事件處理\" class=\"headerlink\" title=\"事件處理\"></a>事件處理</h2><p>事件的名稱在 React 中都是 camelCase，而在 HTML DOM 中則是小寫。</p>\n<ul>\n<li>HTML DOM 對照 React<ul>\n<li><code>onclick</code> → <code>onClick</code></li>\n<li><code>onclick=&quot;click()&quot;</code> → <code>onClick={click}</code></li>\n</ul>\n</li>\n</ul>\n<p>在 React 中，你不能夠在像在 HTML DOM 中使用 <code>return false</code> 來避免瀏覽器預設行為。你必須明確地呼叫 <code>preventDefault</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">\"#\"</span> onclick=<span class=\"string\">\"console.log('The link was clicked.'); return false\"</span>&gt;</span><br><span class=\"line\">  Click me</span><br><span class=\"line\">&lt;<span class=\"regexp\">/a&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 React 中，你則可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ActionLink</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The link was clicked.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class=\"line\">      Click me</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 JavaScript 中，class 的方法在預設上是沒有被綁定（bound）的。如果你忘了綁定 this.handleClick 並把它傳遞給 onClick 的話，this 的值將會在該 function 被呼叫時變成 undefined。</p>\n<p>總之，當你使用一個方法，卻沒有在後面加上 () 之時（例如當你使用 onClick={this.handleClick} 時），你應該要綁定這個方法。</p>\n<p>The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Toggle</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">isToggleOn</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 為了讓 `this` 能在 callback 中被使用，這裡的綁定是必要的：</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleClick = <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      isToggleOn: !state.isToggleOn</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        &#123;<span class=\"keyword\">this</span>.state.isToggleOn ? <span class=\"string\">'ON'</span> : <span class=\"string\">'OFF'</span>&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Toggle /</span>&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>如果呼叫 bind 對你來說很麻煩的話，你可以用別的方式。如果你使用了還在測試中的 class fields 語法的話，你可以用 class field 正確的綁定 callback：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這個語法確保 `this` 是在 handleClick 中被綁定：</span></span><br><span class=\"line\">  <span class=\"comment\">// 警告：這是一個還在*測試中*的語法：</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is:'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>傳遞一個額外的參數給 event handler。例如，如果 id 是每一行的 ID 的話，下面兩種語法都可行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;(e) =&gt; <span class=\"keyword\">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>以上這兩行程式是相同的。一個使用 arrow functions，另一個則使用了 Function.prototype.bind。</p>\n<p>以這兩個例子來說，e 這個參數所代表的 React 事件將會被當作 ID 之後的第二個參數被傳遞下去。在使用 arrow function 時，我們必須明確地將它傳遞下去，但若使用 bind 語法，未來任何的參數都將會自動被傳遞下去。</p>\n<h2 id=\"條件render\"><a href=\"#條件render\" class=\"headerlink\" title=\"條件render\"></a>條件render</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> isLoggedIn = <span class=\"keyword\">this</span>.state.isLoggedIn;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> button;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (isLoggedIn) &#123;</span><br><span class=\"line\">     button = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LogoutButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     button = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> (</span><br><span class=\"line\">     &lt;div&gt;</span><br><span class=\"line\">       &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class=\"line\">       &#123;button&#125;</span><br><span class=\"line\">     &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">   );</span></span><br><span class=\"line\"><span class=\"regexp\"> &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>用 <code>&amp;&amp;</code> 來條件顯示<br>因為在 JavaScript 中，<code>true &amp;&amp; expression</code> 總是回傳 <code>expression</code> ，而 <code>false &amp;&amp; expression</code> 總是回傳 <code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mailbox</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> unreadMessages = props.unreadMessages;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;Hello!&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123;unreadMessages.length &gt; 0 &amp;&amp;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          You have &#123;unreadMessages.length&#125; unread messages.</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>h2&gt;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>React 在遇到 <code>null</code> 或 <code>false</code> 時都會忽略(不顯示)</p>\n<p>或用條件運算式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;isLoggedIn</span><br><span class=\"line\">    ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LogoutButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\">    : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginButton</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表與key\"><a href=\"#列表與key\" class=\"headerlink\" title=\"列表與key\"></a>列表與key</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li&gt;&#123;number&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>你會收到一個關於你應該提供 key 給每一個列表項目的警告。key 是當你在建立一個 element 列表時必須使用的特殊的 string attribute。</p>\n<p>key 幫助 React 分辨哪些項目被改變、增加或刪除。在 array 裡面的每個 element 都應該要有一個 key，如此才能給予每個 element 一個固定的身份：</p>\n<p>通常，你會使用資料的 ID 作為 key：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> listItems = numbers.map(<span class=\"function\">(<span class=\"params\">number</span>) =&gt;</span></span><br><span class=\"line\">  &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class=\"line\">    &#123;number&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const todoItems = todos.map((todo) =&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li key=&#123;todo.id&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;todo.text&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>li&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>當你 render 的項目沒有固定的 ID 且你也沒有更好的辦法時，你可以使用項目的索引做為 key：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todoItems = todos.map(<span class=\"function\">(<span class=\"params\">todo, index</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// 請在項目沒有固定的 ID 時才這樣做</span></span><br><span class=\"line\">  &lt;li key=&#123;index&#125;&gt;</span><br><span class=\"line\">    &#123;todo.text&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p>React 預設將會使用索引作為 key。但並不建議你使用索引作為 key，尤其如果項目的順序會改變的話。這會對效能產生不好的影響，也可能會讓 component state 產生問題</p>\n<ul>\n<li>key 必須在 Sibling 中是唯一的</li>\n<li>key 的功能是提示 React，但它們不會被傳遞到 component 的 prop。</li>\n</ul>\n<p>應該把 key 放在 array 產生 item 的 render，而不是把它放在 item 的 render。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListItem</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = props.value;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 錯！你不需要在這裡指出 key：</span></span><br><span class=\"line\">    &lt;li key=&#123;value.toString()&#125;&gt;</span><br><span class=\"line\">      &#123;value&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function NumberList(props) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const numbers = props.numbers;</span></span><br><span class=\"line\"><span class=\"regexp\">  const listItems = numbers.map((number) =&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 錯！你應該要在這裡指出 key：</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;ListItem value=&#123;number&#125; /</span>&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &#123;listItems&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一個好的經驗法則是，在 map() 呼叫中的每個 element 都會需要 key。</p>\n<h2 id=\"Form\"><a href=\"#Form\" class=\"headerlink\" title=\"Form\"></a>Form</h2><p>把這個表單寫成一個 controlled component： 用 state 來 顯示 value，onChange 時更新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'A name was submitted: '</span> + <span class=\"keyword\">this</span>.state.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Name:</span><br><span class=\"line\">          &lt;input type=<span class=\"string\">\"text\"</span> value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"Submit\" /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>這意味著你必須寫更多的 code，但現在你同時可以將 value 傳遞給其他的 UI element，或是從其他 event handler 重置。</p>\n<h3 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h3><p>在 React 中並不是用 selected attribute，而是在 select 的標籤上用一個 value attribute</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlavorForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">'coconut'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Your favorite flavor is: '</span> + <span class=\"keyword\">this</span>.state.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Pick your favorite flavor:</span><br><span class=\"line\">          &lt;select value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;&gt;</span><br><span class=\"line\">            &lt;option value=<span class=\"string\">\"grapefruit\"</span>&gt;Grapefruit&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;option value=\"lime\"&gt;Lime&lt;/</span>option&gt;</span><br><span class=\"line\">            &lt;option value=<span class=\"string\">\"coconut\"</span>&gt;Coconut&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;option value=\"mango\"&gt;Mango&lt;/</span>option&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/select&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>label&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"Submit\"</span> /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以將一個 array 傳給 value 這個 attribute，這使得你可以在一個 select 中選取多個選項：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;select multiple=&#123;<span class=\"literal\">true</span>&#125; value=&#123;[<span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"input-file\"><a href=\"#input-file\" class=\"headerlink\" title=\"input file\"></a>input file</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"file\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>由於它的值是唯讀，它在 React 中是一個 uncontrolled component。在稍後的文件中有其他關於它和其他 uncontrolled component 的討論。</p>\n<h3 id=\"多個input\"><a href=\"#多個input\" class=\"headerlink\" title=\"多個input\"></a>多個input</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reservation</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      isGoing: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      numberOfGuests: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleInputChange = <span class=\"keyword\">this</span>.handleInputChange.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleInputChange(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = event.target;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = target.name === <span class=\"string\">'isGoing'</span> ? target.checked : target.value;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = target.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      [name]: value</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Is going:</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            name=<span class=\"string\">\"isGoing\"</span></span><br><span class=\"line\">            type=<span class=\"string\">\"checkbox\"</span></span><br><span class=\"line\">            checked=&#123;<span class=\"keyword\">this</span>.state.isGoing&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;br /</span>&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          <span class=\"built_in\">Number</span> <span class=\"keyword\">of</span> guests:</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            name=<span class=\"string\">\"numberOfGuests\"</span></span><br><span class=\"line\">            type=<span class=\"string\">\"number\"</span></span><br><span class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.state.numberOfGuests&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>form&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一個 controlled component 上指明 value prop 可避免使用者改變輸入，除非你希望使用者這樣做。如果你已經指明了 value 但輸入仍然是可以被修改的，你很可能是不小心將 value 的值設定為 undefined 或 null。</p>\n<p>下面的程式碼就是一個範例。（輸入原先是被鎖住的，但在短暫的延遲後，變得可以被修改了。）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hi\"</span> /&gt;</span></span>, mountNode);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;null&#125;</span> /&gt;</span></span>, mountNode);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"uncontrolled-component\"><a href=\"#uncontrolled-component\" class=\"headerlink\" title=\"uncontrolled component\"></a>uncontrolled component</h3><p>在大多數的情況下，我們推薦使用 controlled component 來實作表單。在控制元件裡，表單的資料是被 React component 所處理。另一個選擇是 uncontrolled component，表單的資料是由 DOM 本身所處理的。</p>\n<p>使用 ref 來從 DOM 取得表單的資料，而不是為了每個 state 的更新寫 event handler。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.input = React.createRef();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleSubmit(event) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'A name was submitted: '</span> + <span class=\"keyword\">this</span>.input.current.value);</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">          Name:</span><br><span class=\"line\">          &lt;input type=<span class=\"string\">\"text\"</span> ref=&#123;<span class=\"keyword\">this</span>.input&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"Submit\" /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你想找出一個完整的、包含驗證、可追蹤拜訪欄位並能處理提交表單等功能的解決方案，Formik 是一個很熱門的選擇。然而，它是在與 controlled component 和維持 state 相同的原則上所建立的，所以別忘了學習它。</p>\n<h2 id=\"提升-State\"><a href=\"#提升-State\" class=\"headerlink\" title=\"提升 State\"></a>提升 State</h2><p>在 React 中，將 state 搬移到需要它的 component 的共同最近的祖先來共享 state。這被稱為「提升 state」。</p>\n<p>我們將從 TemperatureInput 移除 local state 並且搬移它到 Calculator。</p>\n<p>我們移除了它的 local state，並且不讀取 this.state.temperature，我們現在讀取 this.props.temperature。當我們想要改變時不呼叫 this.setState()，我們現在呼叫 this.props.onTemperatureChange()，它是由 Calculator 提供的</p>\n<p>calculator 傳入 prop.onChange 方法，供child的值改變時呼叫onChange()，以改變calculator(parent)的值</p>\n<p>通常來說，state 會優先被加入到需要 render 的 component。接著，如果其他的 component 也需要的話，你可以提升 state 到共同最靠近的 ancestor。</p>\n<p><strong>你應該依賴上至下的資料流，而不是嘗試在不同 component 之間同步 state。</strong></p>\n<p>當你在 UI 上看到一些錯誤時，你可以使用 React Developer Tools 來檢查 prop 並往 tree 的上方尋找，直到找到負責更新 state 的 component。這讓你可以追蹤到錯誤的來源</p>\n<h2 id=\"合成-vs-繼承\"><a href=\"#合成-vs-繼承\" class=\"headerlink\" title=\"合成 vs 繼承\"></a>合成 vs 繼承</h2><p>有些 component 不會提早知道它們的 children 有些什麼。對於像是 Sidebar 或 Dialog</p>\n<p>我們建議這些 component 使用特殊的 <code>children</code> prop 將 children element 直接傳入到它們的輸出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FancyBorder</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=&#123;<span class=\"string\">'FancyBorder FancyBorder-'</span> + props.color&#125;&gt;</span><br><span class=\"line\">      &#123;props.children&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/任何在 &lt;FancyBorder&gt; JSX tag 內的內容都被作為 children prop 被傳遞給 FancyBorder component。</span></span><br><span class=\"line\"><span class=\"regexp\">function WelcomeDialog() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;FancyBorder color=\"blue\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h1 className=\"Dialog-title\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        Welcome</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>h1&gt;</span><br><span class=\"line\">      &lt;p className=<span class=\"string\">\"Dialog-message\"</span>&gt;</span><br><span class=\"line\">        Thank you <span class=\"keyword\">for</span> visiting our spacecraft!</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>FancyBorder&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可用來排版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SplitPane</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"SplitPane\"</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"SplitPane-left\"</span>&gt;</span><br><span class=\"line\">        &#123;props.left&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"SplitPane-right\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;props.right&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function App() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;SplitPane</span></span><br><span class=\"line\"><span class=\"regexp\">      left=&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Contacts /</span>&gt;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      right=&#123;</span><br><span class=\"line\">        &lt;Chat /&gt;</span><br><span class=\"line\">      &#125; /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Facebook 中，我們使用 React 在成千上萬個 component，我們找不到任何使用案例來推薦你建立繼承結構的 component。</p>\n<h2 id=\"用-React-思考\"><a href=\"#用-React-思考\" class=\"headerlink\" title=\"用 React 思考\"></a>用 React 思考</h2><h3 id=\"第一步：將-UI-拆解成-component-層級\"><a href=\"#第一步：將-UI-拆解成-component-層級\" class=\"headerlink\" title=\"第一步：將 UI 拆解成 component 層級\"></a>第一步：將 UI 拆解成 component 層級</h3><p>首先，你要做的是將視覺稿中每一個 component （及 subcomponent）都圈起來，並幫它們命名。</p>\n<p>其中一個技巧是單一職責原則，它的意思是：在我們的理想中，一個 component應該只負責做一件事情。如果這個 component 最後變大了，你就需要再將它分成數個更小的 subcomponent 。</p>\n<p>由於你常常會展示 JSON 的資料模型給使用者，你會發現，如果你的模式是正確地被建立的話，你的 UI（以及你的 component 結構）會很好的相互對應。這是因為 UI 和資料模型通常是遵守同樣的資訊架構，這意味著將你的 UI 拆成 component 通常是相當容易的。</p>\n<h3 id=\"第二步：在-React-中建立一個靜態版本\"><a href=\"#第二步：在-React-中建立一個靜態版本\" class=\"headerlink\" title=\"第二步：在 React 中建立一個靜態版本\"></a>第二步：在 React 中建立一個靜態版本</h3><p>在你有了 component 層級後，就可以開始實作你的應用程式了。最簡單的方式是為你的應用程式建立一個接收資料模型、render UI 且沒有互動性的版本。建立一個靜態版本需要打很多字，但不需要想很多，而加上互動性則相反，需要做很多的思考，很少的打字，所以最好的方式是把這幾個過程都分開來。接下來，我們會知道為什麼是如此。</p>\n<p>請完全不要使用 state 來建立這個靜態版本。State 是保留給互動性的，也就是會隨時間改變的資料。既然我們目前要做的是這應用程式的靜態版本，你就不需要 state。</p>\n<p>你可以從最上層開始，或從最下層開始。也就是說，你可以先從層級較高的 component 開始做起，或者你也可以從比它低層級的開始。在比較簡單的例子中，通常從上往下是比較簡單的。但在較為大型的專案中，從下往上、邊寫邊測試則比較容易。</p>\n<p>React 的 單向資料流（也可稱為單向綁定）確保所有 component 都是模塊化且快速的。</p>\n<h3 id=\"第三步：找出最少（但完整）的-UI-State-的代表\"><a href=\"#第三步：找出最少（但完整）的-UI-State-的代表\" class=\"headerlink\" title=\"第三步：找出最少（但完整）的 UI State 的代表\"></a>第三步：找出最少（但完整）的 UI State 的代表</h3><p>請找出你的應用程式所需的最少的呈現方式，並在你遇到其他東西時再計算它們。例如，如果你在建立一個待辦清單，使用一個可以用來代表待辦事項的 array。不要另外用一個獨立的 state 變數來追蹤數量。當你要 render 代辦事項的數量時，讀取待辦事項 array 的長度即可。</p>\n<p>對於每一個資料，問你自己這三個問題：</p>\n<ol>\n<li>這個資料是從 parent 透過 props 傳下來的嗎？如果是的話，那它很可能不是 state。</li>\n<li>這個資料是否一直保持不變呢？如果是的話，那它很可能不是 state。</li>\n<li>你是否可以根據你的 component 中其他的 state 或 prop 來計算這個資料呢？如果是的話，那它一定不是 state。</li>\n</ol>\n<h3 id=\"第四步：找出你的-State-應該在哪裡\"><a href=\"#第四步：找出你的-State-應該在哪裡\" class=\"headerlink\" title=\"第四步：找出你的 State 應該在哪裡\"></a>第四步：找出你的 State 應該在哪裡</h3><p>我們需要找出哪幾個 component 會 mutate，或者擁有，這個 state。</p>\n<p>請記得，React 的核心精神是單向資料流，從 component 的層級從高往下流。<strong>也許哪個 component 該擁有 state 在一開始並不是很明顯</strong>。對新手來說，這往往是最難理解的概念，所以請跟著以下的步驟來思考：</p>\n<p>在你的應用程式中的每個 state：</p>\n<ul>\n<li>指出每個根據 state 來 render 某些東西的 component。</li>\n<li>找出一個共同擁有者 component（在層級中單一一個需要 state 的、在所有的 component 之上的 component）。</li>\n<li>應該擁有 state 的會是共同擁有者 component 或另一個更高層級的 component。(找最高級的component來持有state)</li>\n<li>如果你找不出一個應該擁有 state 的 component 的話，那就建立一個新的 component 來保持 state，並把它加到層級中共同擁有者 component 之上的某處。</li>\n</ul>\n<h3 id=\"第五步：加入相反的資料流\"><a href=\"#第五步：加入相反的資料流\" class=\"headerlink\" title=\"第五步：加入相反的資料流\"></a>第五步：加入相反的資料流</h3><p>現在是時候支援另一種資料流的方向了：在層級深處的表格 component 需要更新 FilterableProductTable 的 state。</p>\n<p>讓我們思考一下我們想要做些什麼。我們想確保當使用者改變這個表格時，我們會更新 state 以反映使用者的輸入。既然 component 只應該更新它自己本身的 state， FilterableProductTable 將會把 callback 傳給 SearchBar，而它們則會在 state 該被更新的時候被觸發。我們可以在輸入上使用 onChange 這個 event 來 接收通知。被 FilterableProductTable 傳下來的 callback 則會呼叫 setState()，之後應用程式就會被更新。</p>\n<h2 id=\"推薦的-Toolchain\"><a href=\"#推薦的-Toolchain\" class=\"headerlink\" title=\"推薦的 Toolchain\"></a>推薦的 Toolchain</h2><p>React 團隊主要推薦以下的方案：</p>\n<ul>\n<li>如果你正在學習 React 或建立全新的 single-page 應用程式，請使用 Create React App。</li>\n<li>如果你正在建立一個使用 Node.js 的 server-rendered 網頁，請使用 Next.js。</li>\n<li>如果你正在建立一個靜態內容的網頁，請使用 Gatsby。</li>\n<li>如果你正在建立一個 component 函式庫或與現存程式碼倉庫進行接軌，請使用更靈活的 Toolchain。</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaGVsbG8td29ybGQuaHRtbA==\">React: 語法教學<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL3R1dG9yaWFsL3R1dG9yaWFsLmh0bWw=\">React: 動手做教學<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>[React: css])(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2ZhcS1zdHlsaW5nLmh0bWw=\">https://reactjs.org/docs/faq-styling.html<i class=\"fa fa-external-link-alt\"></i></span>)</li>\n</ul>\n",
            "tags": [
                "reactjs",
                "javascript"
            ]
        }
    ]
}